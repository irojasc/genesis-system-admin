# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'inout_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont, QBrush, QColor
from PyQt5.QtWidgets import QApplication, QWidget, QMessageBox
from PyQt5.QtCore import Qt, QThread, QObject, pyqtSignal
from PyQt5.QtWidgets import *
from gestor import WareProduct
from objects import ware

from functools import reduce

class Ui_inoutDialog(QtWidgets.QDialog):
    def __init__(self, data_users = None, data_wares: ware = None, parent=None):
        super(Ui_inoutDialog, self).__init__(parent)
        self.ownUsers = data_users
        self.ownWares = data_wares
        self.mainList = []
        self.newItems_table = []
        self.oldItems_table = []
        self.cantItems = 0
        self.valCell = ""
        self.operacion = None #define estado neutro para el closeevent
        self.ware_in = WareProduct() #esto es para realizar el update
        self.setupUi()
        self.init_condition()

    def __del__(self):
        print("kill me")
    
    def __enter__(self):
        return self
    
    def __exit__(self,ext_type,exc_value,traceback):
        del self

    #def show_window(self):
        #self.thread_.myValue = True
        #self.startProgressBar()
        #self.newItems_table.clear()
        #self.update_table()qtablewidget
        #self.cmbCriterio.setCurrentIndex(-1)
        #self.show()

    def init_condition(self):
        # -----------  set item conditions  -----------
        # ----------- condiciones inicales para ubicacion -----------
        self.txtProductLocation.setEnabled(False)
        self.txtProductLocation.clear()
        self.checkBox.setChecked(False)

        self.newItems_table.clear()
        self.oldItems_table.clear()
        self.cantItems = 0
        self.generalFlag = False
        item_all = ['cod','isbn','titulo','autor']
        items_operacion = ['ingreso', 'salida']
        self.cmbBusqueda.clear()
        self.cmbOperacion.clear()
        self.cmbBusqueda.addItems(item_all)
        self.New_tableWidget.clearContents()
        self.New_tableWidget.setRowCount(0)
        self.Old_tableWidget.clearContents()
        self.Old_tableWidget.setRowCount(0)
        self.lblCantidadTitulos.setText("Titulos: 0")
        self.lblTitle_cant.setText("Items: 0")
        self.cmbOperacion.addItems(items_operacion)
        self.cmbBusqueda.setCurrentIndex(-1)
        self.cmbOperacion.setCurrentIndex(-1)
        self.txtBusqueda.clear()
        self.searchList.clear()
        self.tabWidget.setTabText(0, "NUEVO (0)")
        self.tabWidget.setTabText(1, "SEGUNDA (0)")
        self.tabWidget.blockSignals(True)
        self.tabWidget.setCurrentIndex(0)
        self.tabWidget.blockSignals(False)

    def add_item(self, cod: str = ""): #Se envia el codigo del item que se quiere agregar a lista nuevos
        highlightedRow = 0
        #mainList es la lista de items original
        #main_table es lista para manejar los datos qtablewidget
        #index_ igual a None si no ecuentra coincidcnias
        itemSelected = list(filter(lambda x: x.product.prdCode == cod, self.mainList))
        itemSelected = itemSelected[0] if bool(len(itemSelected)) else None
        # index_ = next((index for (index, d) in enumerate(self.mainList) if d.objBook.cod == cod), None)
        flag = False
        if len(self.newItems_table) == 0 and bool(itemSelected):
            #_tmpObject = copy.copy(object_)
            data = {"loc": itemSelected.wareData[self.ownWares.cod]["loc"] ,"cod": itemSelected.product.prdCode, 
                    "isbn": itemSelected.product.isbn, "title": itemSelected.product.title, "qtyNew": 1, "qtyOld": None}
            self.newItems_table.append(data)
            highlightedRow = 0

        elif len(self.newItems_table) > 0 and bool(itemSelected):
            #_tmpObject = copy.copy(object_)
            #data = {"loc": itemSelected.wareData[self.ownWares.cod]["loc"] ,"cod": _tmpObject.book.cod, "isbn": _tmpObject.book.isbn, "title": _tmpObject.book.title, "qty": _tmpObject.almacen_quantity[0]}
            for pos, item in enumerate(self.newItems_table):
                if item["cod"] == cod:
                    flag = True
                    item["qtyNew"] += 1 
                    highlightedRow = pos

            if flag == False:
                data = {"loc": itemSelected.wareData[self.ownWares.cod]["loc"] ,"cod": itemSelected.product.prdCode, "isbn": itemSelected.product.isbn, "title": itemSelected.product.title, "qtyNew": 1, "qtyOld": None}
                self.newItems_table.append(data)
                highlightedRow = len(self.newItems_table) - 1

        self.update_table()
        self.New_tableWidget.setCurrentCell(highlightedRow, 0)
        self.updateTotalItems()

    def add_OldItem(self, cod: str = ""): #Se envia el codigo del item que se quiere agregar a list que antiguos
        highlightedRow = 0
        #mainList es la lista de items original
        #main_table es lista para manejar los datos qtablewidget
        #index_ igual a None si no ecuentra coincidcnias
        itemSelected = list(filter(lambda x: x.product.prdCode == cod, self.mainList))
        itemSelected = itemSelected[0] if bool(len(itemSelected)) else None
        # index_ = next((index for (index, d) in enumerate(self.mainList) if d.objBook.cod == cod), None)
        flag = False
        if len(self.oldItems_table) == 0 and bool(itemSelected):
            #_tmpObject = copy.copy(object_)
            data = {"loc": itemSelected.wareData[self.ownWares.cod]["loc"] ,"cod": itemSelected.product.prdCode, "isbn": itemSelected.product.isbn, "title": itemSelected.product.title, "qtyOld": 1, "qtyNew": None}
            self.oldItems_table.append(data)
            highlightedRow = 0

        elif len(self.oldItems_table) > 0 and bool(itemSelected):
            #_tmpObject = copy.copy(object_)
            #data = {"loc": itemSelected.wareData[self.ownWares.cod]["loc"] ,"cod": _tmpObject.book.cod, "isbn": _tmpObject.book.isbn, "title": _tmpObject.book.title, "qty": _tmpObject.almacen_quantity[0]}
            for pos, item in enumerate(self.oldItems_table):
                if item["cod"] == cod:
                    flag = True
                    item["qtyOld"] += 1 
                    highlightedRow = pos

            if flag == False:
                data = {"loc": itemSelected.wareData[self.ownWares.cod]["loc"] ,"cod": itemSelected.product.prdCode, "isbn": itemSelected.product.isbn, "title": itemSelected.product.title, "qtyOld": 1, "qtyNew": None}
                self.oldItems_table.append(data)
                highlightedRow = len(self.oldItems_table) - 1

        self.update_table()
        self.Old_tableWidget.setCurrentCell(highlightedRow, 0)
        self.updateTotalItems()
    
    def update_table(self):
        self.loadFlag = True
        tabIndex = not(self.tabWidget.currentIndex())
        flag = QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEnabled
        flag1 = QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsEditable
        
        # -----------  esta parte para llenar la tabla  -----------
        # row = 0
        self.New_tableWidget.setRowCount(len(self.newItems_table)) if  tabIndex else self.Old_tableWidget.setRowCount(len(self.oldItems_table))

        for row, ware_li in enumerate(self.newItems_table if tabIndex else self.oldItems_table):
            item = QtWidgets.QTableWidgetItem(ware_li["cod"])
            item.setFlags(flag)
            self.New_tableWidget.setItem(row, 0, item) if tabIndex else self.Old_tableWidget.setItem(row, 0, item)
        
            # Self.currWare.auth["locTooltip"]: este permiso es propio del almacen actual
            # Esta parte agrega la ubicacion del producto en la primera columna
            if self.ownWares.auth["locTooltip"]:
                self.New_tableWidget.item(row, 0).setToolTip(ware_li['loc']) if tabIndex else self.Old_tableWidget.item(row, 0).setToolTip(ware_li['loc'])

            item = QtWidgets.QTableWidgetItem(ware_li["isbn"])
            item.setFlags(flag)
            self.New_tableWidget.setItem(row, 1, item) if tabIndex else self.Old_tableWidget.setItem(row, 1, item)
            item = QtWidgets.QTableWidgetItem(ware_li["title"])
            item.setFlags(flag)
            self.New_tableWidget.setItem(row, 2, item) if tabIndex else self.Old_tableWidget.setItem(row, 2, item)
            item = QtWidgets.QTableWidgetItem(str(ware_li["qtyNew"]) if tabIndex else str(ware_li["qtyOld"]))
            item.setFlags(flag1)
            self.New_tableWidget.setItem(row, 3, item) if tabIndex else self.Old_tableWidget.setItem(row, 3, item)
            # row += 1
        self.loadFlag = False

    # txtbusqueda agrega valores desde field busqueda, el segundo de listsearch y el tercero con click
    def txtbusquedaAcept(self, event):
        tabIndex = not(self.tabWidget.currentIndex())
        
        if (event.key() == QtCore.Qt.Key_Return or event.key() == QtCore.Qt.Key_Enter) and self.cmbBusqueda.currentText() == "isbn" and self.cmbBusqueda.currentIndex() != -1:
            if self.searchList.count() == 1:
                self.add_item(self.searchList.item(0).text().split(" ")[0].strip()) if tabIndex else self.add_OldItem(self.searchList.item(0).text().split(" ")[0].strip())
                self.txtBusqueda.clear()

            elif self.searchList.count() > 1:
                ret = QMessageBox.information(self, 'Aviso', "Elija item haciendo doble click sobre fila")

        if (event.key() == QtCore.Qt.Key_Return or event.key() == QtCore.Qt.Key_Enter) and self.cmbBusqueda.currentText() != "isbn" and self.cmbBusqueda.currentIndex() != -1:
            if self.searchList.count() > 0:
                self.add_item(self.searchList.item(self.searchList.currentRow()).text().split(" ")[0].strip()) if tabIndex else self.add_OldItem(self.searchList.item(self.searchList.currentRow()).text().split(" ")[0].strip())

        return QtWidgets.QLineEdit.keyPressEvent(self.txtBusqueda, event)

    def listSearchKey(self, event):
        tabIndex = not (self.tabWidget.currentIndex())
        try:
            if (event.key() == QtCore.Qt.Key_Return or event.key() == QtCore.Qt.Key_Enter) and self.cmbBusqueda.currentText() == "isbn" and self.cmbBusqueda.currentIndex() != -1:
                if self.searchList.count() >= 1:
                    self.add_item(self.searchList.item(self.searchList.currentRow()).text().split(" ")[0].strip()) if tabIndex else self.add_OldItem(self.searchList.item(self.searchList.currentRow()).text().split(" ")[0].strip())

            if (event.key() == QtCore.Qt.Key_Return or event.key() == QtCore.Qt.Key_Enter) and self.cmbBusqueda.currentText() != "isbn" and self.cmbBusqueda.currentIndex() != -1:
                if self.searchList.count() > 0:
                    self.add_item(self.searchList.item(self.searchList.currentRow()).text().split(" ")[0].strip()) if tabIndex else self.add_OldItem(self.searchList.item(self.searchList.currentRow()).text().split(" ")[0].strip())
        
        except Exception as inst:
            print(type(inst))
            print(inst.args)
            print(inst)
        
        return QtWidgets.QListWidget.keyPressEvent(self.searchList, event)

    def clickEventInSrchList(self, QModel_):
        if self.cmbBusqueda.currentText() == "isbn" and self.cmbBusqueda.currentIndex() != -1:
            self.add_item(self.searchList.item(QModel_.row()).text().split(" ")[0].strip()) if not (self.tabWidget.currentIndex()) else self.add_OldItem(self.searchList.item(QModel_.row()).text().split(" ")[0].strip())
    
    def txtBusquedaChanged(self):

        tmp_len = 0

        if bool(len(self.cmbBusqueda.currentText())) and self.txtBusqueda.text() != "":
            self.searchList.clear()
            # tmp_len es la cantidad de items encontrados
            tmp_len = self.buscar(self.cmbBusqueda.currentText() if self.cmbBusqueda.currentText() != "titulo" else "title", self.txtBusqueda.text())
        elif self.txtBusqueda.text() == "":
            self.searchList.clear()

        if tmp_len == 0:
            self.searchList.clear()
        elif tmp_len > 0:
            self.searchList.setCurrentRow(0)

    def keyPressEvent(self, event):
        if not event.key() == QtCore.Qt.Key_Escape:
            super(Ui_inoutDialog, self).keyPressEvent(event)

    def DeleteKeyPressed(self,event):
        if self.New_tableWidget.selectedIndexes() != []:
            if event.key() == QtCore.Qt.Key_Delete:
                index = self.New_tableWidget.currentRow()
                self.newItems_table.pop(index)
                self.updateTotalItems()
                self.update_table()
        return QtWidgets.QTableWidget.keyPressEvent(self.New_tableWidget, event)
    
    def DeleteOldKeyPressed(self,event):
        if self.Old_tableWidget.selectedIndexes() != []:
            if event.key() == QtCore.Qt.Key_Delete:
                index = self.Old_tableWidget.currentRow()
                self.oldItems_table.pop(index)
                self.updateTotalItems()
                self.update_table()
        return QtWidgets.QTableWidget.keyPressEvent(self.Old_tableWidget, event)

    def onCmbIndexChanged(self):
        self.txtBusqueda.setText("")

    def buscar(self, criterio, patron):

        if criterio == "cod":
            itemsFound = list(filter(lambda x: x.product.prdCode == str.upper(patron), self.mainList))

            if bool(len(itemsFound)):    
                if bool(len(itemsFound[0].product.isbn)):
                    self.searchList.insertItem(0, itemsFound[0].product.prdCode + " | " + itemsFound[0].product.isbn + " | " + 
                                                itemsFound[0].product.title[:27] + " | " + itemsFound[0].product.autor[:15] + " | " + itemsFound[0].product.publisher[:8])
                else:
                    self.searchList.insertItem(0, itemsFound[0].product.prdCode + " | " + itemsFound[0].product.isbn + " | " +
                                                itemsFound[0].product.title[:28] + " | " + itemsFound[0].product.autor[:12] + " | " + itemsFound[0].product.publisher[:12])
        else:
            itemsFound = list(filter(lambda x: getattr(x.product, criterio).find(str.upper(patron)) >= 0, self.mainList))
            listLabels = list(map(lambda i: i.product.prdCode + " | " + i.product.isbn + " | " +
                                                   i.product.title[:27] + " | " + i.product.autor[:15] + " | " + i.product.publisher[:8]
                                                   if bool(i.product.isbn) else i.product.prdCode + " | " + "" + " | " +
                                                   i.product.title[:28] + " | " + i.product.autor[:12] + " | " + i.product.publisher[:12], itemsFound))
            
            if bool(len(listLabels)):
                self.searchList.addItems(listLabels)

        return len(itemsFound)

    #evento cuando se cambia el valor de la celda
    def changeIcon(self, item):
        #New_tablewidget es el widget de la tabla
        #newItems es el inner table de tipo List
        if self.New_tableWidget.item(item.row(), 3) != None and not self.loadFlag:
            row = item.row()
            try:
                cellValue = int(self.New_tableWidget.item(row, 3).text())
                if cellValue > 0:
                    self.newItems_table[row]["qtyNew"] = cellValue
                elif cellValue <= 0:
                    self.New_tableWidget.item(row, 3).setText(str(self.newItems_table[row]["qtyNew"]))
            except:
                ret = QMessageBox.information(self, 'Aviso', "Debe ingresar un numero entero")
                self.New_tableWidget.item(row, 3).setText(str(self.newItems_table[row]["qtyNew"]))
            self.updateTotalItems()
            
    def changeOldIcon(self, item):
        #Old_tablewidget es el widget de la tabla
        #newItems es el inner table de tipo List
        if self.Old_tableWidget.item(item.row(), 3) != None and not self.loadFlag:
            row = item.row()
            try:
                cellValue = int(self.Old_tableWidget.item(row, 3).text())
                if cellValue > 0:
                    self.oldItems_table[row]["qtyOld"] = cellValue
                elif cellValue <= 0:
                    self.Old_tableWidget.item(row, 3).setText(str(self.oldItems_table[row]["qtyOld"]))
            except:
                ret = QMessageBox.information(self, 'Aviso', "Debe ingresar un numero entero")
                self.Old_tableWidget.item(row, 3).setText(str(self.oldItems_table[row]["qtyOld"]))
            self.updateTotalItems()
    
    # def doubleClickItem(self, item):
    #     pass

    def updateTotalItems(self): #actualiza la cantidad de items y la cantidad de titulos en label
        self.cantItems = 0
        self.cantTitles = 0

        if not(self.tabWidget.currentIndex()) and not(bool(len(self.newItems_table))):
            self.cantItems = 0
            self.cantTitles = 0
        elif not(self.tabWidget.currentIndex()) and bool(len(self.newItems_table)):
            qtyMap = list(map(lambda x: x["qtyNew"], self.newItems_table))
            self.cantItems = reduce(lambda a, b: a + b, qtyMap)
            self.cantTitles = len(self.newItems_table)
        elif bool(self.tabWidget.currentIndex()) and not(bool(len(self.oldItems_table))):
            self.cantItems = 0
            self.cantTitles = 0
        elif bool(self.tabWidget.currentIndex()) and bool(len(self.oldItems_table)):
            qtyMap = list(map(lambda x: x["qtyOld"], self.oldItems_table))
            self.cantItems = reduce(lambda a, b: a + b, qtyMap)
            self.cantTitles = len(self.oldItems_table)
            
        self.lblTitle_cant.setText("Items: %d" % self.cantItems)
        self.tabWidget.setTabText(0, "NUEVO (%d)" % self.cantItems) if not(self.tabWidget.currentIndex()) else self.tabWidget.setTabText(1, "SEGUNDA (%d)" % self.cantItems)
        self.lblCantidadTitulos.setText("Titulos: %d" % self.cantTitles)

    def aceptarEvent(self,event):
        if event.button() == QtCore.Qt.LeftButton:
            if self.cmbOperacion.currentIndex() != -1:
                self.operacion = "aceptar"
                #este metodo close envia la operacion al metodo closeEvent
                self.close() 
            else:
                ret = QMessageBox.information(self, 'Aviso', "Debe ingresar criterio de operación")

    def closeEvent(self, event):
        if self.operacion == "aceptar":
            event.ignore()
            if self.New_tableWidget.rowCount() > 0 or self.Old_tableWidget.rowCount() > 0:
                reply = QMessageBox.question(self, 'Window Close', 'Esta seguro de efectuar los cambios?', QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
                if reply == QMessageBox.Yes:
                    if self.ware_in.update_quantity(self.newItems_table, self.oldItems_table, self.cmbOperacion.currentText(), str(self.ownWares.id),
                                                    self.txtProductLocation.text()):
                        ret = QMessageBox.question(self, 'Alerta', "Operación exitosa", QMessageBox.Ok, QMessageBox.Ok)
                        self.generalFlag = True
                        self.accept()
                        event.accept()
                    else:
                        ret = QMessageBox.information(self, 'Aviso', "No se pudo conectar con la base de datos")
                        event.ignore()
                else:
                    event.ignore()
            else:
                ret = QMessageBox.information(self, 'Aviso', "No hay items agregados en tabla")
                event.ignore()
            self.operacion = None
        else:
            reply = QMessageBox.question(self, 'Window Close', 'al cerrar la ventana, se borraran los datos de la tabla', QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if reply == QMessageBox.Yes:
                self.New_tableWidget.clearContents()
                self.New_tableWidget.setRowCount(0)
                self.Old_tableWidget.clearContents()
                self.Old_tableWidget.setRowCount(0)
                self.generalFlag = False
                self.accept()
                event.accept()
            else:
                event.ignore()

    def checkBoxChangedAction(self):
        if self.checkBox.isChecked():
            self.txtProductLocation.setEnabled(True)
        else:
            self.txtProductLocation.setEnabled(False)
            self.txtProductLocation.clear()

    def onTabChanged(self, index):
        self.updateTotalItems()

    @property
    def returned_val(self):
        return (self.newItems_table, self.oldItems_table, self.cmbOperacion.currentText(), self.generalFlag)

    def setupUi(self):
        self.setObjectName("inoutDialog")
        self.resize(640, 360)
        self.setFixedSize(640,360)

        # -----------  top frame configuration  -----------
        self.frame_2 = QtWidgets.QFrame(self)
        self.frame_2.setGeometry(QtCore.QRect(0, 0, 640, 65)) #width 640, height 65
        self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")

        # -----------  groupBox configuration  -----------
        self.gbCriterio = QtWidgets.QGroupBox(self.frame_2)
        self.gbCriterio.setGeometry(QtCore.QRect(20, 0, 390, 60))
        #self.change_color_criterio() #funcion que cambia color y fuente de gbCriterio
        self.gbCriterio.setObjectName("gbCriterio")

        # -----------  QComboBox configuration  -----------
        self.cmbBusqueda = QtWidgets.QComboBox(self.gbCriterio)
        self.cmbBusqueda.setGeometry(QtCore.QRect(10, 23, 80, 30))
        self.cmbBusqueda.setStyleSheet("background-color: rgb(170, 255, 0);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.cmbBusqueda.setFont(font)
        self.cmbBusqueda.setObjectName("cmbBusqueda")
        self.cmbBusqueda.currentIndexChanged.connect(self.onCmbIndexChanged)

        # -----------  QlineWidget configuration  -----------
        self.txtBusqueda = QtWidgets.QLineEdit(self.gbCriterio)
        self.txtBusqueda.setGeometry(QtCore.QRect(100, 23, 280, 30))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.txtBusqueda.setFont(font)
        self.txtBusqueda.setStyleSheet("background-color: rgb(248, 248, 248);")
        self.txtBusqueda.setClearButtonEnabled(True)
        self.txtBusqueda.setObjectName("txtBusqueda")
        #self.txtBusqueda.keyPressEvent = self.keyPressed_
        #self.txtBusqueda.mousePressEvent = self.holaMundo
        self.txtBusqueda.textChanged.connect(self.txtBusquedaChanged)
        self.txtBusqueda.keyPressEvent = self.txtbusquedaAcept

        # -----------  btnBuscar configuration  -----------
        #self.btnBuscar = QtWidgets.QPushButton(self.gbCriterio)
        #self.btnBuscar.setGeometry(QtCore.QRect(390, 23, 71, 30))
        #font = QtGui.QFont()
        #font.setFamily("Open Sans Semibold")
        #font.setPointSize(10)
        #font.setBold(True)
        #font.setWeight(75)
        #self.btnBuscar.setFont(font)
        #self.btnBuscar.setStyleSheet("background-color: rgb(240, 240, 240);")
        #self.btnBuscar.setObjectName("btnBuscar")
        #self.btnBuscar.clicked.connect(self.btnBuscarEvent)

        #self.btnBuscar.clicked.connect(self.btnBuscarEvent)

        #self.cmbCriterio = QtWidgets.QComboBox(self.gbCriterio)
        #self.cmbCriterio.setGeometry(QtCore.QRect(20, 23, 141, 30))
        #self.cmbCriterio.setStyleSheet("background-color: rgb(170, 255, 0);")
        #font = QFont()
        #font.setFamily("Open Sans Semibold")
        #font.setPointSize(10)
        #font.setBold(True)
        #font.setWeight(75)
        #self.cmbCriterio.setFont(font)
        #self.cmbCriterio.setObjectName("cmbCriterio")

        # -----------  qlist configuration  -----------
        self.searchList = QtWidgets.QListWidget(self)
        self.searchList.setGeometry(QtCore.QRect(0, 65, 640, 65))
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(45)
        self.searchList.setFont(font)
        self.searchList.setObjectName("searchList")
        self.searchList.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.searchList.keyPressEvent = self.listSearchKey
        self.searchList.doubleClicked.connect(self.clickEventInSrchList)

        # -----------  mid-frame configuration  -----------
        self.mid_frame = QtWidgets.QFrame(self)
        self.mid_frame.setGeometry(QtCore.QRect(0, 130, 640, 30)) #width 640, height 65
        self.mid_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")
        self.mid_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.mid_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.mid_frame.setObjectName("mid_frame")

        # -----------  tabWdiget  -----------
        self.tabWidget = QtWidgets.QTabWidget(self, movable=False)
        self.tabWidget.setGeometry(QtCore.QRect(0, 135, 640, 175))
        self.tabWidget.setTabShape(QTabWidget.TabShape.Triangular)
        stylesheet = "QTabBar::tab:selected{background: rgb(170,255,0);}QTabBar{font-weight:bold;}"
        self.tabWidget.setStyleSheet(stylesheet)
        self.tabWidget.blockSignals(True)
        self.tabWidget.currentChanged.connect(self.onTabChanged)

        # -----------  New_tableWidget  -----------
        self.New_tableWidget = QtWidgets.QTableWidget(self)
        self.tabWidget.addTab(self.New_tableWidget, "NUEVO (0)")
        self.New_tableWidget.setGeometry(QtCore.QRect(0, 0, 640, 175))
        self.New_tableWidget.setObjectName("New_tableWidget")
        self.New_tableWidget.setColumnCount(4)
        self.New_tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.New_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.New_tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.New_tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.New_tableWidget.setHorizontalHeaderItem(3, item)

        self.New_tableWidget.setColumnWidth(0,80)
        self.New_tableWidget.setColumnWidth(1,120)
        self.New_tableWidget.setColumnWidth(2,365)
        self.New_tableWidget.setColumnWidth(3,75)
        self.New_tableWidget.horizontalHeader().setSectionResizeMode(3, QHeaderView.Stretch)
        self.New_tableWidget.horizontalHeader().setEnabled(False)
        self.New_tableWidget.setSelectionMode(1)
        self.New_tableWidget.setSelectionBehavior(1)
        self.New_tableWidget.setStyleSheet("selection-background-color: rgb(0, 120, 255);selection-color: rgb(255, 255, 255);")
        self.New_tableWidget.verticalHeader().hide()
        self.New_tableWidget.keyPressEvent = self.DeleteKeyPressed
        self.New_tableWidget.itemChanged.connect(self.changeIcon)
        # self.New_tableWidget.itemDoubleClicked.connect(self.doubleClickItem)
        
        # -----------  Old_tableWidget  -----------
        self.Old_tableWidget = QtWidgets.QTableWidget(self)
        self.tabWidget.addTab(self.Old_tableWidget, "SEGUNDA (0)")
        self.tabWidget.blockSignals(False)
        self.Old_tableWidget.setGeometry(QtCore.QRect(0, 135, 640, 175))
        self.Old_tableWidget.setObjectName("Old_tableWidget")
        self.Old_tableWidget.setColumnCount(4)
        self.Old_tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.Old_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Old_tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Old_tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Old_tableWidget.setHorizontalHeaderItem(3, item)

        self.Old_tableWidget.setColumnWidth(0,80)
        self.Old_tableWidget.setColumnWidth(1,120)
        self.Old_tableWidget.setColumnWidth(2,365)
        self.Old_tableWidget.setColumnWidth(3,75)
        self.Old_tableWidget.horizontalHeader().setSectionResizeMode(3, QHeaderView.Stretch)
        self.Old_tableWidget.horizontalHeader().setEnabled(False)
        self.Old_tableWidget.setSelectionMode(1)
        self.Old_tableWidget.setSelectionBehavior(1)
        self.Old_tableWidget.setStyleSheet("selection-background-color: rgb(0, 120, 255);selection-color: rgb(255, 255, 255);")
        self.Old_tableWidget.verticalHeader().hide()
        self.Old_tableWidget.keyPressEvent = self.DeleteOldKeyPressed
        self.Old_tableWidget.itemChanged.connect(self.changeOldIcon)
        # self.New_tableWidget.itemDoubleClicked.connect(self.doubleClickItem)
        
        # -----------  bottom frame configuration  -----------
        self.frame = QtWidgets.QFrame(self)
        self.frame.setGeometry(QtCore.QRect(0, 310, 640, 50))
        self.frame.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        # -----------  lblCantidad Configuration  -----------
        self.lblTitle_cant = QtWidgets.QLabel(self.frame_2)
        self.lblTitle_cant.setGeometry(QtCore.QRect(510, 32, 391, 31))
        self.lblTitle_cant.setWordWrap(False)
        self.lblTitle_cant.setObjectName("lblTitle_cant")

        # -----------  lblCantidadTitulos Configuration  -----------
        self.lblCantidadTitulos = QtWidgets.QLabel(self.frame_2)
        self.lblCantidadTitulos.setGeometry(QtCore.QRect(501, 6, 391, 31))
        self.change_color_lbltitle()
        self.lblCantidadTitulos.setWordWrap(False)
        self.lblCantidadTitulos.setObjectName("lblCantidadTitulos")

        # -----------  lvlWarning location advice  -----------
        font = QFont("Calibri")
        font.setPointSize(9)
        font.setBold(True)
        self.lblLocationAdvice = QtWidgets.QLabel("!Advertencia¡\nAl cambiar ubicación de item Antiguo, afecta tambien al Nuevo", self.frame)
        self.lblLocationAdvice.setGeometry(QtCore.QRect(470, 4, 185, 41))
        # self.change_color_lbltitle()
        self.lblLocationAdvice.setFont(font)
        self.lblLocationAdvice.setStyleSheet("QLabel{background-color: red; color: rgb(255,255,255);}")
        self.lblLocationAdvice.setWordWrap(True)
        self.lblLocationAdvice.setObjectName("lblLocationAdvice")


        # -----------  groupBoxBottom configuration  -----------
        self.gbBottom = QtWidgets.QGroupBox(self.frame)
        self.gbBottom.setGeometry(QtCore.QRect(5, 5, 225, 40))
        self.change_color_criterio() #funcion que cambia color y fuente de gbCriterio
        self.gbBottom.setObjectName("gbBottom")


        # -----------  btn aceptar configutarion  -----------
        self.btnAceptar = QtWidgets.QPushButton(self.gbBottom)
        self.btnAceptar.setGeometry(QtCore.QRect(5, 5, 100, 30))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.btnAceptar.setFont(font)
        self.btnAceptar.setStyleSheet("background-color: rgb(240, 240, 240);")
        self.btnAceptar.setObjectName("btnAceptar")
        self.btnAceptar.setAutoExclusive(True)
        self.btnAceptar.mousePressEvent = self.aceptarEvent

        # -----------  QComboBox configuration  -----------
        self.cmbOperacion = QtWidgets.QComboBox(self.gbBottom)
        self.cmbOperacion.setGeometry(QtCore.QRect(115, 5, 100, 30))
        self.cmbOperacion.setStyleSheet("background-color: rgb(170, 255, 0);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.cmbOperacion.setFont(font)
        self.cmbOperacion.setObjectName("cmbOperacion")
        #self.cmbOperacion.currentIndexChanged.connect(self.onCmbIndexChanged)


        # -----------  gbLocation configuration  -----------
        self.gbLocation = QtWidgets.QGroupBox(self.frame)
        self.gbLocation.setGeometry(QtCore.QRect(240, 5, 225, 40))
        self.gbLocation.setObjectName("gbLocation")

        # -----------  CheckBox configuration  -----------
        self.checkBox = QtWidgets.QCheckBox(self.gbLocation)
        self.checkBox.setGeometry(10, 13, 13, 13)
        self.checkBox.setStyleSheet("background-color: rgb(170, 255, 0);")
        self.checkBox.setObjectName("checkBox")
        self.checkBox.toggled.connect(self.checkBoxChangedAction)

        # -----------  lineEdit_1  -----------
        self.txtProductLocation = QtWidgets.QLineEdit(self.gbLocation)
        self.txtProductLocation.setGeometry(QtCore.QRect(35, 5, 175, 30))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setWeight(75)
        self.txtProductLocation.setFont(font)
        self.txtProductLocation.setStyleSheet("background-color: rgb(248, 248, 248);")
        self.txtProductLocation.setClearButtonEnabled(True)
        self.txtProductLocation.setPlaceholderText("Nueva Ubicación de Todo")
        self.txtProductLocation.setObjectName("txtProductLocation")

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):

        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Dialog", "Genesis - [Museo del libro]"))
        self.gbCriterio.setTitle(_translate("inoutDialog", "Cuadro de busqueda"))
        self.btnAceptar.setText(_translate("inoutDialog", "Aceptar"))
        #self.btnCancelar.setText(_translate("inoutDialog", "Cancelar"))
        self.lblCantidadTitulos.setText(_translate("inoutDialog", "Titulos: 0"))
        self.lblTitle_cant.setText(_translate("inoutDialog", "Items: 0"))
        #self.btnBuscar.setText(_translate("Dialog", "Buscar"))
        
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setWeight(85)
        font.setBold(True)

        item = self.New_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("inoutDialog", "cod"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.New_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("inoutDialog", "isbn"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.New_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("inoutDialog", "titulo"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.New_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("inoutDialog", "cant."))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))

        item = self.Old_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("inoutDialog", "cod"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.Old_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("inoutDialog", "isbn"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.Old_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("inoutDialog", "titulo"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.Old_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("inoutDialog", "cant."))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))

    def change_color_lbltitle(self):
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lblTitle_cant.setPalette(palette)
        self.lblTitle_cant.setFont(font)
        self.lblCantidadTitulos.setPalette(palette)
        self.lblCantidadTitulos.setFont(font)

    def change_color_criterio(self):
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(22, 136, 126))
        gradient.setColorAt(1.0, QtGui.QColor(56, 110, 142))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(22, 136, 126))
        gradient.setColorAt(1.0, QtGui.QColor(56, 110, 142))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(22, 136, 126))
        gradient.setColorAt(1.0, QtGui.QColor(56, 110, 142))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(22, 136, 126))
        gradient.setColorAt(1.0, QtGui.QColor(56, 110, 142))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(22, 136, 126))
        gradient.setColorAt(1.0, QtGui.QColor(56, 110, 142))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(22, 136, 126))
        gradient.setColorAt(1.0, QtGui.QColor(56, 110, 142))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(22, 136, 126))
        gradient.setColorAt(1.0, QtGui.QColor(56, 110, 142))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(22, 136, 126))
        gradient.setColorAt(1.0, QtGui.QColor(56, 110, 142))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(22, 136, 126))
        gradient.setColorAt(1.0, QtGui.QColor(56, 110, 142))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.gbCriterio.setPalette(palette)
        self.gbCriterio.setFont(font)
        self.gbBottom.setPalette(palette)
        self.gbBottom.setFont(font)



if __name__ == '__main__':
    app = QApplication(sys.argv)
    Dialog = QDialog()
    ui = Ui_inoutDialog(Dialog)
    #ui.show_window()
    sys.exit(app.exec_())