# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ware_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import unicodedata
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QFont, QBrush, QColor
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal, Qt
from gestor import WareProduct, wares_gestor, aws_s3
from objects import ware, user
from inout_dialog import Ui_inoutDialog
from uiConfigurations import *
ROOT = 'C:/Users/IROJAS/Desktop/Genesis/genesis-system-admin/'


class Ui_Dialog(QtWidgets.QDialog):
    # -----------  constructor  -----------
    def __init__(self, currentUser: user = None, currentWare: ware = None, restWare: list = None, parent=None):
        super(Ui_Dialog, self).__init__(parent)
        self.gestWareProduct = WareProduct()  ##se crea el objeto getWareProduct: Maneja la tabla ware -> WareProduct <- Product
        self.ware_gest = wares_gestor("functions") #con esto solo estoy creando un objecto con solo funciones
        self.ui_CustomInput = ui_CustomChangeLocation()
        self.ui_operationDialog = ui_OperationDialog()
        self.ui_EditDialog = ui_EditNewItemDialog()
        self.objS3 = aws_s3()
        self.real_table = []
        self.ownUsers = currentUser
        self.currWare = currentWare
        self.restWares = restWare
        self.setupUi()
        # -----------  cargar datos en tabla  -----------
        self.gestWareProduct.load_mainlist() ##para cargar la tabla principal del gestor
        self.loadData("main")

        # -----------  QDialog para ventana in/out  -----------
        # self.dialog = QDialog()
        # self.ui_dialog = Ui_inoutDialog(data_users, data_wares, self.dialog)
        self.init = 0

    # -----------  condiciones iniciales al abrir ventana  -----------
    def init_condition(self):
        # -----------  set item conditions  -----------
        self.cmbSearch.setEnabled(True)
        self.txtSearch.setEnabled(True)
        self.txtSearch.clear()
        self.lblInOut.setEnabled(False)  # label in/out
        item_all = ['cod','isbn','titulo','autor','editorial']
        self.cmbSearch.clear()
        self.cmbSearch.addItems(item_all)
        self.cmbSearch.setCurrentIndex(-1)
        # self.loadData("main")
        self.ware_table.setCurrentCell(0, 0)
        # self.actualizar_img(0)

    def sortTable(self, unsortList):
        # separar items que pertencen a libros
        result_books = list(filter(lambda x: x.product.prdCode.split("_")[0] == "GN", unsortList))
        
        # separar items que no pertencen a libros
        result_nobooks = list(filter(lambda x: x.product.prdCode.split("_")[0] != "GN", unsortList))

        # # ordenar items de libros por codigo de menor a mayor
        # result_books.sort(key=lambda z: int(z.objBook.cod.split("_")[1]))
        return result_books +  result_nobooks

    ## Funcion que permite la apertura de ventana ware desde el main_
    def showWindow(self):
        self.show()

    def upload_quantity(self):
        if self.ui_dialog.button_condition == "aceptar" and self.ui_dialog.criterio == " + ":
            for j in self.ui_dialog.main_table:
                for i in self.gestWareProduct.ware_list:
                    if i.book.cod == j["cod"]:
                        i.almacen_quantity[1] += j["cantidad"]

        elif self.ui_dialog.button_condition == "aceptar" and self.ui_dialog.criterio == " - ":
            for j in self.ui_dialog.main_table:
                for i in self.gestWareProduct.ware_list:
                    if i.book.cod == j["cod"]:
                        i.almacen_quantity[1] -= j["cantidad"]
        self.loadData()

    # -----------  close event configuration  -----------
    def keyPressEvent(self, event):
        if not event.key() == QtCore.Qt.Key_Escape:
            super(Ui_Dialog, self).keyPressEvent(event)

    # -----------  close event configuration  -----------
    def closeEvent(self, event):
        self.accept()
        event.accept()
        # if self.ui_dialog.isVisible():
        #     ret = QMessageBox.information(self, 'Aviso', "Debe cerrar la ventana entrada/salida")
        #     event.ignore()
        # else:
        #     self.accept()
        #     event.accept()

    def updateRealTable(self): #se actualiza la tabla actual con los datos del back
        for i in self.real_table:
            for j in self.gestWareProduct.ware_list:
                if i.objBook.cod == j.objBook.cod:
                    i.almacen_data["cant_" + self.currWare[0]] = j.almacen_data["cant_"+ self.currWare[0]]
        self.loadData()

    # -----------  carga tabla qtableWidget  -----------
    def loadData(self, condition = "search"):
        backgrounditem = lambda x, z: not(z) and x.setBackground(QtGui.QColor(200, 200, 200, 255))
        flag = QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEnabled
        if condition == "main":
            # sortTable: ordena la tabla que llega de gestor por tipo de producto y nivel de codigo
            self.real_table = self.sortTable(self.gestWareProduct.innerWareList.copy())

        # -----------  esta parte para llenar la tabla  -----------
        row = 0
        self.ware_table.setRowCount(len(self.real_table))
        for ware_li in self.real_table:
            # isExistActive: primero comprueba que el item exista en el almacen, luego recien verifica que el item este habilitado en el almacen
            isExistActive = (self.currWare.cod in ware_li.wareData) and ware_li.wareData[self.currWare.cod]["isEnabled"]

            item = QtWidgets.QTableWidgetItem(ware_li.product.prdCode)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 0, item)
            # Self.currWare.auth["locTooltip"]: este permiso es propio del current ware
            if isExistActive and self.currWare.auth["locTooltip"]:
                self.ware_table.item(row, 0).setToolTip(str(ware_li.wareData[self.currWare.cod]["loc"]))

            item = QtWidgets.QTableWidgetItem(ware_li.product.isbn)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 1, item)


            item = QtWidgets.QTableWidgetItem(ware_li.product.title)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 2, item)

            item = QtWidgets.QTableWidgetItem(ware_li.product.autor)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 3, item)

            item = QtWidgets.QTableWidgetItem(ware_li.product.publisher)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 4, item)

            text = str(ware_li.wareData[self.currWare.cod]["qtyNew"]) if (isExistActive) else "-" 
            item = QtWidgets.QTableWidgetItem(text)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 5, item)

            if self.cmbWares.currentIndex() != -1:
                currTextCmbWare = self.cmbWares.currentText()
                isWareEnEx = ((currTextCmbWare in ware_li.wareData) and ware_li.wareData[currTextCmbWare]["isEnabled"])
                text = str(ware_li.wareData[currTextCmbWare]["qtyNew"]) if isWareEnEx else "-" 
                item = QtWidgets.QTableWidgetItem(text)
                backgrounditem(item, isWareEnEx)
                item.setFlags(flag)
                self.ware_table.setItem(row, 6, item)
            row += 1

    def txtBusChanged(self):
        if str(self.cmbSearch.currentText()) == "" and self.txtSearch.text() != "":
            ret = QMessageBox.information(self, 'Aviso', "Ingresar criterio de busqueda")

        elif str(self.cmbSearch.currentText()) == "" and self.txtSearch.text() == "":
            # self.loadData("main"), para copiar todos los items del back al frond
            self.loadData("main")
            self.ware_table.setCurrentCell(0, 0)
            self.actualizar_img(0)

        elif self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() == "":
            self.loadData("main")
            self.ware_table.setCurrentCell(0, 0)
            self.actualizar_img(0)

        else:
            if self.cmbSearch.currentText() == "cod":
                if self.buscar("cod", self.txtSearch.text()) > 0:
                    self.loadData("search")
                    self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

            elif self.cmbSearch.currentText() == "isbn":
                if self.buscar("isbn", self.txtSearch.text()) > 0:
                    self.loadData("search")
                    self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(0)
                    #self.txtSearch.setText("")
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)
                    #ret = QMessageBox.information(self, 'Aviso', "No existe coincidencias")

            elif self.cmbSearch.currentText() == "titulo":
                if self.buscar("titulo", self.txtSearch.text()) > 0:
                    self.loadData("search")
                    self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

            elif self.cmbSearch.currentText() == "autor":
                if self.buscar("autor", self.txtSearch.text()) > 0:

                    self.loadData("search")
                    self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

            elif self.cmbSearch.currentText() == "editorial":
                if self.buscar("editorial", self.txtSearch.text()) > 0:
                    self.loadData("search")
                    self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

    def CmbIndexChanged(self):
        if self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() != "":
            self.txtBusChanged()

    def actualizar_img(self, tmp: int = None):
        #el paramatro tmp es el index de la fila en la tabla
        if (tmp + 1 <= len(self.real_table)) and (tmp >= 0):
            pathfile = self.objS3.directions["product"](self.ware_table.item(tmp,0).text().lower())
            if self.objS3.existsLocalFile(pathfile):
                self.lblImg.setPixmap(QtGui.QPixmap(pathfile))
                self.lblImg.setScaledContents(True)
            else:
                self.lblImg.setPixmap(QtGui.QPixmap())
                self.lblImg.setScaledContents(True)
            
            if (self.currWare.cod in self.real_table[tmp].wareData) and (self.real_table[tmp].wareData[self.currWare.cod]["isEnabled"]):
                self.lblValuePrice.setFont(getFontxPV())
                self.lblValuePrice.move(229,24)
                self.lblValuePrice.setText("S/." + str(self.real_table[tmp].wareData[self.currWare.cod]["pvNew"]))
            else:
                self.lblValuePrice.setFont(getFontxUnAvailable())
                self.lblValuePrice.move(229, 19)
                self.lblValuePrice.setText("No\nDisponible")

            counter = 0
            for key in self.real_table[tmp].wareData:
                if self.real_table[tmp].wareData[key]["isEnabled"]:
                    counter += int(self.real_table[tmp].wareData[key]["qtyOld"])

            if counter >            

    # -----------  double click event para cambiar ubicacion  -----------
    def tableWidget_doubleClicked(self):
        row = self.ware_table.currentIndex().row()
        column_ = self.ware_table.currentIndex().column()
        
        # no permite el cambio de ubicacion si el item esta inactivo
        itemSelected = list(filter(lambda x: (x.objBook.cod == self.ware_table.item(row,0).text()), self.real_table))

        if self.currWare[2][1] == True and column_ == 0 and itemSelected[0].objBook.active:
            
                # validation: Cancel, Ok, Desactivar
                validation = self.openOperationDialog(self.ware_table.item(row,column_).text(), self.ware_table.item(row,column_+2).text())

                if (validation == "Desactivar"):
                    if self.gestWareProduct.isZeroQuantity(self.ware_table.item(row,0).text()):
                        ret = QMessageBox.question(self, 'Alerta',"..::PRODUCTO ACTIVO::..\n¿Desea desactivar el producto?",QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
                        succes = (ret == QMessageBox.Yes) and (self.userValidation() and self.gestWareProduct.activateItem(self.ware_table.item(row,0).text(), False))
                        if succes:
                            QMessageBox.information(self, 'Mensaje', "Producto desactivado", QMessageBox.Ok, QMessageBox.Ok)
                            self.txtBusChanged()
                    else:
                        QMessageBox.information(self, 'Mensaje', "El producto se encuentra en stock", QMessageBox.Ok, QMessageBox.Ok)

                if (validation == "Ubicacion"):
                    ubicValidation, text = self.openUbicDialog(self.ware_table.item(row,column_).text(), self.ware_table.item(row,column_+2).text())

                    if (ubicValidation == "Ok"):
                        try:
                            if text.split(" ")[0].upper() == "MUEBLE" and text.split(" ")[2].upper() == "FILA":
                                if self.userValidation() and self.gestWareProduct.changeItemLocation(self.ware_table.item(row,0).text(), text, self.currWare[0]):
                                    QMessageBox.question(self, 'Alerta',"Operación exitosa", QMessageBox.Ok, QMessageBox.Ok)
                                    self.txtBusChanged()

                            elif len(text) > 0:
                                ret = QMessageBox.question(self, 'Alerta',
                                                        "Debe seguir el siguiente formato:\nMUEBLE (Letra), FILA (Numero)",
                                                        QMessageBox.Ok, QMessageBox.Ok)
                            elif (ubicValidation == "Ok") and len(text) == 0:
                                ret = QMessageBox.question(self, 'Alerta',
                                                        "Operación sin efecto",
                                                        QMessageBox.Ok, QMessageBox.Ok)
                        except:
                            ret = QMessageBox.question(self, 'Alerta',"Debe seguir el siguiente formato:\nMUEBLE (Letra), FILA (Numero)",QMessageBox.Ok, QMessageBox.Ok)
                
                if (validation == "Editar"):
                    data = {"cod": self.ware_table.item(row,0).text(),
                            "isbn": self.ware_table.item(row,1).text(),
                            "title": self.ware_table.item(row,2).text(),
                            "autor": self.ware_table.item(row,3).text(),
                            "publisher": self.ware_table.item(row,4).text(),
                            "price": str(self.real_table[row].objBook.Pv)}
                    isUpdate, text = self.openEditItemDialog(data)
                    if isUpdate and self.userValidation() and self.gestWareProduct.updateInnerItem(data["cod"], text) and self.ware_gest.updateDataItem(data["cod"], text):
                        QMessageBox.question(self, 'Alerta',"Operación exitosa", QMessageBox.Ok, QMessageBox.Ok)
                        self.txtBusChanged()

        elif self.currWare[2][1] == True and column_ == 0 and not(itemSelected[0].objBook.active):
            ret = QMessageBox.question(self, 'Alerta',"..::PRODUCTO DESACTIVADO::..\n¿Desea activar el producto?",QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            succes = (ret == QMessageBox.Yes) and (self.userValidation() and self.gestWareProduct.activateItem(self.ware_table.item(row,0).text(), True))
            if succes:
                QMessageBox.information(self, 'Mensaje', "Producto activado", QMessageBox.Ok, QMessageBox.Ok)
                self.txtBusChanged()
            ##aqui falta actualizar la tabla del frond luego de actualizar la tabla del back
            
    # -----------  user validation  -----------
    def userValidation(self):
        # ok: True or False
        # text: content
        text, ok = QInputDialog.getText(self, 'Validar usuario', 'Ingrese contraseña', QtWidgets.QLineEdit.Password)
        if(ok):
            currentUser = list(filter(lambda x: x.user == self.ownUsers[0], self.ownUsers[1]))[0]
            if currentUser.passwd == text:
                return True
            else:
                QMessageBox.question(self, 'Alerta', "Contraseña incorrecta", QMessageBox.Ok, QMessageBox.Ok)
                return False
        else:
            return False

    # -----------  load_table para cargar tabla de DB, cuando se presiona icono de nube  -----------
    def load_table(self, event = None):
        self.gestWareProduct.load_mainlist(self.currWare)
        self.loadData("main")
        if self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() != "":
            self.txtBusChanged()
        elif self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() == "":
            self.ware_table.setCurrentCell(0, 0)
            self.actualizar_img(0)

    def change_state(self, state): #cambia el estado de self. state y color de los frames
        if state == "ventas":
            self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
            self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        elif state == "in/out":
            self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")
            self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")

    def inout_operation(self,event):
        self.change_state("in/out")
        
        # separar solo items activos y enviar a in/out form
        result_books = list(filter(lambda x: x.objBook.active, self.gestWareProduct.ware_list.copy()))
        self.ui_dialog.mainList = result_books.copy()

        self.ui_dialog.init_condition()
        if self.ui_dialog.exec_() == QtWidgets.QDialog.Accepted:
            self.change_state("ventas")
            if self.ui_dialog.return_val[2]:
                self.gestWareProduct.update_backtablequantity(self.ui_dialog.return_val[0], self.ui_dialog.return_val[1], self.currWare[0])
                self.updateRealTable()
        # self.ui_dialog.show_window()

    def onCurrentIndexChanged(self):
        if self.cmbWares.currentIndex() == -1:
            self.ware_table.horizontalHeaderItem(6).setText("")
        elif self.cmbWares.currentIndex() != -1:
            self.ware_table.horizontalHeaderItem(6).setText("[" + self.cmbWares.currentText() + "]")
            #self.seColumn = str(self.cmbWares.currentText())
            self.loadData()

    def resizeEvent(self, event):
        if self.init > 0:
            self.frame_2.setGeometry(QtCore.QRect(0, self.frameGeometry().height() - 188 - 40, 1024, 188))
        self.ware_table.setGeometry(QtCore.QRect(0, 130, 1024, self.frameGeometry().height() - (188 + 30 + 100 + 40)))
        self.init += 1

    # -----------  funcion buscar  -----------
    def buscar(self, criterio, patron):
        self.real_table.clear()
        if criterio == "cod":
            for i in self.gestWareProduct.ware_list:
                if i.objBook.cod == str.upper(patron):
                    self.real_table.append(i)
            return len(self.real_table)
        elif criterio == "isbn":
            for i in self.gestWareProduct.ware_list:
                if(i.objBook.isbn.find(str.upper(patron)) >= 0):
                    self.real_table.append(i)
            return len(self.real_table)

        elif criterio == "titulo":
            for i in self.gestWareProduct.ware_list:
                if(i.objBook.name.find(str.upper(patron)) >= 0):
                    self.real_table.append(i)
            return len(self.real_table)
        elif criterio == "autor":
            for i in self.gestWareProduct.ware_list:
                if(i.objBook.autor.find(str.upper(patron)) >= 0):
                    self.real_table.append(i)
            return len(self.real_table)
        elif criterio == "editorial":
            for i in self.gestWareProduct.ware_list:
                if (i.objBook.editorial.find(str.upper(patron)) >= 0):
                    self.real_table.append(i)
            return len(self.real_table)
        return 0

    # -----------  obtiene lista de wares sobrantes  -----------
    def getRestWare(self) -> list:
        try:
            return list(map(lambda y: y.cod ,list(filter(lambda x: True if (x.auth["enabled"] and not(x.auth["isVirtual"])) else False, self.restWares))))
        except:
            return []
    
    # -----------  keyPressed for QtableWidget  -----------
    def KeyPressed(self,event):
        if self.ware_table.selectedIndexes() != []:
            temp = self.ware_table.currentRow()
            if event.key() == QtCore.Qt.Key_Up:
                temp -= 1
                self.actualizar_img(temp)
            elif event.key() == QtCore.Qt.Key_Down:
                temp += 1
                self.actualizar_img(temp)
        return QtWidgets.QTableWidget.keyPressEvent(self.ware_table, event)
    
    # -----------  eventFilter para MouseEvent  -----------
    def eventFilter(self, source, event):
        if self.ware_table.selectedIndexes() != []:
            if event.type() == QtCore.QEvent.MouseButtonRelease:
                if event.button() == QtCore.Qt.LeftButton:
                    temp = self.ware_table.currentRow()
                    self.actualizar_img(temp)
        return QtCore.QObject.event(source, event)
    
    def openUbicDialog(self, code: str = "", title: str = ""):
        self.ui_CustomInput.cleanInputText()
        self.ui_CustomInput.setItemData(code, title)
        if self.ui_CustomInput.exec_() == QDialog.Accepted:
            return self.ui_CustomInput.returnedVal
        
    def openOperationDialog(self, code: str = "", title: str = ""):
        self.ui_operationDialog.setItemData(code, title)
        if self.ui_operationDialog.exec_() == QDialog.Accepted:
            return self.ui_operationDialog.returnedVal
    
    def openEditItemDialog(self, data: dict = None):
        if bool(data):
            self.ui_EditDialog.setDataFields(data)
            self.ui_EditDialog.cleanInputFields()
            if self.ui_EditDialog.exec_() == QDialog.Accepted:
                return self.ui_EditDialog.returnedVal
            return (False, None)
        else:
            return (False, None)
    
    def loadImage(self):
        row = self.ware_table.currentIndex().row()
        if row >= 0: 
            validator, pathfile = self.objS3.get_ProductImage(self.ware_table.item(row,0).text().lower())
            if validator:
                self.lblImg.setPixmap(QtGui.QPixmap(pathfile))
                self.lblImg.setScaledContents(True)
            else:
                self.lblImg.setPixmap(QtGui.QPixmap())
                QMessageBox.information(self, 'Mensaje', "Error para cargar la imagen", QMessageBox.Ok, QMessageBox.Ok)

    def createNewItem(self, event = None):
        isAllowed, data = self.ware_gest.getNextCodDB()
        if isAllowed:
            ui_NewItemDialog = ui_EditNewItemDialog(True)
            ui_NewItemDialog.cleanInputFields()
            ui_NewItemDialog.setDataFields(data)
            if ui_NewItemDialog.exec_() == QDialog.Accepted:
                validator, data = ui_NewItemDialog.returnedVal
                if validator:
                    if self.userValidation():
                        if(self.ware_gest.insertNewItemDB(data, self.currWare[0]) and self.gestWareProduct.insertInnerNewItem(data, self.currWare)):
                            QMessageBox.information(self, 'Mensaje', "¡Operacion Exitosa!", QMessageBox.Ok, QMessageBox.Ok)
                            self.txtBusChanged()
                        else:
                            QMessageBox.information(self, 'Mensaje', "Error durante operación", QMessageBox.Ok, QMessageBox.Ok)

    def setupUi(self):
        self.setObjectName("Dialog")
        self.resize(1024, 668)
        self.setFixedSize(1024, 668)
        self.setMinimumHeight(400)
        self.top_frame = QtWidgets.QFrame(self)
        self.top_frame.setGeometry(QtCore.QRect(0, 0, 1024, 100))
        self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        self.top_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_frame.setObjectName("top_frame")

        # -----------  search box configuration  -----------
        self.search_box = QtWidgets.QGroupBox(self.top_frame)
        self.search_box.setGeometry(QtCore.QRect(20, 10, 492, 81))
        self.search_box.setPalette(getPalette())
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.search_box.setFont(font)
        self.search_box.setObjectName("search_box")

        # -----------  txtSearch configuration  -----------
        self.txtSearch = QtWidgets.QLineEdit(self.search_box)
        self.txtSearch.setGeometry(QtCore.QRect(130, 35, 351, 31))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.txtSearch.setFont(font)
        self.txtSearch.setStyleSheet("background-color: rgb(248, 248, 248);")
        self.txtSearch.setClearButtonEnabled(True)
        self.txtSearch.setObjectName("txtSearch")
        self.txtSearch.textChanged.connect(self.txtBusChanged)

        # -----------  cmbSearch Configuration  -----------
        self.cmbSearch = QtWidgets.QComboBox(self.search_box)
        #self.cmbSearch.setGeometry(QtCore.QRect(20, 35, 101, 31))lblLoadTable
        self.cmbSearch.setGeometry(20, 35, 101, 31)
        self.cmbSearch.setStyleSheet("background-color: rgb(170, 255, 0);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.cmbSearch.setFont(font) 
        self.cmbSearch.setObjectName("cmbSearch")
        self.cmbSearch.currentIndexChanged.connect(self.CmbIndexChanged)

        # -----------  label in/out configuration  -----------
        self.lblInOut = QtWidgets.QLabel(self.top_frame)
        self.lblInOut.setGeometry(QtCore.QRect(675, 20, 98, 72))
        self.lblInOut.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblInOut.setText("")
        self.lblInOut.setPixmap(QtGui.QPixmap(ROOT + "imgs/in_out.png"))
        self.lblInOut.setScaledContents(True)
        self.lblInOut.setObjectName("lblInOut")
        self.lblInOut.mousePressEvent = self.inout_operation
        self.lblInOut.setCursor(Qt.PointingHandCursor)

        # -----------  label New Item configuration  -----------
        self.lblNewItem = QtWidgets.QLabel(self.top_frame)
        self.lblNewItem.setGeometry(QtCore.QRect(795, 23, 78, 68))
        self.lblNewItem.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblNewItem.setText("")
        self.lblNewItem.setPixmap(QtGui.QPixmap(ROOT + "imgs/new_product.png"))
        self.lblNewItem.setScaledContents(True)
        self.lblNewItem.setObjectName("lblNewItem")
        self.lblNewItem.mousePressEvent = self.createNewItem
        self.lblNewItem.setCursor(Qt.PointingHandCursor)

        # -----------  label load table configuration  -----------
        self.lblLoadTable = QtWidgets.QLabel(self.top_frame)
        self.lblLoadTable.setGeometry(QtCore.QRect(890, 23, 101, 67))
        self.lblLoadTable.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblLoadTable.setText("")
        self.lblLoadTable.setPixmap(QtGui.QPixmap(ROOT + "imgs/load_.png"))
        self.lblLoadTable.setScaledContents(True)
        self.lblLoadTable.setObjectName("lblLoadTable")
        self.lblLoadTable.mousePressEvent = self.load_table
        self.lblLoadTable.setCursor(Qt.PointingHandCursor)


        # -----------  ware_table configuration  -----------
        self.ware_table = QtWidgets.QTableWidget(self)
        self.ware_table.setEditTriggers(QtWidgets.QTreeView.NoEditTriggers) 
        self.ware_table.setGeometry(QtCore.QRect(0, 130, 1024, 450))
        self.ware_table.setMinimumHeight(100) ## esto se agrego
        self.ware_table.setObjectName("ware_table")
        self.ware_table.setColumnCount(7)
        item = QtWidgets.QTableWidgetItem()

        self.ware_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(6, item)

        self.ware_table.setColumnWidth(0,80)
        self.ware_table.setColumnWidth(1,120)
        self.ware_table.setColumnWidth(2,360)
        self.ware_table.setColumnWidth(3,167)
        self.ware_table.setColumnWidth(4,164)
        #self.ware_table.setColumnWidth(5,47)
        #self.ware_table.setColumnWidth(6,58)
        self.ware_table.horizontalHeader().setEnabled(False)
        self.ware_table.setSelectionBehavior(1)
        self.ware_table.setSelectionMode(1)
        self.ware_table.setStyleSheet("selection-background-color: rgb(0, 120, 255);selection-color: rgb(255, 255, 255);")
        self.ware_table.verticalHeader().hide()
        self.ware_table.viewport().installEventFilter(self)
        self.ware_table.keyPressEvent = self.KeyPressed
        self.ware_table.doubleClicked.connect(self.tableWidget_doubleClicked)
       
        # -----------  frame configuration  -----------
        self.frame = QtWidgets.QFrame(self)
        self.frame.setGeometry(QtCore.QRect(0, 100, 1024, 30))
        self.frame.setStyleSheet("background-color: rgb(57, 57, 57);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        # -----------  cmbSearch wares  -----------
        self.cmbWares = QtWidgets.QComboBox(self.frame)
        #self.cmbSearch.setGeometry(QtCore.QRect(20, 35, 101, 31))
        self.cmbWares.setGeometry(self.frame.width() - 68, 0, 68, 30)
        self.cmbWares.setStyleSheet("background-color: rgb(170, 255, 0);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.cmbWares.setFont(font)
        self.cmbWares.setObjectName("cmWares")
        self.cmbWares.currentIndexChanged.connect(self.onCurrentIndexChanged)
        self.cmbWares.clear()
        #Dentro de esta parte se carga los datos de cmbwares
        self.cmbWares.addItems(self.getRestWare())

        # -----------  frame configuration  -----------
        self.frame_2 = QtWidgets.QFrame(self)
        width_ = self.frameGeometry().width()
        height__ = self.frameGeometry().height()
        self.frame_2.setGeometry(QtCore.QRect(0, height__ - 188, 1024, 188))
        self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        
        # ----------- frame for image and price information  -----------
        self.boxPV = QtWidgets.QGroupBox(self.frame_2)
        self.boxPV.setGeometry(QtCore.QRect(30, 10, 370, 171))
        self.boxPV.setPalette(getPalette())
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.boxPV.setFont(font)
        self.boxPV.setObjectName("boxPV")

        # -----------  lblPVP configuration  -----------
        self.lblPVP = QtWidgets.QLabel("PVP:",self.boxPV)
        self.lblPVP.setGeometry(QtCore.QRect(160, 30, 62, 41))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.lblPVP.setFont(font)
        self.lblPVP.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblPVP.setObjectName("lblPVP")

        # -----------  lblValuePrice configuration  -----------
        self.lblValuePrice = QtWidgets.QLabel(self.boxPV)
        self.lblValuePrice.setGeometry(QtCore.QRect(229, 26, 151, 50))
        self.lblValuePrice.setPalette(getPricePalette())
        self.lblValuePrice.setFont(getFontxPV())
        self.lblValuePrice.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblValuePrice.setObjectName("lblValuePrice")

        # -----------  lblPVP 2DA configuration  -----------
        self.lblPVP2 = QtWidgets.QLabel("PVP(2):",self.boxPV)
        self.lblPVP2.setGeometry(QtCore.QRect(160, 70, 65, 41))
        self.lblPVP2.setFont(getFontxSecond())
        self.lblPVP2.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblPVP2.setObjectName("lblPVP2")

        # -----------  lblValuePVP2 configuration  -----------
        self.lblValuePVP2 = QtWidgets.QLabel(self.boxPV)
        self.lblValuePVP2.setGeometry(QtCore.QRect(229, 65, 151, 50))
        self.lblValuePVP2.setPalette(getPricePalette())
        self.lblValuePVP2.setFont(getFontxSecond())
        self.lblValuePVP2.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblValuePVP2.setObjectName("lblValuePVP2")

        # -----------  lblImg configuration  -----------
        self.lblImg = QtWidgets.QLabel(self.boxPV)
        self.lblImg.setGeometry(QtCore.QRect(10, 30, 131, 131))
        self.lblImg.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblImg.setObjectName("lblImg")
        
        # -----------  boton Editar Precio Venta  -----------
        self.btnLoadImage = QtWidgets.QPushButton(self.boxPV)
        self.btnLoadImage.setGeometry(QtCore.QRect(160, 117, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btnLoadImage.setFont(font)
        self.btnLoadImage.setStyleSheet("background-color: rgb(240, 240, 240);")
        self.btnLoadImage.setObjectName("btnLoadImage")
        self.btnLoadImage.clicked.connect(self.loadImage)
        self.btnLoadImage.setCursor(Qt.PointingHandCursor)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)


    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Dialog", "Genesis - [Museo del libro]"))
        self.search_box.setTitle(_translate("Dialog", "Cuadro de busqueda"))
        self.cmbSearch.setItemText(1, _translate("Dialog", "cod"))
        self.cmbSearch.setItemText(2, _translate("Dialog", "isbn"))
        self.cmbSearch.setItemText(3, _translate("Dialog", "titulo"))
        self.cmbSearch.setItemText(4, _translate("Dialog", "autor"))
        self.cmbSearch.setItemText(5, _translate("Dialog", "editorial"))

        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setWeight(85)
        font.setBold(True)

        item = self.ware_table.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "cod"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "isbn"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "titulo"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "autor"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(4)
        item.setText(_translate("Dialog", "editorial"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(5)
        item.setText(_translate("Dialog", "[" + self.currWare.cod + "]"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(6)

        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))

        #self.ware_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch) # metodo que setea ancho de columnas por igual
        # self.ware_table.horizontalHeader().setStretchLastSection(True) # metodo que setea que extienda solo la ultiam columna
        self.ware_table.horizontalHeader().setSectionResizeMode(5,QHeaderView.Stretch)
        self.ware_table.horizontalHeader().setSectionResizeMode(6, QHeaderView.Stretch)
        self.boxPV.setTitle(_translate("Dialog", "Cuadro de información"))
        self.btnLoadImage.setText(_translate("Dialog", "Cargar imagen"))


class ui_EditNewItemDialog(QtWidgets.QDialog):
    # Type: False: Edit , True: New
    def __init__(self, method: bool = False, parent=None):
        super(ui_EditNewItemDialog, self).__init__(parent)
        self.method = method
        self.code = ""
        self.title = ""
        self.returnedVal = (False, None)
        self.setupUi()
        
    def returnValues(self, btnConfirmation: bool = False):
        # se cambia los keys de los diccionarios segun titulos de base de datos
        tmp_dict = {}
        self.returnedVal = (False, None)

        if btnConfirmation and not(self.method):
            if self.innerEditData["isbn"] != self.txtISBN.text(): tmp_dict["isbn"] = self.txtISBN.text().strip()
            if self.innerEditData["title"] != self.txtTitle.text() and bool(len(self.txtTitle.text().strip())):
                tmp_dict["name"] = self.txtTitle.text().strip()
            if self.innerEditData["autor"] != self.txtAutor.text() and bool(len(self.txtAutor.text().strip())):
                tmp_dict["autor"] = self.txtAutor.text().strip()
            if self.innerEditData["publisher"] != self.txtPublisher.text() and bool(len(self.txtPublisher.text().strip())):
                tmp_dict["editorial"] = self.txtPublisher.text().strip()
            if self.innerEditData["price"] != self.txtPrice.text() and bool(len(self.txtPrice.text().strip())):
                tmp_dict["pv"] = self.txtPrice.text().strip() 
            
            if bool(len(tmp_dict)):
                self.returnedVal = (True, tmp_dict)
            else:
                QMessageBox.information(self, 'Mensaje', "No se efectuaron cambios o campos vacios.\n>Presione Ok, luego Cancelar", QMessageBox.Ok, QMessageBox.Ok)
                self.setDataFields()
                self.returnedVal = (False, None)
        
        elif btnConfirmation and self.method:
            tmp_dict["cod"] = self.txtId.text().strip()
            if bool(len(self.txtTitle.text().strip())):
                tmp_dict["name"] = self.txtTitle.text().strip()
            if bool(len(self.txtAutor.text().strip())):
                tmp_dict["autor"] = self.txtAutor.text().strip()
            if bool(len(self.txtPublisher.text().strip())):
                tmp_dict["editorial"] = self.txtPublisher.text().strip()
            if bool(len(self.txtPrice.text().strip())):
                tmp_dict["pv"] = self.txtPrice.text().strip()

            if len(tmp_dict) == 5:
                if bool(len(self.txtISBN.text().strip())): tmp_dict["isbn"] = self.txtISBN.text().strip()
                if bool(self.spinInitStock.value()): tmp_dict["stock"] = self.spinInitStock.text().strip()
                self.returnedVal = (True, tmp_dict)                     
            else:
                QMessageBox.information(self, 'Mensaje', "Llenar los campos obligatorios (*)", QMessageBox.Ok, QMessageBox.Ok)
                self.returnedVal = (False, None)

        else:
            self.returnedVal = (False, None)   
        
        self.submitclose() if self.returnedVal[0] else False

    def cleanInputFields(self):
        self.txtISBN.setPalette(self.darkPalette)
        self.txtTitle.setPalette(self.darkPalette)
        self.txtAutor.setPalette(self.darkPalette)
        self.txtPublisher.setPalette(self.darkPalette)
        self.txtPrice.setPalette(self.darkPalette)

    def closeEvent(self, event):
        self.returnValues(False)

    def setDataFields(self, data = None):
        if bool(data): self.prevData = data
        if bool(self.prevData) and not(self.method):
            self.innerEditData = self.prevData.copy()
            self.txtId.setText(self.innerEditData["cod"])
            self.txtISBN.setText(self.innerEditData["isbn"])
            self.txtTitle.setText(self.innerEditData["title"])
            self.txtAutor.setText(self.innerEditData["autor"])
            self.txtPublisher.setText(self.innerEditData["publisher"])
            self.txtPrice.setText(self.innerEditData["price"])
        elif bool(self.prevData) and self.method:
            self.txtId.setText(data)
    
    def submitclose(self):
        self.accept()
    
    def deactivateLineEdit(self, widget: str = ""):
        if bool(widget):
            if widget == "ISBN":
                self.txtISBN.setReadOnly(False)
                self.txtISBN.setPalette(self.defaultPalette)
                self.txtTitle.setPalette(self.darkPalette)
                self.txtAutor.setPalette(self.darkPalette)
                self.txtPublisher.setPalette(self.darkPalette)
                self.txtPrice.setPalette(self.darkPalette)
                self.spinInitStock.setPalette(self.darkPalette)
                self.txtTitle.setReadOnly(True)
                self.txtAutor.setReadOnly(True)
                self.txtPublisher.setReadOnly(True)
                self.txtPrice.setReadOnly(True)
                self.spinInitStock.setReadOnly(True)

            elif widget == "Title":
                self.txtTitle.setReadOnly(False)
                self.txtTitle.setPalette(self.defaultPalette)
                self.txtISBN.setPalette(self.darkPalette)
                self.txtAutor.setPalette(self.darkPalette)
                self.txtPublisher.setPalette(self.darkPalette)
                self.txtPrice.setPalette(self.darkPalette)
                self.spinInitStock.setPalette(self.darkPalette)
                self.txtISBN.setReadOnly(True)
                self.txtAutor.setReadOnly(True)
                self.txtPublisher.setReadOnly(True)
                self.txtPrice.setReadOnly(True)
                self.spinInitStock.setReadOnly(True)

            elif widget == "Autor":
                self.txtAutor.setReadOnly(False)
                self.txtAutor.setPalette(self.defaultPalette)
                self.txtISBN.setPalette(self.darkPalette)
                self.txtTitle.setPalette(self.darkPalette)
                self.txtPublisher.setPalette(self.darkPalette)
                self.txtPrice.setPalette(self.darkPalette)
                self.spinInitStock.setPalette(self.darkPalette)
                self.txtISBN.setReadOnly(True)
                self.txtTitle.setReadOnly(True)
                self.txtPrice.setReadOnly(True)
                self.txtPublisher.setReadOnly(True)
                self.spinInitStock.setReadOnly(True)

            elif widget == "Publisher":
                self.txtPublisher.setReadOnly(False)
                self.txtPublisher.setPalette(self.defaultPalette)
                self.txtISBN.setPalette(self.darkPalette)
                self.txtTitle.setPalette(self.darkPalette)
                self.txtAutor.setPalette(self.darkPalette)
                self.txtPrice.setPalette(self.darkPalette)
                self.spinInitStock.setPalette(self.darkPalette)
                self.txtISBN.setReadOnly(True)
                self.txtTitle.setReadOnly(True)
                self.txtAutor.setReadOnly(True)
                self.txtPrice.setReadOnly(True)
                self.spinInitStock.setReadOnly(True)

            elif widget == "Stock":
                self.spinInitStock.setReadOnly(False)
                self.spinInitStock.setPalette(self.defaultPalette)
                self.txtPrice.setPalette(self.darkPalette)
                self.txtISBN.setPalette(self.darkPalette)
                self.txtTitle.setPalette(self.darkPalette)
                self.txtAutor.setPalette(self.darkPalette)
                self.txtPublisher.setPalette(self.darkPalette)
                self.txtPrice.setReadOnly(True)
                self.txtISBN.setReadOnly(True)
                self.txtTitle.setReadOnly(True)
                self.txtAutor.setReadOnly(True)
                self.txtPublisher.setReadOnly(True)

            elif widget == "Price":
                self.txtPrice.setReadOnly(False)
                self.txtPrice.setPalette(self.defaultPalette)
                self.txtISBN.setPalette(self.darkPalette)
                self.txtTitle.setPalette(self.darkPalette)
                self.txtAutor.setPalette(self.darkPalette)
                self.txtPublisher.setPalette(self.darkPalette)
                self.spinInitStock.setPalette(self.darkPalette)
                self.txtISBN.setReadOnly(True)
                self.txtTitle.setReadOnly(True)
                self.txtAutor.setReadOnly(True)
                self.txtPublisher.setReadOnly(True)
                self.spinInitStock.setReadOnly(True)

    def setupUi(self):
        self.resize(340, 220)
        self.setFixedSize(340, 220)
        self.setObjectName("ui_EditNewItemDialog")
        self.setWindowTitle("Editar producto") if not(self.method) else self.setWindowTitle("Registrar nuevo producto")

        warning_text = ">¡No ingresar tildes ni caracteres especiales (,', \", ´,)!"

        self.lblWarning = QLabel(warning_text,self)
        self.lblWarning.adjustSize()
        self.lblWarning.move(55, 15) if not(self.method) else self.lblWarning.move(60, 5)
        self.lblWarning.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblWarning.setStyleSheet("background-color: red")

        
        self.lblWarning = QLabel(">(*): Campos obligatorios",self) if self.method else False
        if bool(self.lblWarning):
            self.lblWarning.adjustSize()
            self.lblWarning.move(60, 20)
            self.lblWarning.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
            self.lblWarning.setStyleSheet("background-color: red")
        
        self.lblId = QLabel("CÓDIGO:",self) if not(self.method) else QLabel("CÓDIGO(*):",self)
        self.lblId.adjustSize()
        self.lblId.move(43, 40) if not(self.method) else self.lblId.move(33, 40)
        self.lblId.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblId.setStyleSheet("background-color: lightgreen")
        self.txtId = MyLineEdit(self)
        self.txtId.setFixedHeight(18)
        self.txtId.setFixedWidth(230)
        self.txtId.move(95,37)
        self.txtId.setEnabled(False)
        self.defaultPalette = self.txtId.palette()
        
        self.color = QColor(230,230,230)
        self.lblISBN = QLabel("ISBN:",self)
        self.lblISBN.adjustSize()
        self.lblISBN.move(61, 60)
        self.lblISBN.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblISBN.setStyleSheet("background-color: lightblue")
        self.txtISBN = MyLineEdit(self)
        self.txtISBN.setFixedHeight(18)
        self.txtISBN.setFixedWidth(230)
        self.txtISBN.move(95,58)
        self.txtISBN.setReadOnly(True)
        palette = self.txtISBN.palette()
        palette.setColor(QtGui.QPalette.Base, self.color)
        self.txtISBN.setPalette(palette)
        self.txtISBN.clicked.connect(lambda: self.deactivateLineEdit("ISBN"))
        self.txtISBN.setMaxLength(15)

        self.lblTitle = QLabel("TÍTULO:",self) if not(self.method) else QLabel("TÍTULO(*):",self)
        self.lblTitle.adjustSize()
        self.lblTitle.move(48, 80) if not(self.method) else self.lblTitle.move(38, 80)
        self.lblTitle.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblTitle.setStyleSheet("background-color: lightblue")
        self.txtTitle = MyLineEdit(self)
        self.txtTitle.setFixedHeight(18)
        self.txtTitle.setFixedWidth(230)
        self.txtTitle.move(95,78)
        self.txtTitle.setReadOnly(True)
        palette = self.txtTitle.palette()
        palette.setColor(QtGui.QPalette.Base, self.color)
        self.darkPalette = palette
        self.txtTitle.setPalette(self.darkPalette)
        self.txtTitle.clicked.connect(lambda: self.deactivateLineEdit("Title"))
        self.txtTitle.setMaxLength(90)

        self.lblAutor = QLabel("AUTOR:",self) if not(self.method) else QLabel("AUTOR(*):",self)
        self.lblAutor.adjustSize()
        self.lblAutor.move(49, 100) if not(self.method) else self.lblAutor.move(39, 100)
        self.lblAutor.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblAutor.setStyleSheet("background-color: lightblue")
        self.txtAutor = MyLineEdit(self)
        self.txtAutor.setFixedHeight(18)
        self.txtAutor.setFixedWidth(230)
        self.txtAutor.move(95,98)
        self.txtAutor.setReadOnly(True)
        self.txtAutor.setPalette(self.darkPalette)
        self.txtAutor.clicked.connect(lambda: self.deactivateLineEdit("Autor"))
        self.txtAutor.setMaxLength(45)

        self.lblPublisher = QLabel("EDITORIAL:",self) if not(self.method) else QLabel("EDITORIAL(*):",self)
        self.lblPublisher.adjustSize()
        self.lblPublisher.move(31, 120) if not(self.method) else self.lblPublisher.move(21, 120)
        self.lblPublisher.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblPublisher.setStyleSheet("background-color: lightblue")
        self.txtPublisher = MyLineEdit(self)
        self.txtPublisher.setFixedHeight(18)
        self.txtPublisher.setFixedWidth(230)
        self.txtPublisher.move(95,118)
        self.txtPublisher.setReadOnly(True)
        self.txtPublisher.setPalette(self.darkPalette)
        self.txtPublisher.clicked.connect(lambda: self.deactivateLineEdit("Publisher"))
        self.txtPublisher.setMaxLength(45)

        self.lblPrice = QLabel("PRECIO:",self) if not(self.method) else QLabel("PRECIO(*):",self)
        self.lblPrice.adjustSize()
        self.lblPrice.move(47, 140) if not(self.method) else self.lblPrice.move(37, 140)
        self.lblPrice.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblPrice.setStyleSheet("background-color: lightblue")
        self.txtPrice = MyLineEdit(self)
        self.txtPrice.setPlaceholderText("Ingresar solo numeros")
        self.txtPrice.setFixedHeight(18)
        self.txtPrice.setFixedWidth(230)
        self.txtPrice.move(95,138)
        self.txtPrice.setReadOnly(True)
        self.txtPrice.setPalette(self.darkPalette)
        self.txtPrice.clicked.connect(lambda: self.deactivateLineEdit("Price"))
        self.txtPrice.setMaxLength(30)

        self.lblInitStock = QLabel("STOCK INGRESO:",self)
        self.lblInitStock.adjustSize()
        self.lblInitStock.move(5, 163)
        self.lblInitStock.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblInitStock.setStyleSheet("background-color: lightblue")
        self.spinInitStock = MySpinBox(self)
        self.spinInitStock.setGeometry(100, 100, 50, 20)
        self.spinInitStock.move(95,159)
        self.spinInitStock.setReadOnly(True)
        self.spinInitStock.setPalette(self.darkPalette)
        self.spinInitStock.setEnabled(False) if not(self.method) else self.spinInitStock.setEnabled(True)
        self.spinInitStock.clicked.connect(lambda: self.deactivateLineEdit("Stock"))
        
        self.btnCancel = QPushButton('Cancelar', self)
        self.btnCancel.adjustSize()
        self.btnCancel.move(190, 185)
        self.btnCancel.clicked.connect(lambda: self.submitclose())
        
        self.btnOk = QPushButton(self)
        self.btnOk.setText("Editar") if not(self.method) else self.btnOk.setText("Registrar")
        self.btnOk.adjustSize()
        self.btnOk.move(80, 185)
        self.btnOk.clicked.connect(lambda: self.returnValues(True))

    def show_window(self):
       self.show()


class MySpinBox(QSpinBox):
    clicked = pyqtSignal()
    def mousePressEvent(self, event):
        self.clicked.emit()
        QSpinBox.mousePressEvent(self, event)

class MyLineEdit(QLineEdit):
    clicked = pyqtSignal()
    def mousePressEvent(self, event):
        self.clicked.emit()
        QLineEdit.mousePressEvent(self, event)
        self.textChanged.connect(self.text_changed)
    
    
    def removeAccents(self, txt: str = ""):
        return ''.join(c for c in unicodedata.normalize('NFD', txt)
                  if unicodedata.category(c) != 'Mn')
    
    def text_changed(self):
        if self.text().isupper():
            # cursor = self.cursorPosition()
            # self.setText(self.removeAccents(self.text().upper()))
            # self.setCursorPosition(cursor)
            return
        else:
            cursor = self.cursorPosition()
            self.setText(self.text().upper())
            self.setCursorPosition(cursor)


class ui_CustomChangeLocation(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(ui_CustomChangeLocation, self).__init__(parent)
        self.code = ""
        self.title = ""
        self.setupUi()
        
    def returnValues(self, textButton: str = ""):
        self.returnedVal = (textButton, self.txtUbic.text())
        self.submitclose()

    def cleanInputText(self):
        self.txtUbic.setText("");

    def closeEvent(self, event):
        self.returnValues("Cancel")

    def setItemData(self, code: str = "", title: str = ""):
        self.label2.setText(code)
        self.label2.adjustSize()
        self.label3.setText(title)
        self.label3.adjustSize()
        w1 = self.label4.frameGeometry().width()
        w2 = self.label3.frameGeometry().width()
        self.textWidth = w1 + ((w2>w1) and (w2 - w1))
        self.txtUbic.setFixedWidth(self.textWidth)
        self.btnCancel.move(self.textWidth - self.btnCancel.frameGeometry().width() , 110)
        self.btnOk.move(self.textWidth - self.btnCancel.frameGeometry().width() - self.btnOk.frameGeometry().width() , 110)
    
    def submitclose(self):
        self.accept()

    def setupUi(self):
        self.setObjectName("QCustomDialog")
        self.setWindowTitle("Cambiar ubicación")

        self.label1 = QLabel("Ingrese nueva ubicación para:",self)
        self.label1.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label1.move(6, 15)
        self.label1.setStyleSheet("background-color: lightgreen")
        self.label1.adjustSize()
        
        self.label2 = QLabel(self)
        self.label2.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label2.move(6, 32)
        self.label2.setStyleSheet("background-color: lightblue")

        self.label3 = QLabel(self)
        self.label3.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label3.move(6, 49)
        self.label3.setStyleSheet("background-color: lightblue")
        

        self.label4 = QLabel("FORMATO: Mueble (Letra), Fila (Numero)",self)
        self.label4.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label4.move(6, 66)
        self.label4.setStyleSheet("background-color: lightgreen")
        self.label4.adjustSize()

        self.txtUbic = QLineEdit(self)
        self.txtUbic.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        self.txtUbic.move(6, 85)

        self.btnCancel = QPushButton('Cancel', self)
        self.btnCancel.adjustSize()
        self.btnCancel.clicked.connect(lambda: self.returnValues('Cancel'))

        self.btnOk = QPushButton('OK', self)
        self.btnOk.adjustSize()
        self.btnOk.clicked.connect(lambda: self.returnValues("Ok"))

class ui_OperationDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(ui_OperationDialog, self).__init__(parent)
        self.code = ""
        self.title = ""
        self.setupUi()
        
    def returnValues(self, textButton: str = ""):
        self.returnedVal = textButton
        self.submitclose()

    def cleanInputText(self):
        self.txtUbic.setText("");

    def closeEvent(self, event):
        self.returnValues("Cancelar")

    def setItemData(self, code: str = "", title: str = ""):
        self.label2.setText(code)
        self.label2.adjustSize()
        self.label3.setText(title)
        self.label3.adjustSize()
        w1 = 50
        w2 = self.label3.frameGeometry().width()
        self.textWidth = ((w2>w1) and (w2 - w1))
        # self.txtUbic.setFixedWidth(self.textWidth)
        self.btnDeactivate.move(5, 70)
        self.btnLocation.move(self.btnDeactivate.frameGeometry().width() + 5, 70)
        self.btnEdit.move(self.btnDeactivate.frameGeometry().width() + self.btnLocation.frameGeometry().width() + 5, 70)
        self.btnCancel.move(5, 95)
    
    def submitclose(self):
        self.accept()

    def setupUi(self):
        self.setObjectName("QCustomDialog")
        self.setWindowTitle("Cuadro de operaciones")

        self.label1 = QLabel("Elija la operación para:",self)
        self.label1.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label1.move(6, 15)
        self.label1.setStyleSheet("background-color: lightgreen")
        self.label1.adjustSize()
        
        self.label2 = QLabel(self)
        self.label2.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label2.move(6, 32)
        self.label2.setStyleSheet("background-color: lightblue")

        self.label3 = QLabel(self)
        self.label3.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label3.move(6, 49)
        self.label3.setStyleSheet("background-color: lightblue")
        
        self.btnEdit = QPushButton('Editar', self)
        self.btnEdit.adjustSize()
        self.btnEdit.clicked.connect(lambda: self.returnValues("Editar"))

        self.btnLocation = QPushButton('Cambiar ubicación', self)
        self.btnLocation.adjustSize()
        self.btnLocation.clicked.connect(lambda: self.returnValues("Ubicacion"))

        self.btnDeactivate = QPushButton('Desactivar', self)
        self.btnDeactivate.adjustSize()
        self.btnDeactivate.clicked.connect(lambda: self.returnValues('Desactivar'))
        
        self.btnCancel = QPushButton('Cancelar', self)
        self.btnCancel.adjustSize()
        self.btnCancel.clicked.connect(lambda: self.returnValues("Cancelar"))
    
    def show_window(self):
        self.show()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    Dialog = QDialog()
    # ui = Ui_Dialog(Dialog)
    # ui = ui_CustomChangeLocation()
    data = {"cod": "GN_2524",
        "isbn": "97845562314",
        "title": "COMENTARIOS REALES DE LOS INCAS",
        "autor": "INCA GARCILASO DE VEGA",
        "publisher": "EL LECTOR",
        "price": "65.0"}
    ui = ui_EditNewItemDialog(True)
    # ui.setDataFields(data)
    ui.setDataFields("GN_2025")
    ui.cleanInputFields()
    # ui = ui_OperationDialog(Dialog)
    # ui.setItemData("", "")
    # ui.init_condition()
    ui.show_window()
    # ui.exec_()
    sys.exit(app.exec_())


