# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ware_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QFont, QBrush, QColor
from PyQt5 import QtCore, QtGui, QtWidgets
from gestor import ware_gestor, wares_gestor
from inout_dialog import Ui_inoutDialog
import time
import copy
ROOT = 'C:/Users/IROJAS/Desktop/Genesis/genesis-system-admin/'


class Ui_Dialog(QtWidgets.QDialog):
    # -----------  constructor  -----------
    def __init__(self, data_users = None, data_wares = None, parent=None):
        super(Ui_Dialog, self).__init__(parent)
        self.ware = ware_gestor()  ##se crea el objeto ware
        self.ware_gest = wares_gestor("functions") #con esto solo estoy creando un objecto con solo funciones
        self.ui_CustomInput = ui_CustomChangeLocation()
        self.real_table = []
        self.ownUsers = data_users
        self.ownWares = data_wares
        self.setupUi()
        # -----------  cargar datos en tabla  -----------
        self.ware.load_mainlist(self.ownWares) ##para cargar la tabla principal del gestor
        self.loadData("main")

        # -----------  QDialog para ventana in/out  -----------
        self.dialog = QDialog()
        self.ui_dialog = Ui_inoutDialog(data_users, data_wares, self.dialog)
        self.init = 0

    # -----------  condiciones iniciales al abrir ventana  -----------
    def init_condition(self):
        # -----------  set item conditions  -----------
        self.cmbSearch.setEnabled(True)
        self.txtSearch.setEnabled(True)
        self.txtSearch.clear()
        self.label.setEnabled(True)  # label in/out
        item_all = ['cod','isbn','titulo','autor','editorial']
        self.cmbSearch.clear()
        self.cmbSearch.addItems(item_all)
        self.cmbSearch.setCurrentIndex(-1)
        self.loadData("main")
        self.ware_table.setCurrentCell(0, 0)
        self.actualizar_img(0)

    def sortTable(self, unsortList):
        # separar items que pertencen a libros
        result_books = list(filter(lambda x: x.objBook.cod.split("_")[0] == "GN", unsortList))
        
        # separar items que no pertencen a libros
        result_nobooks = list(filter(lambda x: x.objBook.cod.split("_")[0] != "GN", unsortList))

        # ordenar items de libros por codigo de menor a mayor
        result_books.sort(key=lambda z: int(z.objBook.cod.split("_")[1]))

        return result_books +  result_nobooks

    ## Funcion que permite la apertura de ventana ware desde el main_
    def show_window(self):
        self.show()

    def upload_quantity(self):
        if self.ui_dialog.button_condition == "aceptar" and self.ui_dialog.criterio == " + ":
            for j in self.ui_dialog.main_table:
                for i in self.ware.ware_list:
                    if i.book.cod == j["cod"]:
                        i.almacen_quantity[1] += j["cantidad"]

        elif self.ui_dialog.button_condition == "aceptar" and self.ui_dialog.criterio == " - ":
            for j in self.ui_dialog.main_table:
                for i in self.ware.ware_list:
                    if i.book.cod == j["cod"]:
                        i.almacen_quantity[1] -= j["cantidad"]
        self.loadData()

    # -----------  close event configuration  -----------
    def keyPressEvent(self, event):
        if not event.key() == QtCore.Qt.Key_Escape:
            super(Ui_Dialog, self).keyPressEvent(event)

    # -----------  close event configuration  -----------
    def closeEvent(self, event):
        if self.ui_dialog.isVisible():
            ret = QMessageBox.information(self, 'Aviso', "Debe cerrar la ventana entrada/salida")
            event.ignore()
        else:
            self.accept()
            event.accept()

    def updateRealTable(self): # se actualiza la tabla actual con los datos del back
        for i in self.real_table:
            for j in self.ware.ware_list:
                if i.objBook.cod == j.objBook.cod:
                    i.almacen_data["cant_" + self.ownWares[0]] = j.almacen_data["cant_"+ self.ownWares[0]]
        self.loadData()

    # -----------  carga tabla qtableWidget  -----------
    def loadData(self, condition = "search"):
        backgrounditem = lambda x, z: not(z) and x.setBackground(QtGui.QColor(200, 200, 200, 255))
        flag = QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEnabled
        if condition == "main":
            # sortTable: ordena la tabla que llega de gestor por tipo de producto y nivel de codigo
            self.real_table = self.sortTable(self.ware.ware_list.copy())

        # -----------  esta parte para llenar la tabla  -----------
        row = 0
        self.ware_table.setRowCount(len(self.real_table))
        for ware_li in self.real_table:
            item = QtWidgets.QTableWidgetItem(ware_li.objBook.cod)
            backgrounditem(item, ware_li.objBook.active)
            item.setFlags(flag)
            self.ware_table.setItem(row, 0, item)
            if self.ownWares[2][1] == True:
                self.ware_table.item(row, 0).setToolTip(str(ware_li.almacen_data["ubic_"+self.ownWares[0]]))
            item = QtWidgets.QTableWidgetItem(ware_li.objBook.isbn)
            backgrounditem(item, ware_li.objBook.active)
            item.setFlags(flag)
            self.ware_table.setItem(row, 1, item)
            item = QtWidgets.QTableWidgetItem(ware_li.objBook.name)
            backgrounditem(item, ware_li.objBook.active)
            item.setFlags(flag)
            self.ware_table.setItem(row, 2, item)
            item = QtWidgets.QTableWidgetItem(ware_li.objBook.autor)
            backgrounditem(item, ware_li.objBook.active)
            item.setFlags(flag)
            self.ware_table.setItem(row, 3, item)
            item = QtWidgets.QTableWidgetItem(ware_li.objBook.editorial)
            backgrounditem(item, ware_li.objBook.active)
            item.setFlags(flag)
            self.ware_table.setItem(row, 4, item)
            text = str(ware_li.almacen_data["cant_"+self.ownWares[0]]) if ware_li.objBook.active else "-" 
            item = QtWidgets.QTableWidgetItem(text)
            backgrounditem(item, ware_li.objBook.active)
            item.setFlags(flag)
            self.ware_table.setItem(row, 5, item)
            if self.cmbWares.currentIndex() != -1:
                text = str(ware_li.almacen_data["cant_"+self.cmbWares.currentText()]) if ware_li.objBook.active else "-" 
                item = QtWidgets.QTableWidgetItem(text)
                backgrounditem(item, ware_li.objBook.active)
                item.setFlags(flag)
                self.ware_table.setItem(row, 6, item)
            row += 1

    def txtBusChanged(self):
        if str(self.cmbSearch.currentText()) == "" and self.txtSearch.text() != "":
            ret = QMessageBox.information(self, 'Aviso', "Ingresar criterio de busqueda")

        elif str(self.cmbSearch.currentText()) == "" and self.txtSearch.text() == "":
            # self.loadData("main"), para copiar todos los items del back al frond
            self.loadData("main")
            self.ware_table.setCurrentCell(0, 0)
            self.actualizar_img(0)

        elif self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() == "":
            self.loadData("main")
            self.ware_table.setCurrentCell(0, 0)
            self.actualizar_img(0)

        else:
            if self.cmbSearch.currentText() == "cod":
                if self.buscar("cod", self.txtSearch.text()) > 0:
                    self.loadData("search")
                    self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

            elif self.cmbSearch.currentText() == "isbn":
                if self.buscar("isbn", self.txtSearch.text()) > 0:
                    self.loadData("search")
                    self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(0)
                    #self.txtSearch.setText("")
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)
                    #ret = QMessageBox.information(self, 'Aviso', "No existe coincidencias")

            elif self.cmbSearch.currentText() == "titulo":
                if self.buscar("titulo", self.txtSearch.text()) > 0:
                    self.loadData("search")
                    self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

            elif self.cmbSearch.currentText() == "autor":
                if self.buscar("autor", self.txtSearch.text()) > 0:

                    self.loadData("search")
                    self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

            elif self.cmbSearch.currentText() == "editorial":
                if self.buscar("editorial", self.txtSearch.text()) > 0:
                    self.loadData("search")
                    self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

    def CmbIndexChanged(self):
        if self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() != "":
            self.txtBusChanged()

    def actualizar_img(self, tmp):
        if (tmp + 1 <= len(self.real_table)) and (tmp >= 0):
            #self.lblImg.setPixmap(QtGui.QPixmap("../UI/imgs/books_imgs/" + self.ware_table.item(tmp,0).text() + ".jpg"))
            #self.lblImg.setScaledContents(True)
            self.lbltxtPrecio.setText("S/." + str(self.real_table[tmp].objBook.Pv))

    # -----------  double click event para cambiar ubicacion  -----------
    def tableWidget_doubleClicked(self):
        row = self.ware_table.currentIndex().row()
        column_ = self.ware_table.currentIndex().column()
        
        # no permite el cambio de ubicacion si el item esta inactivo
        itemSelected = list(filter(lambda x: (x.objBook.cod == self.ware_table.item(row,0).text()), self.real_table))

        if self.ownWares[2][1] == True and column_ == 0 and itemSelected[0].objBook.active:
            try:
                # validation: Cancel, Ok, Desactivar
                validation, text = self.openUbicDialog(self.ware_table.item(row,column_).text(), self.ware_table.item(row,column_+2).text())
                print(validation, text)
        #         if validation and text.split(" ")[0].upper() == "MUEBLE" and text.split(" ")[2].upper() == "FILA":
        #             text_, validation_ = QtWidgets.QInputDialog.getText(self, 'Validar operación', "Ingrese contraseña de usuario", QtWidgets.QLineEdit.Password)
        #             index = next((index for (index, d) in enumerate(self.ownUsers[1]) if d.passwd == text_), None)
        #             if index != None:
        #                 self.ware_gest.upload_location(self.ownWares[0], self.ware_table.item(row,0).text(), text.upper())
        #                 index_ = next((index for (index, d) in enumerate(self.ware.ware_list) if d.objBook.cod == self.ware_table.item(row,0).text()), None)
        #                 index__ = next((index for (index, d) in enumerate(self.real_table) if d.objBook.cod == self.ware_table.item(row,0).text()), None)
        #                 self.ware.ware_list[index_].almacen_data["ubic_" + self.ownWares[0]] = text.upper()
        #                 self.real_table[index__].almacen_data["ubic_" + self.ownWares[0]] = text.upper()
        #                 self.ware_table.item(row, 0).setToolTip(text.upper())
        #                 ret = QMessageBox.question(self, 'Alerta',"Operación exitosa", QMessageBox.Ok, QMessageBox.Ok)

        #             elif index == None:
        #                 ret = QMessageBox.question(self, 'Alerta', "Contraseña incorrecta", QMessageBox.Ok, QMessageBox.Ok)

        #         elif validation and len(text) > 0:
        #             ret = QMessageBox.question(self, 'Alerta',
        #                                        "Debe seguir el siguiente formato:\nMUEBLE (Letra), FILA (Numero)",
        #                                        QMessageBox.Ok, QMessageBox.Ok)
        #         elif validation and len(text) == 0:
        #             ret = QMessageBox.question(self, 'Alerta',
        #                                        "Operación sin efecto",
        #                                        QMessageBox.Ok, QMessageBox.Ok)

            except:
                ret = QMessageBox.question(self, 'Alerta',"Debe seguir el siguiente formato:\nMUEBLE (Letra), FILA (Numero)",QMessageBox.Ok, QMessageBox.Ok)
        
        elif self.ownWares[2][1] == True and column_ == 0 and not(itemSelected[0].objBook.active):
            ret = QMessageBox.question(self, 'Alerta',"..::PRODUCTO DESACTIVADO::..\n¿Desea activar el producto?",QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            succes = (ret == QMessageBox.Yes) and (self.userValidation() and self.ware.activateItem(self.ware_table.item(row,0).text()))
            if succes:
                QMessageBox.information(self, 'Mensaje', "Producto activado", QMessageBox.Ok, QMessageBox.Ok)
                self.txtBusChanged()
            ##aqui falta actualizar la tabla del frond luego de actualizar la tabla del back
            
    # -----------  user validation  -----------
    def userValidation(self):
        # ok: True or False
        # text: content
        text, ok = QInputDialog.getText(self, 'Validar usuario', 'Ingrese contraseña', QtWidgets.QLineEdit.Password)
        if(ok):
            currentUser = list(filter(lambda x: x.user == self.ownUsers[0], self.ownUsers[1]))[0]
            if currentUser.passwd == text:
                return True
            else:
                QMessageBox.question(self, 'Alerta', "Contraseña incorrecta", QMessageBox.Ok, QMessageBox.Ok)
                return False
        else:
            return False

    # -----------  load_table para cargar tabla de DB, cuando se presiona icono de nube  -----------
    def load_table(self, event = None):
        self.ware.load_mainlist(self.ownWares)
        self.loadData("main")
        if self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() != "":
            self.txtBusChanged()
        elif self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() == "":
            self.ware_table.setCurrentCell(0, 0)
            self.actualizar_img(0)

    def change_state(self, state): #cambia el estado de self. state y color de los frames
        if state == "ventas":
            self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
            self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        elif state == "in/out":
            self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")
            self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")

    def inout_operation(self,event):
        self.change_state("in/out")
        
        # separar solo items activos y enviar a in/out form
        result_books = list(filter(lambda x: x.objBook.active, self.ware.ware_list.copy()))
        self.ui_dialog.mainList = result_books.copy()

        self.ui_dialog.init_condition()
        if self.ui_dialog.exec_() == QtWidgets.QDialog.Accepted:
            self.change_state("ventas")
            if self.ui_dialog.return_val[2]:
                self.ware.update_backtablequantity(self.ui_dialog.return_val[0], self.ui_dialog.return_val[1], self.ownWares[0])
                self.updateRealTable()
        # self.ui_dialog.show_window()

    def onCurrentIndexChanged(self):
        if self.cmbWares.currentIndex() == -1:
            self.ware_table.horizontalHeaderItem(6).setText("")
        elif self.cmbWares.currentIndex() != -1:
            self.ware_table.horizontalHeaderItem(6).setText("[" + self.cmbWares.currentText() + "]")
            #self.seColumn = str(self.cmbWares.currentText())
            self.loadData()

    def resizeEvent(self, event):
        if self.init > 0:
            self.frame_2.setGeometry(QtCore.QRect(0, self.frameGeometry().height() - 188 - 40, 1024, 188))
        self.ware_table.setGeometry(QtCore.QRect(0, 130, 1024, self.frameGeometry().height() - (188 + 30 + 100 + 40)))
        self.init += 1

    # -----------  funcion buscar  -----------
    def buscar(self, criterio, patron):
        self.real_table.clear()
        if criterio == "cod":
            for i in self.ware.ware_list:
                if i.objBook.cod == str.upper(patron):
                    self.real_table.append(i)
            return len(self.real_table)
        elif criterio == "isbn":
            for i in self.ware.ware_list:
                if(i.objBook.isbn.find(str.upper(patron)) >= 0):
                    self.real_table.append(i)
            return len(self.real_table)

        elif criterio == "titulo":
            for i in self.ware.ware_list:
                if(i.objBook.name.find(str.upper(patron)) >= 0):
                    self.real_table.append(i)
            return len(self.real_table)
        elif criterio == "autor":
            for i in self.ware.ware_list:
                if(i.objBook.autor.find(str.upper(patron)) >= 0):
                    self.real_table.append(i)
            return len(self.real_table)
        elif criterio == "editorial":
            for i in self.ware.ware_list:
                if (i.objBook.editorial.find(str.upper(patron)) >= 0):
                    self.real_table.append(i)
            return len(self.real_table)
        return 0

    # -----------  fill combobox wares from sql  -----------
    def fillcmbWares(self):
        tmp_List = []
        try:
            for i in self.ownWares[1]:
                if i.cod != self.ownWares[0] and i.enabled == True:
                    tmp_List.append(i.cod)
            #self.seColumn = str(tmp_List[0])
            return tmp_List
        except:
            return tmp_List
    
    # -----------  keyPressed for QtableWidget  -----------
    def KeyPressed(self,event):
        if self.ware_table.selectedIndexes() != []:
            temp = self.ware_table.currentRow()
            if event.key() == QtCore.Qt.Key_Up:
                temp -= 1
                self.actualizar_img(temp)
            elif event.key() == QtCore.Qt.Key_Down:
                temp += 1
                self.actualizar_img(temp)
        return QtWidgets.QTableWidget.keyPressEvent(self.ware_table, event)
    
    # -----------  eventFilter para MouseEvent  -----------
    def eventFilter(self, source, event):
        if self.ware_table.selectedIndexes() != []:
            if event.type() == QtCore.QEvent.MouseButtonRelease:
                if event.button() == QtCore.Qt.LeftButton:
                    temp = self.ware_table.currentRow()
                    self.actualizar_img(temp)
        return QtCore.QObject.event(source, event)
    
    def openUbicDialog(self, code: str = "", title: str = ""):
        self.ui_CustomInput.cleanInputText()
        self.ui_CustomInput.setItemData(code, title)
        if self.ui_CustomInput.exec_() == QDialog.Accepted:
            return self.ui_CustomInput.returnedVal
    
    def setupUi(self):
        self.setObjectName("Dialog")
        self.resize(1024, 668)
        self.setFixedSize(1024, 668)
        self.setMinimumHeight(400)
        self.top_frame = QtWidgets.QFrame(self)
        self.top_frame.setGeometry(QtCore.QRect(0, 0, 1024, 100))
        self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        self.top_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_frame.setObjectName("top_frame")

        # -----------  search box configuration  -----------
        self.search_box = QtWidgets.QGroupBox(self.top_frame)
        self.search_box.setGeometry(QtCore.QRect(20, 10, 492, 81))  
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.search_box.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.search_box.setFont(font)
        self.search_box.setObjectName("search_box")

        # -----------  txtSearch configuration  -----------
        self.txtSearch = QtWidgets.QLineEdit(self.search_box)
        self.txtSearch.setGeometry(QtCore.QRect(130, 35, 351, 31))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.txtSearch.setFont(font)
        self.txtSearch.setStyleSheet("background-color: rgb(248, 248, 248);")
        self.txtSearch.setClearButtonEnabled(True)
        self.txtSearch.setObjectName("txtSearch")
        self.txtSearch.textChanged.connect(self.txtBusChanged)

        # -----------  cmbSearch Configuration  -----------
        self.cmbSearch = QtWidgets.QComboBox(self.search_box)
        #self.cmbSearch.setGeometry(QtCore.QRect(20, 35, 101, 31))
        self.cmbSearch.setGeometry(20, 35, 101, 31)
        self.cmbSearch.setStyleSheet("background-color: rgb(170, 255, 0);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.cmbSearch.setFont(font) 
        self.cmbSearch.setObjectName("cmbSearch")
        self.cmbSearch.currentIndexChanged.connect(self.CmbIndexChanged)


        self.lblLoadTable = QtWidgets.QLabel(self.top_frame)
        self.lblLoadTable.setGeometry(QtCore.QRect(890, 23, 101, 67))
        self.lblLoadTable.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblLoadTable.setText("")
        self.lblLoadTable.setPixmap(QtGui.QPixmap(ROOT + "imgs/load_.png"))
        self.lblLoadTable.setScaledContents(True)
        self.lblLoadTable.setObjectName("lblLoadTable")
        self.lblLoadTable.mousePressEvent = self.load_table

        
        # -----------  label in/out configuration  -----------
        self.label = QtWidgets.QLabel(self.top_frame)
        self.label.setGeometry(QtCore.QRect(770, 20, 98, 72))
        self.label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(ROOT + "imgs/in_out.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label.mousePressEvent = self.inout_operation



        # -----------  ware_table configuration  -----------
        self.ware_table = QtWidgets.QTableWidget(self)
        self.ware_table.setEditTriggers(QtWidgets.QTreeView.NoEditTriggers) 
        self.ware_table.setGeometry(QtCore.QRect(0, 130, 1024, 450))
        self.ware_table.setMinimumHeight(100) ## esto se agrego
        self.ware_table.setObjectName("ware_table")
        self.ware_table.setColumnCount(7)
        item = QtWidgets.QTableWidgetItem()

        self.ware_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(6, item)

        self.ware_table.setColumnWidth(0,80)
        self.ware_table.setColumnWidth(1,120)
        self.ware_table.setColumnWidth(2,360)
        self.ware_table.setColumnWidth(3,167)
        self.ware_table.setColumnWidth(4,164)
        #self.ware_table.setColumnWidth(5,47)
        #self.ware_table.setColumnWidth(6,58)
        self.ware_table.horizontalHeader().setEnabled(False)
        self.ware_table.setSelectionBehavior(1)
        self.ware_table.setSelectionMode(1)
        self.ware_table.setStyleSheet("selection-background-color: rgb(0, 120, 255);selection-color: rgb(255, 255, 255);")
        self.ware_table.verticalHeader().hide()
        self.ware_table.viewport().installEventFilter(self)
        self.ware_table.keyPressEvent = self.KeyPressed
        self.ware_table.doubleClicked.connect(self.tableWidget_doubleClicked)
       
        # -----------  frame configuration  -----------
        self.frame = QtWidgets.QFrame(self)
        self.frame.setGeometry(QtCore.QRect(0, 100, 1024, 30))
        self.frame.setStyleSheet("background-color: rgb(57, 57, 57);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        # -----------  cmbSearch wares  -----------
        self.cmbWares = QtWidgets.QComboBox(self.frame)
        #self.cmbSearch.setGeometry(QtCore.QRect(20, 35, 101, 31))
        self.cmbWares.setGeometry(self.frame.width() - 68, 0, 68, 30)
        self.cmbWares.setStyleSheet("background-color: rgb(170, 255, 0);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.cmbWares.setFont(font)
        self.cmbWares.setObjectName("cmWares")
        self.cmbWares.currentIndexChanged.connect(self.onCurrentIndexChanged)
        self.cmbWares.clear()
        self.cmbWares.addItems(self.fillcmbWares())

        # -----------  frame configuration  -----------
        self.frame_2 = QtWidgets.QFrame(self)
        width_ = self.frameGeometry().width()
        height__ = self.frameGeometry().height()
        self.frame_2.setGeometry(QtCore.QRect(0, height__ - 188, 1024, 188))
        self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.boxPV = QtWidgets.QGroupBox(self.frame_2)
        self.boxPV.setGeometry(QtCore.QRect(30, 10, 331, 171))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.boxPV.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.boxPV.setFont(font)
        self.boxPV.setObjectName("boxPV")

        # -----------  lblPV configuration  -----------
        self.lblPV = QtWidgets.QLabel(self.boxPV)
        self.lblPV.setGeometry(QtCore.QRect(160, 20, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.lblPV.setFont(font)
        self.lblPV.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblPV.setObjectName("lblPV")

        # -----------  lblImg configuration  -----------
        self.lblImg = QtWidgets.QLabel(self.boxPV)
        self.lblImg.setGeometry(QtCore.QRect(10, 30, 131, 131))
        self.lblImg.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblImg.setObjectName("lblImg")

        # -----------  lbltxtPrecio configuration  -----------
        self.lbltxtPrecio = QtWidgets.QLabel(self.boxPV)
        self.lbltxtPrecio.setGeometry(QtCore.QRect(160, 60, 151, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.lbltxtPrecio.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.lbltxtPrecio.setFont(font)
        self.lbltxtPrecio.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lbltxtPrecio.setObjectName("lbltxtPrecio")
        
        # -----------  boton Editar Precio Venta  -----------
        self.btnEditarPv = QtWidgets.QPushButton(self.boxPV)
        self.btnEditarPv.setGeometry(QtCore.QRect(160, 117, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btnEditarPv.setFont(font)
        self.btnEditarPv.setStyleSheet("background-color: rgb(240, 240, 240);")
        self.btnEditarPv.setObjectName("btnEditarPv")
        #self.btnEditarPv.clicked.connect(self.printCurrent)
        self.btnEditarPv.setEnabled(False)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Dialog", "Genesis - [Museo del libro]"))
        self.search_box.setTitle(_translate("Dialog", "Cuadro de busqueda"))
        self.cmbSearch.setItemText(1, _translate("Dialog", "cod"))
        self.cmbSearch.setItemText(2, _translate("Dialog", "isbn"))
        self.cmbSearch.setItemText(3, _translate("Dialog", "titulo"))
        self.cmbSearch.setItemText(4, _translate("Dialog", "autor"))
        self.cmbSearch.setItemText(5, _translate("Dialog", "editorial"))

        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setWeight(85)
        font.setBold(True)

        item = self.ware_table.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "cod"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "isbn"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "titulo"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "autor"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(4)
        item.setText(_translate("Dialog", "editorial"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(5)
        item.setText(_translate("Dialog", "[" + self.ownWares[0] + "]"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(6)

        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))

        #self.ware_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch) # metodo que setea ancho de columnas por igual
        # self.ware_table.horizontalHeader().setStretchLastSection(True) # metodo que setea que extienda solo la ultiam columna
        self.ware_table.horizontalHeader().setSectionResizeMode(5,QHeaderView.Stretch)
        self.ware_table.horizontalHeader().setSectionResizeMode(6, QHeaderView.Stretch)


        self.boxPV.setTitle(_translate("Dialog", "Cuadro de venta"))
        self.lblPV.setText(_translate("Dialog", "P.Venta:"))
        self.lbltxtPrecio.setText(_translate("Dialog", ""))
        self.btnEditarPv.setText(_translate("Dialog", "Editar"))

class ui_CustomChangeLocation(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(ui_CustomChangeLocation, self).__init__(parent)
        self.code = ""
        self.title = ""
        self.setupUi()
        
    def returnValues(self, textButton: str = ""):
        self.returnedVal = (textButton, self.txtUbic.text())
        self.submitclose()

    def cleanInputText(self):
        self.txtUbic.setText("");

    def closeEvent(self, event):
        self.returnValues("Cancel")

    def setItemData(self, code: str = "", title: str = ""):
        self.label2.setText(code)
        self.label2.adjustSize()
        self.label3.setText(title)
        self.label3.adjustSize()
        w1 = self.label4.frameGeometry().width()
        w2 = self.label3.frameGeometry().width()
        self.textWidth = w1 + ((w2>w1) and (w2 - w1))
        self.txtUbic.setFixedWidth(self.textWidth)
        self.btnCancel.move(self.textWidth - self.btnCancel.frameGeometry().width() , 110)
        self.btnOk.move(self.textWidth - self.btnCancel.frameGeometry().width() - self.btnOk.frameGeometry().width() , 110)
        self.btnDesactive.move(self.textWidth - self.btnDesactive.frameGeometry().width(), 135)
    
    def submitclose(self):
        self.accept()

    def setupUi(self):
        self.setObjectName("QCustomDialog")
        self.setWindowTitle("Cambiar ubicación")

        self.label1 = QLabel("Ingrese nueva ubicación para:",self)
        self.label1.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label1.move(6, 15)
        self.label1.setStyleSheet("background-color: lightgreen")
        self.label1.adjustSize()
        
        self.label2 = QLabel(self)
        self.label2.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label2.move(6, 32)
        self.label2.setStyleSheet("background-color: lightblue")

        self.label3 = QLabel(self)
        self.label3.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label3.move(6, 49)
        self.label3.setStyleSheet("background-color: lightblue")
        

        self.label4 = QLabel("FORMATO: Mueble (Letra), Fila (Numero)",self)
        self.label4.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label4.move(6, 66)
        self.label4.setStyleSheet("background-color: lightgreen")
        self.label4.adjustSize()

        self.txtUbic = QLineEdit(self)
        self.txtUbic.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        self.txtUbic.move(6, 85)

        self.btnCancel = QPushButton('Cancel', self)
        self.btnCancel.adjustSize()
        self.btnCancel.clicked.connect(lambda: self.returnValues('Cancel'))

        self.btnOk = QPushButton('OK', self)
        self.btnOk.adjustSize()
        self.btnOk.clicked.connect(lambda: self.returnValues("Ok"))
        
        self.btnDesactive = QPushButton('Desactivar', self)
        self.btnDesactive.adjustSize()
        self.btnDesactive.clicked.connect(lambda: self.returnValues("Desactivar"))


if __name__ == '__main__':
    app = QApplication(sys.argv)
    Dialog = QDialog()
    ui = Ui_Dialog(Dialog)
    # ui = ui_CustomChangeLocation()
    # ui.setItemData("CODIGO DE PRODUCTO", "NOMBRE DE PRODUCTO")
    ui.init_condition()
    ui.show_window()
    # ui.exec_()
    sys.exit(app.exec_())


