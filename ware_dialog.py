# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ware_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import unicodedata
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QFont, QBrush, QColor, QKeyEvent, QMouseEvent, QTextCursor, QWheelEvent
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal, Qt, QDate, QStringListModel
from PyQt5.QtWidgets import QWidget
from gestor import WareProduct, wares_gestor, aws_s3, users_gestor
from objects import ware, user
from inout_dialog import Ui_inoutDialog
from uiConfigurations import *
from datetime import datetime
from functools import reduce
ROOT = 'C:/Users/IROJAS/Desktop/Genesis/genesis-system-admin/'


class Ui_Dialog(QtWidgets.QDialog):
    # -----------  constructor  -----------
    def __init__(self, currentUser: user = None, currentWare: ware = None, restWare: list = None, WareProdDate: datetime.date = None, parent=None):
        super(Ui_Dialog, self).__init__(parent)

        if(bool(currentUser) or bool(currentWare) or bool(restWare) or bool(WareProdDate) or bool(parent)):
            self.gestWareProduct = WareProduct()  ##se crea el objeto getWareProduct: Maneja la tabla ware -> WareProduct <- Product
            self.ware_gest = wares_gestor("functions") #con esto solo estoy creando un objecto con solo funciones
            self.ui_CustomInput = ui_CustomChangeLocation()
            self.ui_operationDialog = ui_OperationDialog()
            self.ui_EditDialog = ui_EditNewItemDialog()
            self.objS3 = aws_s3()
            self.real_table = []
            self.ownUsers = currentUser
            self.currWare = currentWare
            self.restWares = restWare
            self.WareProdDate = WareProdDate
            self.setupUi()
            # -----------  cargar datos en tabla  -----------
            self.gestWareProduct.loadInnerTable() ##para cargar la tabla principal del gestor
            self.txtBusChanged()
            # -----------  QDialog para ventana in/out  -----------
            self.dialog = QDialog()
            self.ui_dialog = Ui_inoutDialog(self.ownUsers, self.currWare, self.dialog)
            self.init = 0
            # print(self.currWare, self.restWares)
            # print(currentUser)
        else:
            self.ownUsers =  None
            self.currWare = None
            self.restWares = None
            self.WareProdDate = None
            self.setupUi()
            self.init = 0

    # -----------  condiciones iniciales al abrir ventana  -----------
    def init_condition(self):
        # -----------  set item conditions  -----------
        self.cmbSearch.setEnabled(True)
        self.txtSearch.setEnabled(True)
        self.txtSearch.clear()
        self.lblNewItem.setEnabled(True) # label new product
        item_all = ['cod','isbn','titulo','autor','editorial']
        self.cmbSearch.clear()
        self.cmbSearch.addItems(item_all)
        self.cmbWarePrice.clear()
        self.cmbWarePrice.addItems([self.currWare.cod] + self.getRestWare(True)) if self.ownUsers.auth["ckWarePrice"] else self.cmbWarePrice.addItems([self.currWare.cod])
        self.cmbWarePrice.setEnabled(True) if self.ownUsers.auth["ckWarePrice"] else self.cmbWarePrice.setEnabled(False)
        self.cmbSearch.setCurrentIndex(-1)
        # las dos lineas de abajo actualizan los datos de precio con el item de la primera fila
        # self.txtBusChanged() es una funcion que actua segun las condiciones de los inputs
        self.txtBusChanged()
        self.ware_table.setCurrentCell(0, 0)
        self.actualizar_img(0)

    def sortTable(self, unsortList: list =  None) -> tuple:
        # separar items que pertencen a libros
        result_books = list(filter(lambda x: x.product.prdCode.split("_")[0] == "GN", unsortList))

        # separar items que no pertencen a libros
        result_nobooks = list(filter(lambda x: x.product.prdCode.split("_")[0] != "GN", unsortList))

        # # ordenar items de libros por codigo de menor a mayor
        # result_books.sort(key=lambda z: int(z.objBook.cod.split("_")[1]))
        return len(result_books), result_books +  result_nobooks
        

    ## Funcion que permite la apertura de ventana ware desde el main_
    def showWindow(self):
        self.show()

    def upload_quantity(self):
        if self.ui_dialog.button_condition == "aceptar" and self.ui_dialog.criterio == " + ":
            for j in self.ui_dialog.main_table:
                for i in self.gestWareProduct.ware_list:
                    if i.book.cod == j["cod"]:
                        i.almacen_quantity[1] += j["cantidad"]

        elif self.ui_dialog.button_condition == "aceptar" and self.ui_dialog.criterio == " - ":
            for j in self.ui_dialog.main_table:
                for i in self.gestWareProduct.ware_list:
                    if i.book.cod == j["cod"]:
                        i.almacen_quantity[1] -= j["cantidad"]
        self.txtBusChanged()

    # -----------  close event configuration  -----------
    def keyPressEvent(self, event):
        if not event.key() == QtCore.Qt.Key_Escape:
            super(Ui_Dialog, self).keyPressEvent(event)

    # -----------  close event configuration  -----------
    def closeEvent(self, event):
        self.accept()
        event.accept()
        # if self.ui_dialog.isVisible():
        #     ret = QMessageBox.information(self, 'Aviso', "Debe cerrar la ventana entrada/salida")
        #     event.ignore()
        # else:
        #     self.accept()
        #     event.accept()

    # def updateRealTable(self): #se actualiza la tabla actual con los datos del back
    #     # for i in self.real_table:
    #     #     for j in self.gestWareProduct.innerWareList:
    #     #         if i.product.prdCode == j.product.prdCode and (self.currWare in i.wareData) and (self.currWare in j.wareData):
    #     #             print(i)
    #     #             # i.wareData[self.currWare.cod]["qtyNew"] = j.wareData[self.currWare.cod]["qtyNew"]
    #     #             # print(i.wareData[self.currWare.cod]["qtyNew"])
    #     self.loadData()

    # -----------  carga tabla qtableWidget  -----------
    # def loadData(self, condition = "search") -> int:
    def loadData(self) -> int:
        backgrounditem = lambda x, z: not(z) and x.setBackground(QtGui.QColor(200, 200, 200, 255))
        flag = QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEnabled
        # if condition == "main":
        # sortTable: ordena la tabla que llega de gestor por tipo de producto y nivel de codigo
        lenTableBooks, self.real_table = self.sortTable(self.real_table.copy())
        # lenTableBooks, self.real_table = self.sortTable(self.gestWareProduct.innerWareList.copy())

        # -----------  esta parte para llenar la tabla  -----------
        # row = 0
        self.ware_table.setRowCount(len(self.real_table))
        for row, ware_li in enumerate(self.real_table):
            # isExistActive: primero comprueba que el item exista en el presente almacen, luego recien verifica que el item este habilitado en el almacen
            isExistActive = (self.currWare.cod in ware_li.wareData) and ware_li.wareData[self.currWare.cod]["isEnabled"]
            # isOldExist: primero verifica que existe algun almancen activo para el item y luego que todos los valoes de PVOLD sean iguales
            isOldExist = not(None in ware_li.wareData) and all(i["pvOld"] == list(ware_li.wareData.values())[0]["pvOld"] for i in ware_li.wareData.values())

            item = QtWidgets.QTableWidgetItem(ware_li.product.prdCode)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 0, item)
            # Self.currWare.auth["locTooltip"]: este permiso es propio del current ware
            if isExistActive and self.currWare.auth["locTooltip"]:
                self.ware_table.item(row, 0).setToolTip(str(ware_li.wareData[self.currWare.cod]["loc"]))

            item = QtWidgets.QTableWidgetItem(ware_li.product.isbn)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 1, item)

            item = QtWidgets.QTableWidgetItem(ware_li.product.title)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 2, item)

            item = QtWidgets.QTableWidgetItem(ware_li.product.autor)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 3, item)

            item = QtWidgets.QTableWidgetItem(ware_li.product.publisher)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 4, item)

            text = str(ware_li.wareData[self.currWare.cod]["qtyNew"]) if (isExistActive) else "-"
            item = QtWidgets.QTableWidgetItem(text)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 5, item)
            if isExistActive and isOldExist: self.ware_table.item(row, 5).setToolTip("-->[%s]"%str(ware_li.wareData[self.currWare.cod]["qtyOld"]))

            if self.cmbWares.currentIndex() != -1:
                currTextCmbWare = self.cmbWares.currentText()
                isWareEnEx = ((currTextCmbWare in ware_li.wareData) and ware_li.wareData[currTextCmbWare]["isEnabled"])
                text = str(ware_li.wareData[currTextCmbWare]["qtyNew"]) if isWareEnEx else "-"
                item = QtWidgets.QTableWidgetItem(text)
                backgrounditem(item, isWareEnEx)
                item.setFlags(flag)
                self.ware_table.setItem(row, 6, item)
                if isWareEnEx and isOldExist: self.ware_table.item(row, 6).setToolTip("-->[%s]"%str(ware_li.wareData[currTextCmbWare]["qtyOld"]))
            # row += 1

        return lenTableBooks

    def txtBusChanged(self, currentLineText: str = None, method: bool = False):
        #method: True # cuando se crea un nuevo item
        if str(self.cmbSearch.currentText()) == "" and self.txtSearch.text() != "":
            ret = QMessageBox.information(self, 'Aviso', "Ingresar criterio de busqueda")

        elif str(self.cmbSearch.currentText()) == "" and self.txtSearch.text() == "":
            # self.loadData(): para copiar toda la lista inner to frond
            if self.buscar("main") > 0:
                #lstBookIndex: la posicion final del ultimo item de la categoria libros
                lstBookIndex = self.loadData()
                self.ware_table.setCurrentCell(0, 0) if not(method) else self.ware_table.setCurrentCell(lstBookIndex - 1, 0)
                self.actualizar_img(0)

        elif self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() == "":
            if self.buscar("main") > 0:
                lstBookIndex = self.loadData()
                self.ware_table.setCurrentCell(0, 0) if not(method) else self.ware_table.setCurrentCell(lstBookIndex - 1, 0)
                self.actualizar_img(0)

        else:
            if self.cmbSearch.currentText() == "cod":
                if self.buscar("cod", self.txtSearch.text()) > 0:
                    lstBookIndex = self.loadData()
                    self.ware_table.setCurrentCell(0, 0) if not(method) else self.ware_table.setCurrentCell(lstBookIndex - 1, 0)
                    self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

            elif self.cmbSearch.currentText() == "isbn":
                if self.buscar("isbn", self.txtSearch.text()) > 0:
                    lstBookIndex = self.loadData()
                    self.ware_table.setCurrentCell(0, 0) if not(method) else self.ware_table.setCurrentCell(lstBookIndex - 1, 0)
                    self.actualizar_img(0)
                    #self.txtSearch.setText("")
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)
                    #ret = QMessageBox.information(self, 'Aviso', "No existe coincidencias")

            elif self.cmbSearch.currentText() == "titulo":
                if self.buscar("titulo", self.txtSearch.text()) > 0:
                    lstBookIndex = self.loadData()
                    self.ware_table.setCurrentCell(0, 0) if not(method) else self.ware_table.setCurrentCell(lstBookIndex - 1, 0)
                    self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

            elif self.cmbSearch.currentText() == "autor":
                if self.buscar("autor", self.txtSearch.text()) > 0:
                    lstBookIndex = self.loadData()
                    self.ware_table.setCurrentCell(0, 0) if not(method) else self.ware_table.setCurrentCell(lstBookIndex - 1, 0)
                    self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

            elif self.cmbSearch.currentText() == "editorial":
                if self.buscar("editorial", self.txtSearch.text()) > 0:
                    lstBookIndex = self.loadData()
                    self.ware_table.setCurrentCell(0, 0) if not(method) else self.ware_table.setCurrentCell(lstBookIndex - 1, 0)
                    self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

    def CmbIndexChanged(self):
        if self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() != "":
            self.txtBusChanged()

    def actualizar_img(self, tmp: int = None):
        #el paramatro tmp es el index de la fila en la tabla
        if (tmp + 1 <= len(self.real_table)) and (tmp >= 0):
            pathfile = self.objS3.directions["product"](self.ware_table.item(tmp,0).text().lower())
            if self.objS3.existsLocalFile(pathfile):
                self.lblImg.setPixmap(QtGui.QPixmap(pathfile))
                self.lblImg.setScaledContents(True)
            else:
                self.lblImg.setPixmap(QtGui.QPixmap())
                self.lblImg.setScaledContents(True)

            if (self.currWare.cod in self.real_table[tmp].wareData) and (self.real_table[tmp].wareData[self.currWare.cod]["isEnabled"]):
                self.cmbWarePrice.setCurrentIndex(0)
                self.lblValuePrice.setFont(getFontxPV())
                self.lblValuePrice.move(238,34)
                self.lblValuePrice.setText("S/." + str(self.real_table[tmp].wareData[self.currWare.cod]["pvNew"]))
            else:
                self.cmbWarePrice.setCurrentIndex(0)
                self.lblValuePrice.setFont(getFontxUnAvailable())
                self.lblValuePrice.move(238, 38)
                self.lblValuePrice.setText("*********")

            counter = 0
            pv = 0

            if not(None in self.real_table[tmp].wareData) and all(i["pvOld"] == list(self.real_table[tmp].wareData.values())[0]["pvOld"] for i in self.real_table[tmp].wareData.values()):
                for key in self.real_table[tmp].wareData:
                    if self.real_table[tmp].wareData[key]["isEnabled"]:
                        counter += int(self.real_table[tmp].wareData[key]["qtyOld"])
                        pv = self.real_table[tmp].wareData[key]["pvOld"]

            if counter > 0 and pv > 0:
                self.lblValuePVP2.setPalette(getPricePalette2())
                self.lblValuePVP2.setText("S/.%s"%(str(pv)))
            else:
                self.lblValuePVP2.setPalette(getPricePalette2())
                self.lblValuePVP2.setText("*********")

    # -----------  double click event para cambiar ubicacion  -----------
    def tableWidget_doubleClicked(self):
        # ware_table es el widget
        row = self.ware_table.currentIndex().row()
        column_ = self.ware_table.currentIndex().column()

        # no permite el cambio de ubicacion si el item esta inactivo
        itemSelected = list(filter(lambda x: x.product.prdCode == self.ware_table.item(row,0).text(), self.real_table))

        # if self.currWare[2][1] == True and column_ == 0 and itemSelected[0].objBook.active:

        #         # validation: Cancel, Ok, Desactivar
        #         validation = self.openOperationDialog(self.ware_table.item(row,column_).text(), self.ware_table.item(row,column_+2).text())

        #         if (validation == "Desactivar"):
        #             if self.gestWareProduct.isZeroQuantity(self.ware_table.item(row,0).text()):
        #                 ret = QMessageBox.question(self, 'Alerta',"..::PRODUCTO ACTIVO::..\n¿Desea desactivar el producto?",QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        #                 succes = (ret == QMessageBox.Yes) and (self.userValidation() and self.gestWareProduct.activateItem(self.ware_table.item(row,0).text(), False))
        #                 if succes:
        #                     QMessageBox.information(self, 'Mensaje', "Producto desactivado", QMessageBox.Ok, QMessageBox.Ok)
        #                     self.txtBusChanged()
        #             else:
        #                 QMessageBox.information(self, 'Mensaje', "El producto se encuentra en stock", QMessageBox.Ok, QMessageBox.Ok)

        #         if (validation == "Ubicacion"):
        #             ubicValidation, text = self.openUbicDialog(self.ware_table.item(row,column_).text(), self.ware_table.item(row,column_+2).text())

        #             if (ubicValidation == "Ok"):
        #                 try:
        #                     if text.split(" ")[0].upper() == "MUEBLE" and text.split(" ")[2].upper() == "FILA":
        #                         if self.userValidation() and self.gestWareProduct.changeItemLocation(self.ware_table.item(row,0).text(), text, self.currWare[0]):
        #                             QMessageBox.question(self, 'Alerta',"Operación exitosa", QMessageBox.Ok, QMessageBox.Ok)
        #                             self.txtBusChanged()

        #                     elif len(text) > 0:
        #                         ret = QMessageBox.question(self, 'Alerta',
        #                                                 "Debe seguir el siguiente formato:\nMUEBLE (Letra), FILA (Numero)",
        #                                                 QMessageBox.Ok, QMessageBox.Ok)
        #                     elif (ubicValidation == "Ok") and len(text) == 0:
        #                         ret = QMessageBox.question(self, 'Alerta',
        #                                                 "Operación sin efecto",
        #                                                 QMessageBox.Ok, QMessageBox.Ok)
        #                 except:
        #                     ret = QMessageBox.question(self, 'Alerta',"Debe seguir el siguiente formato:\nMUEBLE (Letra), FILA (Numero)",QMessageBox.Ok, QMessageBox.Ok)

        #         if (validation == "Editar"):
        #             data = {"cod": self.ware_table.item(row,0).text(),
        #                     "isbn": self.ware_table.item(row,1).text(),
        #                     "title": self.ware_table.item(row,2).text(),
        #                     "autor": self.ware_table.item(row,3).text(),
        #                     "publisher": self.ware_table.item(row,4).text(),
        #                     "price": str(self.real_table[row].objBook.Pv)}
        #             isUpdate, text = self.openEditItemDialog(data)
        #             if isUpdate and self.userValidation() and self.gestWareProduct.updateInnerItem(data["cod"], text) and self.ware_gest.updateDataItem(data["cod"], text):
        #                 QMessageBox.question(self, 'Alerta',"Operación exitosa", QMessageBox.Ok, QMessageBox.Ok)
        #                 self.txtBusChanged()

        # elif self.currWare[2][1] == True and column_ == 0 and not(itemSelected[0].objBook.active):
        #     ret = QMessageBox.question(self, 'Alerta',"..::PRODUCTO DESACTIVADO::..\n¿Desea activar el producto?",QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        #     succes = (ret == QMessageBox.Yes) and (self.userValidation() and self.gestWareProduct.activateItem(self.ware_table.item(row,0).text(), True))
        #     if succes:
        #         QMessageBox.information(self, 'Mensaje', "Producto activado", QMessageBox.Ok, QMessageBox.Ok)
        #         self.txtBusChanged()
        #     ##aqui falta actualizar la tabla del frond luego de actualizar la tabla del back

    # -----------  user validation  -----------
    def userValidation(self):
        # isPressedOk: True or False
        # text: content
        text, isPressedOk = QInputDialog.getText(self, 'Validar usuario', 'Ingrese contraseña', QtWidgets.QLineEdit.Password)
        if(isPressedOk):
            a = users_gestor() 
            return a.checkPSW(text)[1] if a.checkPSW(text)[0] else False
        else:
            return False

    def change_state(self, state): #cambia el estado de self. state y color de los frames
        if state == "ware":
            self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
            self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        elif state == "in/out":
            self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")
            self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")

    def inout_operation(self,event): # funcion para abrir el dialog in/out
        if self.ownUsers.auth["InOutProduct"]:
            self.change_state("in/out") # lo que hace esto es cambiar el color de waredialog cuando pasa a ingreso/salida
             
            # separar solo items activos y enviar a in/out form
            result_books = list(filter(lambda x: (self.currWare.cod in x.wareData) and (x.wareData[self.currWare.cod]["isEnabled"]), self.gestWareProduct.innerWareList.copy()))
            
            self.ui_dialog.mainList = result_books.copy()

            self.ui_dialog.init_condition()

            if self.ui_dialog.exec_() == QtWidgets.QDialog.Accepted:
                self.change_state("ware")
                #returned_val[3]: generalFlag -> True cuando se tiene la intencion de agregar o quitar cantidades
                if self.ui_dialog.returned_val[3]:
                    self.gestWareProduct.update_backtablequantity(self.ui_dialog.returned_val[0], self.ui_dialog.returned_val[1], self.ui_dialog.returned_val[2], self.currWare.cod)
                    # self.updateRealTable()
                    self.txtBusChanged()
                    self.actualizar_img(self.ware_table.currentIndex().row())
            # self.ui_dialog.show_window()
        else:
            QMessageBox.warning(self, 'Mensaje', "No tiene permisos para entrada/salida de productos", QMessageBox.Ok, QMessageBox.Ok)

    def onCurrentIndexChanged(self):
        if self.cmbWares.currentIndex() == -1:
            self.ware_table.horizontalHeaderItem(6).setText("")
        elif self.cmbWares.currentIndex() != -1:
            self.ware_table.horizontalHeaderItem(6).setText("[" + self.cmbWares.currentText() + "]")
            #self.seColumn = str(self.cmbWares.currentText())
            self.txtBusChanged()

    def onCmbWarePriceIndexChanged(self):
        if self.cmbWarePrice.currentIndex() != -1:
            # ware_table es el widget
            tblCurrentIndex = self.ware_table.currentRow()
            if (self.cmbWarePrice.currentText() in self.real_table[tblCurrentIndex].wareData) and (self.real_table[tblCurrentIndex].wareData[self.cmbWarePrice.currentText()]["isEnabled"]):
                self.lblValuePrice.setFont(getFontxPV())
                self.lblValuePrice.move(238,34)
                self.lblValuePrice.setText("S/." + str(self.real_table[tblCurrentIndex].wareData[self.cmbWarePrice.currentText()]["pvNew"]))
            else:
                self.lblValuePrice.setFont(getFontxUnAvailable())
                self.lblValuePrice.move(238, 38)
                self.lblValuePrice.setText("*********")

    def resizeEvent(self, event):
        if self.init > 0:
            self.frame_2.setGeometry(QtCore.QRect(0, self.frameGeometry().height() - 188 - 40, 1024, 188))
        self.ware_table.setGeometry(QtCore.QRect(0, 130, 1024, self.frameGeometry().height() - (188 + 30 + 100 + 40)))
        self.init += 1

    # -----------  funcion buscar  -----------
    def buscar(self, criterio: str = None, patron: str = None):
        self.real_table.clear()
        
        if criterio == "main":
            self.real_table = self.gestWareProduct.innerWareList.copy()
            return len(self.real_table)
        
        if criterio == "cod":
            self.real_table = list(filter(lambda x: x.product.prdCode == str.upper(patron) ,self.gestWareProduct.innerWareList)).copy()
            return len(self.real_table)

        elif criterio == "isbn":
            self.real_table = list(filter(lambda x: x.product.isbn.find(str.upper(patron)) >= 0 ,self.gestWareProduct.innerWareList)).copy()
            return len(self.real_table)

        elif criterio == "titulo":
            self.real_table = list(filter(lambda x: x.product.title.find(str.upper(patron)) >= 0 ,self.gestWareProduct.innerWareList)).copy()
            return len(self.real_table)

        elif criterio == "autor":
            self.real_table = list(filter(lambda x: x.product.autor.find(str.upper(patron)) >= 0 ,self.gestWareProduct.innerWareList)).copy()
            return len(self.real_table)

        elif criterio == "editorial":
            self.real_table = list(filter(lambda x: x.product.publisher.find(str.upper(patron)) >= 0 ,self.gestWareProduct.innerWareList)).copy()
            return len(self.real_table)
        return 0

    # -----------  obtiene lista de wares que son virtuales y estan activos si virtual es True, caso contrario todos mas los virtuales  -----------
    def getRestWare(self, virtual: bool = False) -> list:
        try:
            if not(virtual):
                return list(map(lambda y: y.cod ,list(filter(lambda x: True if (x.auth["enabled"] and not(x.auth["isVirtual"])) else False, self.restWares))))
            else:
                return list(map(lambda y: y.cod ,list(filter(lambda x: True if x.auth["enabled"] else False, self.restWares))))
        except:
            return []

    # -----------  keyPressed for QtableWidget  -----------
    def KeyPressed(self,event):
        if self.ware_table.selectedIndexes() != []:
            # ware_table es el widget
            temp = self.ware_table.currentRow()
            if event.key() == QtCore.Qt.Key_Up:
                temp -= 1
                self.actualizar_img(temp)
            elif event.key() == QtCore.Qt.Key_Down:
                temp += 1
                self.actualizar_img(temp)
        return QtWidgets.QTableWidget.keyPressEvent(self.ware_table, event)

    # -----------  eventFilter para MouseEvent  -----------
    def eventFilter(self, source, event):
        if self.ware_table.selectedIndexes() != []:
            if event.type() == QtCore.QEvent.MouseButtonRelease:
                if event.button() == QtCore.Qt.LeftButton:
                    temp = self.ware_table.currentRow()
                    self.actualizar_img(temp)
        return QtCore.QObject.event(source, event)

    def openUbicDialog(self, code: str = "", title: str = ""):
        self.ui_CustomInput.cleanInputText()
        self.ui_CustomInput.setItemData(code, title)
        if self.ui_CustomInput.exec_() == QDialog.Accepted:
            return self.ui_CustomInput.returnedVal

    def openOperationDialog(self, code: str = "", title: str = ""):
        self.ui_operationDialog.setItemData(code, title)
        if self.ui_operationDialog.exec_() == QDialog.Accepted:
            return self.ui_operationDialog.returnedVal

    def openEditItemDialog(self, data: dict = None):
        if bool(data):
            self.ui_EditDialog.setDataFields(data)
            self.ui_EditDialog.cleanInputFields()
            if self.ui_EditDialog.exec_() == QDialog.Accepted:
                return self.ui_EditDialog.returnedVal
            return (False, None)
        else:
            return (False, None)

    def loadImage(self):
        row = self.ware_table.currentIndex().row()
        if row >= 0:
            validator, pathfile = self.objS3.get_ProductImage(self.ware_table.item(row,0).text().lower())
            if validator:
                self.lblImg.setPixmap(QtGui.QPixmap(pathfile))
                self.lblImg.setScaledContents(True)
            else:
                self.lblImg.setPixmap(QtGui.QPixmap())
                QMessageBox.information(self, 'Mensaje', "Error para cargar la imagen", QMessageBox.Ok, QMessageBox.Ok)

    def createNewItem(self, event = None):
        # isAllowed: bool
        # data: str
        isAllowed, data = self.ware_gest.getNextCodDB()
        if isAllowed:
            #Argumento True en ui_EditNewItemDialog cuando se crea un nuevo producto
            ui_NewItemDialog = ui_EditNewItemDialog(True)
            ui_NewItemDialog.cleanInputFields(True)
            ui_NewItemDialog.setDataFields(data)
            if ui_NewItemDialog.exec_() == QDialog.Accepted:
                validator, dataAfter = ui_NewItemDialog.returnedVal
                if validator:
                    if self.userValidation():
                        if(self.ware_gest.insertNewItemDB(dataAfter.copy(), self.currWare.cod) and self.gestWareProduct.insertInnerNewItem(dataAfter.copy(), self.currWare.cod)):
                            QMessageBox.information(self, 'Mensaje', "¡Operacion Exitosa!", QMessageBox.Ok, QMessageBox.Ok)
                            self.txtBusChanged(True)
                            self.actualizar_img(self.ware_table.currentIndex().row())
                        else:
                            QMessageBox.information(self, 'Mensaje', "Error durante operación", QMessageBox.Ok, QMessageBox.Ok)

    # -----------  load_table carga tabla inner desde DB, cuando se presiona icono de Actualizar tabla  -----------
    def load_table(self, event = None):
        #si retorna true debe actualizar la fecha con la ultima actualizada
        if self.gestWareProduct.loadInnerTable(self.WareProdDate):
            self.WareProdDate = datetime.now().date()
        # guarda el active index antiguo
        row = self.ware_table.currentIndex().row()
        self.txtBusChanged()
        # setea el index antiguo a la tabla actualizada
        self.ware_table.setCurrentCell(row, 0)
        self.actualizar_img(row)
        # self.loadData()
        # if self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() != "":
        #     self.txtBusChanged()
        # elif self.cmbSearch.currentIndex() == -1 and self.txtSearch.text() == "":
        #     self.txtBusChanged()
        # elif self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() == "":
        #     self.ware_table.setCurrentCell(0, 0)
        #     self.actualizar_img(0)

    def setupUi(self):
        self.setObjectName("Dialog")
        self.resize(1024, 668)
        self.setFixedSize(1024, 668)
        self.setMinimumHeight(400)
        self.top_frame = QtWidgets.QFrame(self)
        self.top_frame.setGeometry(QtCore.QRect(0, 0, 1024, 100))
        self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        self.top_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_frame.setObjectName("top_frame")

        # -----------  search box configuration  -----------
        self.search_box = QtWidgets.QGroupBox(self.top_frame)
        self.search_box.setGeometry(QtCore.QRect(20, 10, 492, 81))
        self.search_box.setPalette(getPalette())
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.search_box.setFont(font)
        self.search_box.setObjectName("search_box")

        # -----------  txtSearch configuration  -----------
        self.txtSearch = QtWidgets.QLineEdit(self.search_box)
        self.txtSearch.setGeometry(QtCore.QRect(130, 35, 351, 31))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.txtSearch.setFont(font)
        self.txtSearch.setStyleSheet("background-color: rgb(248, 248, 248);")
        self.txtSearch.setClearButtonEnabled(True)
        self.txtSearch.setObjectName("txtSearch")
        self.txtSearch.textChanged.connect(self.txtBusChanged)

        # -----------  cmbSearch Configuration  -----------
        self.cmbSearch = QtWidgets.QComboBox(self.search_box)
        #self.cmbSearch.setGeometry(QtCore.QRect(20, 35, 101, 31))lblLoadTable
        self.cmbSearch.setGeometry(20, 35, 101, 31)
        self.cmbSearch.setStyleSheet("background-color: rgb(170, 255, 0);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.cmbSearch.setFont(font)
        self.cmbSearch.setObjectName("cmbSearch")
        self.cmbSearch.currentIndexChanged.connect(self.CmbIndexChanged)

        # -----------  label in/out configuration  -----------
        self.lblInOut = QtWidgets.QLabel(self.top_frame)
        self.lblInOut.setGeometry(QtCore.QRect(675, 20, 98, 72))
        self.lblInOut.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblInOut.setText("")
        self.lblInOut.setPixmap(QtGui.QPixmap(ROOT + "imgs/in_out.png"))
        self.lblInOut.setScaledContents(True)
        self.lblInOut.setObjectName("lblInOut")
        self.lblInOut.mousePressEvent = self.inout_operation
        self.lblInOut.setCursor(Qt.PointingHandCursor)

        # -----------  label New Item configuration  -----------
        self.lblNewItem = QtWidgets.QLabel(self.top_frame)
        self.lblNewItem.setGeometry(QtCore.QRect(795, 23, 78, 68))
        self.lblNewItem.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblNewItem.setText("")
        self.lblNewItem.setPixmap(QtGui.QPixmap(ROOT + "imgs/new_product.png"))
        self.lblNewItem.setScaledContents(True)
        self.lblNewItem.setObjectName("lblNewItem")
        self.lblNewItem.mousePressEvent = self.createNewItem
        self.lblNewItem.setCursor(Qt.PointingHandCursor)

        # -----------  label load table configuration  -----------
        self.lblLoadTable = QtWidgets.QLabel(self.top_frame)
        self.lblLoadTable.setGeometry(QtCore.QRect(890, 23, 101, 67))
        self.lblLoadTable.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblLoadTable.setText("")
        self.lblLoadTable.setPixmap(QtGui.QPixmap(ROOT + "imgs/load_.png"))
        self.lblLoadTable.setScaledContents(True)
        self.lblLoadTable.setObjectName("lblLoadTable")
        self.lblLoadTable.mousePressEvent = self.load_table
        self.lblLoadTable.setCursor(Qt.PointingHandCursor)


        # -----------  ware_table configuration  -----------
        self.ware_table = QtWidgets.QTableWidget(self)
        self.ware_table.setEditTriggers(QtWidgets.QTreeView.NoEditTriggers)
        self.ware_table.setGeometry(QtCore.QRect(0, 130, 1024, 450))
        self.ware_table.setMinimumHeight(100) ## esto se agrego
        self.ware_table.setObjectName("ware_table")
        self.ware_table.setColumnCount(7)
        item = QtWidgets.QTableWidgetItem()

        self.ware_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(6, item)

        self.ware_table.setColumnWidth(0,80)
        self.ware_table.setColumnWidth(1,120)
        self.ware_table.setColumnWidth(2,360)
        self.ware_table.setColumnWidth(3,167)
        self.ware_table.setColumnWidth(4,164)
        #self.ware_table.setColumnWidth(5,47)
        #self.ware_table.setColumnWidth(6,58)
        self.ware_table.horizontalHeader().setEnabled(False)
        self.ware_table.setSelectionBehavior(1)
        self.ware_table.setSelectionMode(1)
        self.ware_table.setStyleSheet("selection-background-color: rgb(0, 120, 255);selection-color: rgb(255, 255, 255);")
        self.ware_table.verticalHeader().hide()
        self.ware_table.viewport().installEventFilter(self)
        self.ware_table.keyPressEvent = self.KeyPressed
        self.ware_table.doubleClicked.connect(self.tableWidget_doubleClicked)

        # -----------  frame configuration  -----------
        self.frame = QtWidgets.QFrame(self)
        self.frame.setGeometry(QtCore.QRect(0, 100, 1024, 30))
        self.frame.setStyleSheet("background-color: rgb(57, 57, 57);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        # -----------  cmbSearch wares  -----------
        self.cmbWares = QtWidgets.QComboBox(self.frame)
        #self.cmbSearch.setGeometry(QtCore.QRect(20, 35, 101, 31))
        self.cmbWares.setGeometry(self.frame.width() - 68, 0, 68, 30)
        self.cmbWares.setStyleSheet("background-color: rgb(170, 255, 0);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.cmbWares.setFont(font)
        self.cmbWares.setObjectName("cmWares")
        self.cmbWares.currentIndexChanged.connect(self.onCurrentIndexChanged)
        self.cmbWares.clear()
        #Dentro de esta parte se carga los datos de cmbwares
        self.cmbWares.addItems(self.getRestWare())

        # -----------  frame configuration  -----------
        self.frame_2 = QtWidgets.QFrame(self)
        width_ = self.frameGeometry().width()
        height__ = self.frameGeometry().height()
        self.frame_2.setGeometry(QtCore.QRect(0, height__ - 188, 1024, 188))
        self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")

        # ----------- frame for image and price information  -----------
        self.boxPV = QtWidgets.QGroupBox(self.frame_2)
        self.boxPV.setGeometry(QtCore.QRect(30, 5, 359, 170))
        self.boxPV.setPalette(getPalette())
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.boxPV.setFont(font)
        self.boxPV.setObjectName("boxPV")

        # -----------  lblPVP configuration  -----------
        self.lblPVP = QtWidgets.QLabel("Precio de Venta:", self.boxPV)
        self.lblPVP.setGeometry(QtCore.QRect(160, 8, 170, 41))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lblPVP.setFont(font)
        self.lblPVP.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblPVP.setObjectName("lblPVP")

        # -----------  lblComboWarePrice configuration  -----------
        self.cmbWarePrice = QtWidgets.QComboBox(self.boxPV)
        self.cmbWarePrice.setGeometry(160, 46, 68, 30)
        self.cmbWarePrice.setStyleSheet("background-color: rgb(170, 255, 0);")
        # self.cmbWarePrice.setStyleSheet("background-color: rgb(255, 255, 255);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.cmbWarePrice.setFont(font)
        self.cmbWarePrice.setObjectName("cmbWarePrice")
        self.cmbWarePrice.currentIndexChanged.connect(self.onCmbWarePriceIndexChanged)
        self.cmbWarePrice.clear()
        #Dentro de esta parte se carga los datos de cmbWarePrice

        # -----------  lblValuePrice configuration  -----------
        self.lblValuePrice = QtWidgets.QLabel("S/.200.0",self.boxPV)
        self.lblValuePrice.setGeometry(QtCore.QRect(240, 36, 181, 50))
        self.lblValuePrice.setPalette(getPricePalette())
        self.lblValuePrice.setFont(getFontxPV())
        self.lblValuePrice.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblValuePrice.setObjectName("lblValuePrice")

        # -----------  lblPVP 2DA configuration  -----------
        self.lblPVP2 = QtWidgets.QLabel("PVP(2):",self.boxPV)
        self.lblPVP2.setGeometry(QtCore.QRect(160, 80, 65, 41))
        self.lblPVP2.setFont(getFontxSecond())
        self.lblPVP2.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblPVP2.setObjectName("lblPVP2")

        # -----------  lblValuePVP2 configuration  -----------
        self.lblValuePVP2 = QtWidgets.QLabel(self.boxPV)
        self.lblValuePVP2.setGeometry(QtCore.QRect(229, 75, 151, 50))
        self.lblValuePVP2.setPalette(getPricePalette2())
        self.lblValuePVP2.setFont(getFontxSecond())
        self.lblValuePVP2.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblValuePVP2.setObjectName("lblValuePVP2")

        # -----------  lblImg configuration  -----------
        self.lblImg = QtWidgets.QLabel(self.boxPV)
        self.lblImg.setGeometry(QtCore.QRect(12, 25, 128, 138))
        self.lblImg.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblImg.setObjectName("lblImg")

        # -----------  boton Editar Precio Venta  -----------
        self.btnLoadImage = QtWidgets.QPushButton(self.boxPV)
        self.btnLoadImage.setGeometry(QtCore.QRect(170, 122, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(70)
        self.btnLoadImage.setFont(font)
        self.btnLoadImage.setStyleSheet("background-color: rgb(240, 240, 240);")
        self.btnLoadImage.setObjectName("btnLoadImage")
        self.btnLoadImage.clicked.connect(self.loadImage)
        self.btnLoadImage.setCursor(Qt.PointingHandCursor)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        if(bool(self.ownUsers) or bool(self.currWare) or bool(self.restWares) or bool(self.WareProdDate)):
            _translate = QtCore.QCoreApplication.translate
            self.setWindowTitle(_translate("Dialog", "Genesis - [Museo del libro]"))
            self.search_box.setTitle(_translate("Dialog", "Cuadro de busqueda"))
            self.cmbSearch.setItemText(1, _translate("Dialog", "cod"))
            self.cmbSearch.setItemText(2, _translate("Dialog", "isbn"))
            self.cmbSearch.setItemText(3, _translate("Dialog", "titulo"))
            self.cmbSearch.setItemText(4, _translate("Dialog", "autor"))
            self.cmbSearch.setItemText(5, _translate("Dialog", "editorial"))

            font = QtGui.QFont()
            font.setFamily("Open Sans Semibold")
            font.setPointSize(10)
            font.setWeight(85)
            font.setBold(True)

            item = self.ware_table.horizontalHeaderItem(0)
            item.setText(_translate("Dialog", "cod"))
            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))
            item = self.ware_table.horizontalHeaderItem(1)
            item.setText(_translate("Dialog", "isbn"))
            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))
            item = self.ware_table.horizontalHeaderItem(2)
            item.setText(_translate("Dialog", "titulo"))
            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))
            item = self.ware_table.horizontalHeaderItem(3)
            item.setText(_translate("Dialog", "autor"))
            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))
            item = self.ware_table.horizontalHeaderItem(4)
            item.setText(_translate("Dialog", "editorial"))
            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))
            item = self.ware_table.horizontalHeaderItem(5)
            item.setText(_translate("Dialog", "[" + self.currWare.cod + "]"))
            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))
            item = self.ware_table.horizontalHeaderItem(6)

            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))

            #self.ware_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch) # metodo que setea ancho de columnas por igual
            # self.ware_table.horizontalHeader().setStretchLastSection(True) # metodo que setea que extienda solo la ultiam columna
            self.ware_table.horizontalHeader().setSectionResizeMode(5,QHeaderView.Stretch)
            self.ware_table.horizontalHeader().setSectionResizeMode(6, QHeaderView.Stretch)
            self.boxPV.setTitle(_translate("Dialog", "Cuadro de información"))
            self.btnLoadImage.setText(_translate("Dialog", "Cargar imagen"))


class ui_EditNewItemDialog(QtWidgets.QDialog):
    # Type: False: Edit , True: New
    def __init__(self, method: bool = False, parent=None):
        super(ui_EditNewItemDialog, self).__init__(parent)
        self.method = method
        self.code = ""
        self.title = ""
        # self.prevcurrentPlainText_ = ""
        self.returnedVal = (False, None)
        self.setupUi()

    def saveEvent(self, btnConfirmation: bool = False):
        # se cambia los keys de los diccionarios segun titulos de base de datos
        tmp_dict = {}
        self.returnedVal = (False, None)

        if btnConfirmation and not(self.method):
            if self.innerEditData["isbn"] != self.txtISBN.text(): tmp_dict["isbn"] = self.txtISBN.text().strip()
            if self.innerEditData["title"] != self.txtTitle.text() and bool(len(self.txtTitle.text().strip())):
                tmp_dict["name"] = self.txtTitle.text().strip()
            if self.innerEditData["autor"] != self.txtAutor.text() and bool(len(self.txtAutor.text().strip())):
                tmp_dict["autor"] = self.txtAutor.text().strip()
            if self.innerEditData["publisher"] != self.txtPublisher.text() and bool(len(self.txtPublisher.text().strip())):
                tmp_dict["editorial"] = self.txtPublisher.text().strip()

            if bool(len(tmp_dict)):
                self.returnedVal = (True, tmp_dict)
            else:
                QMessageBox.information(self, 'Mensaje', "No se efectuaron cambios o campos vacios.\n>Presione Ok, luego Cancelar", QMessageBox.Ok, QMessageBox.Ok)
                self.setDataFields()
                self.returnedVal = (False, None)

        elif btnConfirmation and self.method:
            tmp_dict["id"] = int(self.txtId.text().strip())
            if bool(len(self.txtTitle.text().strip())):
                tmp_dict["title"] = self.txtTitle.text().strip()
            if bool(len(self.txtAutor.text().strip())):
                tmp_dict["autor"] = self.txtAutor.text().strip()
            if bool(len(self.txtPublisher.text().strip())):
                tmp_dict["publisher"] = self.txtPublisher.text().strip()
            if bool(len(self.cmbItem.currentText().strip())):
                tmp_dict["idItem"] = self.dataItems[self.cmbItem.currentIndex()]

            if ("id" in tmp_dict) and ("title" in tmp_dict) and ("autor" in tmp_dict) and ("publisher" in tmp_dict) and ("idItem" in tmp_dict):
                if bool(len(self.txtISBN.text().strip())): tmp_dict["isbn"] = self.txtISBN.text().strip()
                if self.dateOutWidget.date().year() != 1752: tmp_dict["dateOut"] = self.dateOutWidget.date().toString("yyyy-MM-dd")
                if bool(self.editionSpinBox.value()): tmp_dict["edition"] = self.editionSpinBox.value()
                if bool(self.pagesSpinBox.value()): tmp_dict["pages"] = self.pagesSpinBox.value()
                if bool(self.cmbIdiom.currentText()): tmp_dict["idLanguage"] = self.dataLanguages[self.cmbIdiom.currentIndex()]
                if (self.cmbCover.currentIndex() >= 0): tmp_dict["cover"] = self.cmbCover.currentIndex()
                if bool(self.widthSpinBox.value()): tmp_dict["width"] = self.widthSpinBox.value()
                if bool(self.heightSpinBox.value()): tmp_dict["height"] = self.heightSpinBox.value()
                #aqui falta la parte de categorias, esto revisar arquitectura base de datos
                if bool(len(self.contentTxtEdit.toPlainText().strip())): tmp_dict["content"] = self.contentTxtEdit.toPlainText().strip()
                # if bool(self.spinInitStock.value()): tmp_dict["stock"] = self.spinInitStock.text().strip()
                self.returnedVal = (True, tmp_dict)

            else:
                QMessageBox.information(self, 'Mensaje', "Llenar los campos obligatorios (*)", QMessageBox.Ok, QMessageBox.Ok)
                self.returnedVal = (False, None)

        else:
            self.returnedVal = (False, None)

        self.submitclose() if self.returnedVal[0] else False

    def cleanInputFields(self, isInit: str = None):
        self.cmbItem.setEnabled(False)
        self.txtISBN.setReadOnly(True)
        self.txtTitle.setReadOnly(True)
        self.txtAutor.setReadOnly(True)
        self.txtPublisher.setReadOnly(True)
        self.spinInitStock.setReadOnly(True)
        self.dateOutWidget.setReadOnly(True)
        self.editionSpinBox.setReadOnly(True)
        self.pagesSpinBox.setReadOnly(True)
        self.widthSpinBox.setReadOnly(True)
        self.cmbIdiom.readonly = True
        self.cmbCover.readonly = True
        self.heightSpinBox.setReadOnly(True)
        self.cmbCategory1.readonly = True
        self.cmbCategory2.readonly = True
        self.cmbCategory3.readonly = True
        self.contentTxtEdit.setReadOnly(True)

        self.txtISBN.setPalette(self.darkPalette)
        self.txtTitle.setPalette(self.darkPalette)
        self.txtAutor.setPalette(self.darkPalette)
        self.txtPublisher.setPalette(self.darkPalette)

        self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
        self.editionSpinBox.setPalette(self.darkPalette)
        self.pagesSpinBox.setPalette(self.darkPalette)
        self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
        self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
        self.widthSpinBox.setPalette(self.darkPalette)
        self.heightSpinBox.setPalette(self.darkPalette)
        self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
        self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
        self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
        self.contentTxtEdit.setPalette(self.darkPalette)

        self.tab_compItemData.setEnabled(False)
        self.tab_compItemData.setEnabled(True)

        #isInit se utiliza cuando se hace cambio de tabs y no se quiere cambiar el index de los combos
        self.setInitDefaultValues() if bool(isInit) else False
    
    def setInitDefaultValues(self):
        #currentIndex 1 para item de tipo libro
        self.cmbItem.setCurrentIndex(1)
        self.cmbIdiom.setCurrentIndex(-1)
        self.cmbCover.setCurrentIndex(-1)
        self.cmbCategory1.setCurrentIndex(-1)
        self.cmbCategory2.setCurrentIndex(-1)
        self.cmbCategory3.setCurrentIndex(-1)
        # self.dateOutWidget.setStyleSheet("QDateEdit{background-color: red; color:white}")

    def closeEvent(self, event):
        self.saveEvent(False)

    def setDataFields(self, data: dict = None):
        #Si self.method : False (Metodo Editar) --- Si self.method : True (Metodo Metodo Nuevo Producto)
        #aqui es guardar el valor de data a variable prevData
        
        if bool(data): self.prevData = data

        if bool(self.prevData) and self.method:
            self.dataItems = data["items"]
            self.dataLanguages = data["languages"]
            self.txtId.setText(str(data["next"]))
            self.cmbItem.addItems(list(map(lambda x: x[1], data["items"])))
            self.cmbIdiom.addItems(list(map(lambda x: x[1], data["languages"])))
            self.cmbCategory1.setModel(QStringListModel(list(map(lambda x: x[1], data["category1"]))))
            self.cmbCategory1.setCurrentIndex(-1)
            self.cmbCategory1.setEditable(True)
            self.cmbCategory1.lineEdit().setPlaceholderText("NIVEL 1")
            self.cmbCategory2.setModel(QStringListModel(list(map(lambda x: x[1], data["category2"]))))
            self.cmbCategory2.setCurrentIndex(-1)
            self.cmbCategory2.setEditable(True)
            self.cmbCategory2.lineEdit().setPlaceholderText("NIVEL 2")
            self.cmbCategory3.setModel(QStringListModel(list(map(lambda x: x[1], data["category3"]))))
            self.cmbCategory3.setCurrentIndex(-1)
            self.cmbCategory3.setEditable(True)
            self.cmbCategory3.lineEdit().setPlaceholderText("NIVEL 3")
            self.setInitDefaultValues()

        elif bool(self.prevData) and not(self.method):
            self.innerEditData = self.prevData.copy()
            self.txtId.setText(self.innerEditData["cod"])
            self.txtISBN.setText(self.innerEditData["isbn"])
            self.txtTitle.setText(self.innerEditData["title"])
            self.txtAutor.setText(self.innerEditData["autor"])
            self.txtPublisher.setText(self.innerEditData["publisher"])
            
    def submitclose(self):
        self.accept()

    def txtEditSignal(self):
        cursor = self.contentTxtEdit.textCursor()
        length_ = len(self.contentTxtEdit.toPlainText())
        # print("initial cursor position: " + str(cursor.position()))
        # print("initial length: " + str(length_))
        if length_ < 601:
            self.prevcurrentPlainText_ = self.contentTxtEdit.toPlainText()
            positionCursor = cursor.position()
            self.contentTxtEdit.blockSignals(True)
            self.contentTxtEdit.setText(self.prevcurrentPlainText_)
            cursor = self.contentTxtEdit.textCursor()
            cursor.setPosition(positionCursor)
            self.contentTxtEdit.setTextCursor(cursor)
            self.contentTxtEdit.blockSignals(False)

            self.lblCaracterCount.setText("CHARACTERS: %d" % len(self.prevcurrentPlainText_))
            self.lblCaracterCount.adjustSize()

        elif length_ >= 601 and cursor.position() >= 600:
            positionCursor = cursor.position()
            self.contentTxtEdit.blockSignals(True)
            # self.contentTxtEdit.setText(self.prevcurrentPlainText_)
            self.contentTxtEdit.setText(self.contentTxtEdit.toPlainText()[:600])
            cursor = self.contentTxtEdit.textCursor()
            cursor.setPosition(positionCursor - 1) if positionCursor < 600 else cursor.setPosition(600)
            self.contentTxtEdit.setTextCursor(cursor)
            self.contentTxtEdit.blockSignals(False)
            self.lblCaracterCount.setText("CHARACTERS: %d" % len(self.contentTxtEdit.toPlainText()[:600]))
            self.lblCaracterCount.adjustSize()
            self.prevcurrentPlainText_ = self.contentTxtEdit.toPlainText()[:600]


        elif length_ >= 601 and cursor.position() < 600:
            positionCursor = cursor.position()
            self.contentTxtEdit.blockSignals(True)
            self.contentTxtEdit.setText(self.prevcurrentPlainText_)
            cursor = self.contentTxtEdit.textCursor()
            cursor.setPosition(positionCursor - 1)
            self.contentTxtEdit.setTextCursor(cursor)
            self.contentTxtEdit.blockSignals(False)

            # cursor = self.contentTxtEdit.textCursor()
            # cursor.movePosition(11)
            # self.contentTxtEdit.setTextCursor(cursor)
        #se puede guardar la position antigua de cursor y asignar a la nueva cuando el cursor esta menos de 600
        #cantidad de caracteres igual a 600 o 601

    def setupComplementary(self):
        x_offset = -35
        y_offset = 20
        
        # WARNING MESSAGE OF DATEOUT
        msgwrn = ">DEJAR EN 1752 SI NO DESEA AGREGAR FECHA DE PUBLICACIÓN"
        self.lblWarning_ = QLabel(msgwrn, self.tab_compItemData)
        self.lblWarning_.setGeometry(155 + x_offset, -10 + y_offset, 240,25)
        self.lblWarning_.setWordWrap(True)
        font = self.lblWarning_.font()
        font.setBold(True)
        font.setPointSize(7)
        self.lblWarning_.setFont(font)
        self.lblWarning_.setStyleSheet("QLabel{background-color: red; color:white}")

        # DATEOUT PART
        self.lblDateOut = QLabel("PUBLICACIÓN (AÑO): ",self.tab_compItemData)
        self.lblDateOut.adjustSize()
        self.lblDateOut.move(x_offset + 43, y_offset + 20)
        self.lblDateOut.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblDateOut.setStyleSheet("background-color: lightblue")
        

        # self.dateOutWidget = QDateEdit(QDate.currentDate(),self.tab_compItemData)
        self.dateOutWidget = MyDateEdit(self.tab_compItemData)
        self.dateOutWidget.setMaximumDate(QDate.currentDate().addYears(1))
        self.dateOutWidget.setDate(QDate(-2,1,1))
        self.dateOutWidget.move(x_offset + 155, y_offset + 16)
        self.dateOutWidget.setDisplayFormat("yyyy")
        self.dateOutWidget.setFixedWidth(240)
        font = self.dateOutWidget.font()
        font.setBold(True)
        self.dateOutWidget.setFont(font)
        self.dateOutWidget.dateChanged.connect(lambda x: self.dateOutWidget.setStyleSheet("QDateEdit{background-color: red; color:white}") if x.year() == 1752 else self.dateOutWidget.setStyleSheet("QDateEdit{background-color: white; color:default}"))
        self.dateOutWidget.clicked.connect(lambda: self.deactivateLineEdit("DateOut"))
        #aqui falta el activador del qdateedit
        
        #EDITION
        self.lblEdition = QLabel("N. EDICIÓN: ",self.tab_compItemData)
        self.lblEdition.adjustSize()
        self.lblEdition.move(x_offset + 86, y_offset + 40)
        self.lblEdition.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblEdition.setStyleSheet("background-color: lightblue")
        self.editionSpinBox = MySpinBox(self.tab_compItemData, minimum=0, maximum=99, value=0)
        self.editionSpinBox.move(x_offset + 155, y_offset + 37)
        self.editionSpinBox.setFixedWidth(240)
        self.editionSpinBox.clicked.connect(lambda: self.deactivateLineEdit("Edition"))
        
        #PAGES PART
        self.lblPages = QLabel("N. PÁGINAS: ",self.tab_compItemData)
        self.lblPages.adjustSize()
        self.lblPages.move(x_offset + 86, y_offset + 63)
        self.lblPages.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblPages.setStyleSheet("background-color: lightblue")
        self.pagesSpinBox = MySpinBox(self.tab_compItemData, minimum=0, maximum=9999, value=0)
        self.pagesSpinBox.move(x_offset + 155, y_offset + 60)
        self.pagesSpinBox.setFixedWidth(240)
        self.pagesSpinBox.clicked.connect(lambda: self.deactivateLineEdit("Pages"))

        # IDIOM PART
        self.lblIdiom = QLabel("IDIOMA: ",self.tab_compItemData)
        self.lblIdiom.adjustSize()
        self.lblIdiom.move(x_offset + 106, y_offset + 87)
        self.lblIdiom.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblIdiom.setStyleSheet("background-color: lightblue")
        self.cmbIdiom = MyComboBox_Pop(self.tab_compItemData)
        self.cmbIdiom.move(x_offset + 155, y_offset + 83)
        self.cmbIdiom.setFixedWidth(240)
        self.cmbIdiom.popupAboutToBeShown.connect(lambda: self.deactivateLineEdit("CmbIdiom"))

        # COVER PART
        self.lblCover = QLabel("CUBIERTA: ",self.tab_compItemData)
        self.lblCover.adjustSize()
        self.lblCover.move(x_offset + 94, y_offset + 109)
        self.lblCover.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblCover.setStyleSheet("background-color: lightblue")
        self.cmbCover = MyComboBox_Pop(self.tab_compItemData)
        self.cmbCover.setFixedWidth(240)
        self.cmbCover.popupAboutToBeShown.connect(lambda: self.deactivateLineEdit("CmbCover"))
        self.cmbCover.move(x_offset + 155, y_offset + 105)
        self.cmbCover.addItems(["BLANDA", "DURA"])

        # DIMENTIONS PART
        self.lblWidth = QLabel("ANCHO:", self.tab_compItemData)
        self.lblWidth.move(x_offset + 111, y_offset + 132)
        self.lblWidth.setStyleSheet("background-color: lightblue")
        self.widthSpinBox = MySpinBox(self.tab_compItemData, minimum=0, maximum=100, value=0, suffix=' cm')
        self.widthSpinBox.clicked.connect(lambda: self.deactivateLineEdit("Width"))
        self.widthSpinBox.move(x_offset + 155, y_offset + 128)
        self.widthSpinBox.setFixedWidth(99)

        self.lblHeight = QLabel("ALTO:", self.tab_compItemData)
        self.lblHeight.move(x_offset + 262, y_offset + 132)
        self.lblHeight.setStyleSheet("background-color: lightblue")
        self.heightSpinBox = MySpinBox(self.tab_compItemData, minimum=0, maximum=100, value=0, suffix=' cm')
        self.heightSpinBox.clicked.connect(lambda: self.deactivateLineEdit("Height"))
        self.heightSpinBox.move(x_offset + 296, y_offset + 128)
        self.heightSpinBox.setFixedWidth(99)
        
        # CATEGORY PART
        self.lblCategory = QLabel("CATEGORÍA:", self.tab_compItemData)
        self.lblCategory.move(x_offset + 38, y_offset + 155)
        self.lblCategory.setStyleSheet("background-color: lightblue")
        self.cmbCategory1 = MyComboBox_Pop(self.tab_compItemData)
        self.cmbCategory1.setFixedWidth(95)
        self.cmbCategory1.setFixedHeight(20)
        self.cmbCategory1.move(x_offset + 104, y_offset + 151)
        # self.cmbCategory1.setModel(QStringListModel([">SUPERACION PERSONAL", ">GASTRONOMIA", ">EDUCACION", ">LITERATURA"]))
        font = self.cmbCategory1.font()
        font.setPointSize(7)
        self.cmbCategory1.setFont(font)
        listView = QListView()
        listView.setWordWrap(True)
        self.cmbCategory1.setView(listView)
        # self.cmbCategory1.setEditable(True)
        # self.cmbCategory1.setCurrentIndex(-1)
        # self.cmbCategory1.lineEdit().setPlaceholderText("NIVEL 1")
        self.cmbCategory1.currentIndexChanged.connect(lambda x: self.cmbCategory1.setEditable(False))
        self.cmbCategory1.popupAboutToBeShown.connect(lambda: self.deactivateLineEdit("Category1"))
        self.cmbCategory1.setEnabled(False)

        self.cmbCategory2 = MyComboBox_Pop(self.tab_compItemData)
        self.cmbCategory2.setFixedWidth(95)
        self.cmbCategory2.setFixedHeight(20)
        self.cmbCategory2.move(x_offset + 202, y_offset + 151)
        # self.cmbCategory2.setModel(QStringListModel([">SUPERACION PERSONAL", ">GASTRONOMIA", ">EDUCACION", ">LITERATURA"]))
        font = self.cmbCategory2.font()
        font.setPointSize(7)
        self.cmbCategory2.setFont(font)
        listView = QListView()
        listView.setWordWrap(True)
        self.cmbCategory2.setView(listView)
        self.cmbCategory2.setEditable(True)
        # self.cmbCategory2.setCurrentIndex(-1)
        # self.cmbCategory2.lineEdit().setPlaceholderText("NIVEL 2")
        self.cmbCategory2.currentIndexChanged.connect(lambda x: self.cmbCategory2.setEditable(False))
        self.cmbCategory2.popupAboutToBeShown.connect(lambda: self.deactivateLineEdit("Category2"))
        self.cmbCategory2.setEnabled(False)

        self.cmbCategory3 = MyComboBox_Pop(self.tab_compItemData)
        self.cmbCategory3.setFixedWidth(95)
        self.cmbCategory3.setFixedHeight(20)
        self.cmbCategory3.move(x_offset + 300, y_offset + 151)
        # self.cmbCategory3.setModel(QStringListModel([">SUPERACION PERSONAL", ">GASTRONOMIA", ">EDUCACION", ">LITERATURA"]))
        font = self.cmbCategory3.font()
        font.setPointSize(7)
        self.cmbCategory3.setFont(font)
        listView = QListView()
        listView.setWordWrap(True)
        self.cmbCategory3.setView(listView)
        self.cmbCategory3.setEditable(True)
        # self.cmbCategory3.setCurrentIndex(-1)
        # self.cmbCategory3.lineEdit().setPlaceholderText("NIVEL 3")
        self.cmbCategory3.currentIndexChanged.connect(lambda x: self.cmbCategory3.setEditable(False))
        self.cmbCategory3.popupAboutToBeShown.connect(lambda: self.deactivateLineEdit("Category3"))
        self.cmbCategory3.setEnabled(False)

        # CONTENT PART
        self.lblContent = QLabel("RESUMEN:", self.tab_compItemData)
        self.lblContent.move(x_offset + 50, y_offset + 180)
        self.lblContent.setStyleSheet("background-color: lightblue")
        self.contentTxtEdit = MyQTextEdit(self.tab_compItemData)
        self.contentTxtEdit.move(x_offset + 105, y_offset + 180)
        self.contentTxtEdit.setFixedSize(290,65)
        self.contentTxtEdit.setAcceptRichText(False)
        self.contentTxtEdit.setTabChangesFocus(True)
        font = self.contentTxtEdit.font()
        font.setPointSize(8)
        self.contentTxtEdit.setFont(font)
        self.contentTxtEdit.textChanged.connect(self.txtEditSignal)
        self.contentTxtEdit.clicked.connect(lambda: self.deactivateLineEdit("TextEdit"))

        # LABEL CARACTER
        self.lblCaracterCount = QLabel("CHARACTERS: 0", self.tab_compItemData)
        # self.lblCaracterCount.setFixedWidth(82)
        self.lblCaracterCount.move(x_offset + 105, y_offset + 245)
        self.lblCaracterCount.setStyleSheet("QLabel{background-color: lightgreen;}")

        # LABEL MAX CARACTER
        self.lblMaxCarecter = QLabel("MAX: 600 CHAR", self.tab_compItemData)
        self.lblMaxCarecter.move(x_offset + 205, y_offset + 245)
        self.lblMaxCarecter.setStyleSheet("QLabel{background-color: red; color: white;}")
        font = QFont()
        font.setBold(True)
        self.lblMaxCarecter.setFont(font)

    def setupUi(self):
        x_offset = 10
        y_offset = 10

        self.resize(340, 300)
        self.setFixedSize(400, 358)
        self.setObjectName("ui_EditNewItemDialog")
        self.setWindowTitle("Editar producto") if not(self.method) else self.setWindowTitle("Registrar nuevo producto")

        self.main_layout = QGridLayout(self)
        self.setLayout(self.main_layout)

        self.tab_mainItemData = QWidget(self)
        self.tab_mainItemData.setFixedSize(360, 295)
        self.tab_mainItemData.move(0,0)
        self.tab_compItemData = QWidget(self)
        self.tab_compItemData.setFixedSize(370, 290)
        self.tab_compItemData.move(0,0)

        #create a tabWidget
        self.tabItem = QTabWidget(self)
        self.tabItem.addTab(self.tab_mainItemData, "Información principal")
        self.tabItem.addTab(self.tab_compItemData, "Información secundaria")
        self.tabItem.currentChanged.connect(lambda x: self.cleanInputFields())

        self.btnSave = QPushButton("Guardar", self)
        self.btnCancel = QPushButton("Cancelar", self)
        self.btnSave.clicked.connect(lambda: self.saveEvent(True))
        self.btnCancel.clicked.connect(lambda: self.submitclose())

        self.main_layout.addWidget(self.tabItem, 1, 0, alignment=Qt.AlignmentFlag.AlignLeft)
        self.main_layout.addWidget(self.btnSave, 2, 0, alignment=Qt.AlignmentFlag.AlignLeft)
        self.main_layout.addWidget(self.btnCancel,2, 0, alignment=Qt.AlignmentFlag.AlignJustify)
        self.setupComplementary()

        warning_text = ">¡No ingresar tildes ni caracteres especiales (,', \", ´,)!"

        self.lblWarning = QLabel(warning_text,self.tab_mainItemData)
        self.lblWarning.adjustSize()
        self.lblWarning.move(55 + x_offset, 15 + y_offset) if not(self.method) else self.lblWarning.move(60 + x_offset, 5 + y_offset)
        self.lblWarning.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblWarning.setStyleSheet("background-color: red")

        self.lblWarning = QLabel(">(*): Campos obligatorios",self.tab_mainItemData) if self.method else False
        if bool(self.lblWarning):
            self.lblWarning.adjustSize()
            self.lblWarning.move(60 + x_offset, 20 + y_offset)
            self.lblWarning.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
            self.lblWarning.setStyleSheet("background-color: red")

        self.lblId = QLabel("CÓDIGO:",self.tab_mainItemData) if not(self.method) else QLabel("CÓDIGO(*):",self.tab_mainItemData)
        self.lblId.adjustSize()
        self.lblId.move(43 + x_offset, 40 + y_offset) if not(self.method) else self.lblId.move(33 + x_offset, 40 + y_offset)
        self.lblId.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblId.setStyleSheet("background-color: lightgreen")
        self.txtId = MyLineEdit(self.tab_mainItemData)
        self.txtId.setFixedHeight(18)
        self.txtId.setFixedWidth(70)
        self.txtId.move(95 + x_offset, 37 + y_offset)
        self.txtId.setEnabled(False)
        self.defaultPalette = self.txtId.palette()  

        self.lblItem = QLabel("ITEM:",self.tab_mainItemData)
        self.lblItem.adjustSize()
        self.lblItem.move(175 + x_offset, 40 + y_offset) 
        self.lblItem.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblItem.setStyleSheet("background-color: lightgreen")

        self.cmbItem = MyComboBox_Pop(self.tab_mainItemData)
        self.cmbItem.setGeometry(210 + x_offset, 37 + y_offset, 115, 18)

        self.color = QColor(230,230,230)
        self.lblISBN = QLabel("ISBN:",self.tab_mainItemData)
        self.lblISBN.adjustSize()
        self.lblISBN.move(61 + x_offset, 60 + y_offset)
        self.lblISBN.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblISBN.setStyleSheet("background-color: lightblue")
        self.txtISBN = MyLineEdit(self.tab_mainItemData)
        self.txtISBN.setFixedHeight(18)
        self.txtISBN.setFixedWidth(230)
        self.txtISBN.move(95 + x_offset, 58 + y_offset)
        self.txtISBN.setReadOnly(True)
        palette = self.txtISBN.palette()
        palette.setColor(QtGui.QPalette.Base, self.color)
        self.txtISBN.setPalette(palette)
        self.txtISBN.clicked.connect(lambda: self.deactivateLineEdit("ISBN"))
        self.txtISBN.setMaxLength(15)

        self.lblTitle = QLabel("TÍTULO:",self.tab_mainItemData) if not(self.method) else QLabel("TÍTULO(*):",self.tab_mainItemData)
        self.lblTitle.adjustSize()
        self.lblTitle.move(48 + x_offset, 80 + y_offset) if not(self.method) else self.lblTitle.move(38 + x_offset, 80 + y_offset)
        self.lblTitle.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblTitle.setStyleSheet("background-color: lightblue")
        self.txtTitle = MyLineEdit(self.tab_mainItemData)
        self.txtTitle.setFixedHeight(18)
        self.txtTitle.setFixedWidth(230)
        self.txtTitle.move(95 + x_offset, 78 + y_offset)
        self.txtTitle.setReadOnly(True)
        palette = self.txtTitle.palette()
        palette.setColor(QtGui.QPalette.Base, self.color)
        self.darkPalette = palette
        self.txtTitle.setPalette(self.darkPalette)
        self.txtTitle.clicked.connect(lambda: self.deactivateLineEdit("Title"))
        self.txtTitle.setMaxLength(90)

        self.lblAutor = QLabel("AUTOR:",self.tab_mainItemData) if not(self.method) else QLabel("AUTOR(*):",self.tab_mainItemData)
        self.lblAutor.adjustSize()
        self.lblAutor.move(49 + x_offset, 100 + y_offset) if not(self.method) else self.lblAutor.move(39 + x_offset, 100 + y_offset)
        self.lblAutor.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblAutor.setStyleSheet("background-color: lightblue")
        self.txtAutor = MyLineEdit(self.tab_mainItemData)
        self.txtAutor.setFixedHeight(18)
        self.txtAutor.setFixedWidth(230)
        self.txtAutor.move(95 + x_offset, 98 + y_offset)
        self.txtAutor.setReadOnly(True)
        self.txtAutor.setPalette(self.darkPalette)
        self.txtAutor.clicked.connect(lambda: self.deactivateLineEdit("Autor"))
        self.txtAutor.setMaxLength(45)

        self.lblPublisher = QLabel("EDITORIAL:",self.tab_mainItemData) if not(self.method) else QLabel("EDITORIAL(*):",self.tab_mainItemData)
        self.lblPublisher.adjustSize()
        self.lblPublisher.move(31 + x_offset, 120 + y_offset) if not(self.method) else self.lblPublisher.move(21 + x_offset, 120 + y_offset)
        self.lblPublisher.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblPublisher.setStyleSheet("background-color: lightblue")
        self.txtPublisher = MyLineEdit(self.tab_mainItemData)
        self.txtPublisher.setFixedHeight(18)
        self.txtPublisher.setFixedWidth(230)
        self.txtPublisher.move(95 + x_offset, 118 + y_offset)
        self.txtPublisher.setReadOnly(True)
        self.txtPublisher.setPalette(self.darkPalette)
        self.txtPublisher.clicked.connect(lambda: self.deactivateLineEdit("Publisher"))
        self.txtPublisher.setMaxLength(45)

        # self.lblPrice = QLabel("PRECIO:",self.tab_mainItemData) if not(self.method) else QLabel("PRECIO(*):",self.tab_mainItemData)
        # self.lblPrice.adjustSize()
        # self.lblPrice.move(47 + x_offset, 140 + y_offset) if not(self.method) else self.lblPrice.move(37 + x_offset, 140 + y_offset)
        # self.lblPrice.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        # self.lblPrice.setStyleSheet("background-color: lightblue")
        # self.txtPrice = MyLineEdit(self.tab_mainItemData)
        # self.txtPrice.setPlaceholderText("Ingresar solo numeros")
        # self.txtPrice.setFixedHeight(18)
        # self.txtPrice.setFixedWidth(230)
        # self.txtPrice.move(95 + x_offset, 138 + y_offset)
        # self.txtPrice.setReadOnly(True)
        # self.txtPrice.setPalette(self.darkPalette)
        # self.txtPrice.clicked.connect(lambda: self.deactivateLineEdit("Price"))
        # self.txtPrice.setMaxLength(30)

        self.lblInitStock = QLabel("STOCK INGRESO:",self.tab_mainItemData)
        self.lblInitStock.adjustSize()
        self.lblInitStock.move(5 + x_offset, 241 + y_offset)
        self.lblInitStock.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.lblInitStock.setStyleSheet("background-color: lightblue")
        self.spinInitStock = MySpinBox(self.tab_mainItemData)
        self.spinInitStock.setGeometry(100 + x_offset, 100 + y_offset, 50, 20)
        self.spinInitStock.move(95 + x_offset, 237 + y_offset)
        self.spinInitStock.setReadOnly(True)
        self.spinInitStock.setPalette(self.darkPalette)
        self.spinInitStock.setEnabled(False) if not(self.method) else self.spinInitStock.setEnabled(True)
        # self.spinInitStock.clicked.connect(lambda: self.deactivateLineEdit("Stock"))
        self.spinInitStock.setEnabled(False)


        # LABEL BOTTOM IMAGE
        self.lblImage_ = QLabel(self.tab_mainItemData)
        self.lblImage_.setGeometry(QtCore.QRect(105 + x_offset, 141 + y_offset, 175, 91))
        self.lblImage_.setText("")
        # self.lblImage_.setStyleSheet("QLabel{background-color: red;}")
        pixMap = QtGui.QPixmap("C:/Users/IROJAS/Desktop/Genesis/genesis-system-admin/imgs/newBook.png")
        # pixMap = pixMap.scaled(600, 600, QtCore.Qt.IgnoreAspectRatio)
        self.lblImage_.setPixmap(pixMap)
        self.lblImage_.setScaledContents(True)

        # self.btnCancel = QPushButton('Cancelar', self)
        # self.btnCancel.adjustSize()
        # self.btnCancel.move(190, 185)
        # self.btnCancel.clicked.connect(lambda: self.submitclose())

        # self.btnOk = QPushButton(self)
        # self.btnOk.setText("Editar") if not(self.method) else self.btnOk.setText("Registrar")
        # self.btnOk.adjustSize()
        # self.btnOk.move(80, 185)
        # self.btnOk.clicked.connect(lambda: self.saveEvent(True))

    def deactivateLineEdit(self, widget: str = ""):
        if bool(widget):
            if widget == "ISBN":
                self.txtISBN.setReadOnly(False)
                self.txtISBN.setPalette(self.defaultPalette)

                #palette_
                # self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                # self.pagesSpinBox.setPalette(self.darkPalette)
                # self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.widthSpinBox.setPalette(self.darkPalette)
                # self.heightSpinBox.setPalette(self.darkPalette)
                # self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.contentTxtEdit.setPalette(self.darkPalette)

                self.txtTitle.setPalette(self.darkPalette)
                self.txtAutor.setPalette(self.darkPalette)
                self.txtPublisher.setPalette(self.darkPalette)
                self.spinInitStock.setPalette(self.darkPalette)

                #readonly_
                # self.dateOutWidget.setReadOnly(True)
                # self.pagesSpinBox.setReadOnly(True)
                # self.widthSpinBox.setReadOnly(True)
                # self.cmbIdiom.readonly = True
                # self.cmbCover.readonly = True
                # self.heightSpinBox.setReadOnly(True)
                # self.cmbCategory1.readonly = True
                # self.cmbCategory2.readonly = True
                # self.cmbCategory3.readonly = True
                # self.contentTxtEdit.setReadOnly(True)
                self.txtTitle.setReadOnly(True)
                self.txtAutor.setReadOnly(True)
                self.txtPublisher.setReadOnly(True)
                self.spinInitStock.setReadOnly(True)

            elif widget == "Title":
                self.txtTitle.setReadOnly(False)
                self.txtTitle.setPalette(self.defaultPalette)

                #palette_
                # self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                # self.pagesSpinBox.setPalette(self.darkPalette)
                # self.widthSpinBox.setPalette(self.darkPalette)
                # self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.heightSpinBox.setPalette(self.darkPalette)
                # self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.contentTxtEdit.setPalette(self.darkPalette)
                self.txtISBN.setPalette(self.darkPalette)
                self.txtAutor.setPalette(self.darkPalette)
                self.txtPublisher.setPalette(self.darkPalette)
                self.spinInitStock.setPalette(self.darkPalette)

                #readonly_
                # self.dateOutWidget.setReadOnly(True)
                # self.pagesSpinBox.setReadOnly(True)
                # self.widthSpinBox.setReadOnly(True)
                # self.cmbIdiom.readonly = True
                # self.cmbCover.readonly = True
                # self.heightSpinBox.setReadOnly(True)
                # self.cmbCategory1.readonly = True
                # self.cmbCategory2.readonly = True
                # self.cmbCategory3.readonly = True
                # self.contentTxtEdit.setReadOnly(True)
                self.txtISBN.setReadOnly(True)
                self.txtAutor.setReadOnly(True)
                self.txtPublisher.setReadOnly(True)
                self.spinInitStock.setReadOnly(True)

            elif widget == "Autor":
                self.txtAutor.setReadOnly(False)
                self.txtAutor.setPalette(self.defaultPalette)

                #palette_
                # self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                # self.pagesSpinBox.setPalette(self.darkPalette)
                # self.widthSpinBox.setPalette(self.darkPalette)
                # self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.heightSpinBox.setPalette(self.darkPalette)
                # self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.contentTxtEdit.setPalette(self.darkPalette)
                self.txtISBN.setPalette(self.darkPalette)
                self.txtTitle.setPalette(self.darkPalette)
                self.txtPublisher.setPalette(self.darkPalette)
                self.spinInitStock.setPalette(self.darkPalette)

                #readonly_
                # self.dateOutWidget.setReadOnly(True)
                # self.pagesSpinBox.setReadOnly(True)
                # self.widthSpinBox.setReadOnly(True)
                # self.cmbIdiom.readonly = True
                # self.cmbCover.readonly = True
                # self.heightSpinBox.setReadOnly(True)
                # self.cmbCategory1.readonly = True
                # self.cmbCategory2.readonly = True
                # self.cmbCategory3.readonly = True
                # self.contentTxtEdit.setReadOnly(True)
                self.txtISBN.setReadOnly(True)
                self.txtTitle.setReadOnly(True)
                self.txtPublisher.setReadOnly(True)
                self.spinInitStock.setReadOnly(True)

            elif widget == "Publisher":
                self.txtPublisher.setReadOnly(False)
                self.txtPublisher.setPalette(self.defaultPalette)

                #palette_
                # self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                # self.pagesSpinBox.setPalette(self.darkPalette)
                # self.widthSpinBox.setPalette(self.darkPalette)
                # self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.heightSpinBox.setPalette(self.darkPalette)
                # self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.contentTxtEdit.setPalette(self.darkPalette)
                self.txtISBN.setPalette(self.darkPalette)
                self.txtTitle.setPalette(self.darkPalette)
                self.txtAutor.setPalette(self.darkPalette)
                self.spinInitStock.setPalette(self.darkPalette)
                

                #readonly_
                # self.dateOutWidget.setReadOnly(True)
                # self.pagesSpinBox.setReadOnly(True)
                # self.widthSpinBox.setReadOnly(True)
                # self.cmbIdiom.readonly = True
                # self.cmbCover.readonly = True
                # self.heightSpinBox.setReadOnly(True)
                # self.cmbCategory1.readonly = True
                # self.cmbCategory2.readonly = True
                # self.cmbCategory3.readonly = True
                # self.contentTxtEdit.setReadOnly(True)
                self.txtISBN.setReadOnly(True)
                self.txtTitle.setReadOnly(True)
                self.txtAutor.setReadOnly(True)
                self.spinInitStock.setReadOnly(True)

            elif widget == "Stock":
                self.spinInitStock.setReadOnly(False)
                self.spinInitStock.setPalette(self.defaultPalette)

                #palette_
                # self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                # self.pagesSpinBox.setPalette(self.darkPalette)
                # self.widthSpinBox.setPalette(self.darkPalette)
                # self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.heightSpinBox.setPalette(self.darkPalette)
                # self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.contentTxtEdit.setPalette(self.darkPalette)
                # self.txtPrice.setPalette(self.darkPalette)
                self.txtISBN.setPalette(self.darkPalette)
                self.txtTitle.setPalette(self.darkPalette)
                self.txtAutor.setPalette(self.darkPalette)
                self.txtPublisher.setPalette(self.darkPalette)

                #readonly_
                # self.dateOutWidget.setReadOnly(True)
                # self.pagesSpinBox.setReadOnly(True)
                # self.widthSpinBox.setReadOnly(True)
                # self.cmbIdiom.readonly = True
                # self.cmbCover.readonly = True
                # self.heightSpinBox.setReadOnly(True)
                # self.cmbCategory1.readonly = True
                # self.cmbCategory2.readonly = True
                # self.cmbCategory3.readonly = True
                # self.contentTxtEdit.setReadOnly(True)
                self.txtISBN.setReadOnly(True)
                self.txtTitle.setReadOnly(True)
                self.txtAutor.setReadOnly(True)
                self.txtPublisher.setReadOnly(True)

            elif widget == "DateOut":
                self.dateOutWidget.setReadOnly(False)
                self.dateOutWidget.setPalette(self.defaultPalette)
                #style
                self.pagesSpinBox.setPalette(self.darkPalette)
                self.editionSpinBox.setPalette(self.darkPalette)
                self.widthSpinBox.setPalette(self.darkPalette)
                self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.heightSpinBox.setPalette(self.darkPalette)
                self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.contentTxtEdit.setPalette(self.darkPalette)
                # self.txtISBN.setPalette(self.darkPalette)
                # self.txtTitle.setPalette(self.darkPalette)
                # self.txtAutor.setPalette(self.darkPalette)
                # # self.txtPrice.setPalette(self.darkPalette)
                # self.spinInitStock.setPalette(self.darkPalette)
                # self.txtPublisher.setPalette(self.darkPalette)

                #readonly
                
                self.pagesSpinBox.setReadOnly(True)
                self.editionSpinBox.setReadOnly(True)
                self.widthSpinBox.setReadOnly(True)
                self.cmbIdiom.readonly = True
                self.cmbCover.readonly = True
                self.heightSpinBox.setReadOnly(True)
                self.cmbCategory1.readonly = True
                self.cmbCategory2.readonly = True
                self.cmbCategory3.readonly = True
                self.contentTxtEdit.setReadOnly(True)
                # self.txtISBN.setReadOnly(True)
                # self.txtTitle.setReadOnly(True)
                # self.txtAutor.setReadOnly(True)
                # # self.txtPrice.setReadOnly(True)
                # self.spinInitStock.setReadOnly(True)
                # self.txtPublisher.setReadOnly(True)

            elif widget == "Edition":
                self.editionSpinBox.setReadOnly(False)
                self.editionSpinBox.setPalette(self.defaultPalette)
                #style
                self.pagesSpinBox.setPalette(self.darkPalette)
                self.widthSpinBox.setPalette(self.darkPalette)
                self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.heightSpinBox.setPalette(self.darkPalette)
                self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.contentTxtEdit.setPalette(self.darkPalette)

                #readonly
                self.dateOutWidget.setReadOnly(True)
                self.pagesSpinBox.setReadOnly(True)
                self.widthSpinBox.setReadOnly(True)
                self.cmbIdiom.readonly = True
                self.cmbCover.readonly = True
                self.heightSpinBox.setReadOnly(True)
                self.cmbCategory1.readonly = True
                self.cmbCategory2.readonly = True
                self.cmbCategory3.readonly = True
                self.contentTxtEdit.setReadOnly(True)

            elif widget == "Pages":
                self.pagesSpinBox.setReadOnly(False)
                self.pagesSpinBox.setPalette(self.defaultPalette)
                #style
                self.editionSpinBox.setPalette(self.darkPalette)
                self.widthSpinBox.setPalette(self.darkPalette)
                self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.heightSpinBox.setPalette(self.darkPalette)
                self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.contentTxtEdit.setPalette(self.darkPalette)
                # self.txtISBN.setPalette(self.darkPalette)
                # self.txtTitle.setPalette(self.darkPalette)
                # self.txtAutor.setPalette(self.darkPalette)
                # # self.txtPrice.setPalette(self.darkPalette)
                # self.spinInitStock.setPalette(self.darkPalette)
                # self.txtPublisher.setPalette(self.darkPalette)

                #readonly
                self.dateOutWidget.setReadOnly(True)
                self.widthSpinBox.setReadOnly(True)
                self.cmbIdiom.readonly = True
                self.cmbCover.readonly = True
                self.heightSpinBox.setReadOnly(True)
                self.cmbCategory1.readonly = True
                self.cmbCategory2.readonly = True
                self.cmbCategory3.readonly = True
                self.contentTxtEdit.setReadOnly(True)
                # self.txtISBN.setReadOnly(True)
                # self.txtTitle.setReadOnly(True)
                # self.txtAutor.setReadOnly(True)
                # # self.txtPrice.setReadOnly(True)
                # self.spinInitStock.setReadOnly(True)
                # self.txtPublisher.setReadOnly(True)

            elif widget == "CmbIdiom":
                self.cmbIdiom.readonly = False
                self.cmbIdiom.setStyleSheet("QComboBox{background-color: white;}")

                #style
                self.pagesSpinBox.setPalette(self.darkPalette)
                self.editionSpinBox.setPalette(self.darkPalette)
                self.widthSpinBox.setPalette(self.darkPalette)
                self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.heightSpinBox.setPalette(self.darkPalette)
                self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.contentTxtEdit.setPalette(self.darkPalette)
                # self.txtISBN.setPalette(self.darkPalette)
                # self.txtTitle.setPalette(self.darkPalette)
                # self.txtAutor.setPalette(self.darkPalette)
                # # self.txtPrice.setPalette(self.darkPalette)
                # self.spinInitStock.setPalette(self.darkPalette)
                # self.txtPublisher.setPalette(self.darkPalette)
                
                #readonly
                self.dateOutWidget.setReadOnly(True)
                self.pagesSpinBox.setReadOnly(True)
                self.editionSpinBox.setReadOnly(True)
                self.widthSpinBox.setReadOnly(True)
                self.cmbCover.readonly = True
                self.heightSpinBox.setReadOnly(True)
                self.cmbCategory1.readonly = True
                self.cmbCategory2.readonly = True
                self.cmbCategory3.readonly = True
                self.contentTxtEdit.setReadOnly(True)
                # self.txtISBN.setReadOnly(True)
                # self.txtTitle.setReadOnly(True)
                # self.txtAutor.setReadOnly(True)
                # # self.txtPrice.setReadOnly(True)
                # self.spinInitStock.setReadOnly(True)
                # self.txtPublisher.setReadOnly(True)
                
            
            elif widget == "CmbCover":
                self.cmbCover.readonly = False
                self.cmbCover.setStyleSheet("QComboBox{background-color: white;}")
                
                #style
                self.pagesSpinBox.setPalette(self.darkPalette)
                self.editionSpinBox.setPalette(self.darkPalette)
                self.widthSpinBox.setPalette(self.darkPalette)
                self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230, 230, 230);}")
                self.heightSpinBox.setPalette(self.darkPalette)
                self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.contentTxtEdit.setPalette(self.darkPalette)
                # self.txtISBN.setPalette(self.darkPalette)
                # self.txtTitle.setPalette(self.darkPalette)
                # self.txtAutor.setPalette(self.darkPalette)
                # # self.txtPrice.setPalette(self.darkPalette)
                # self.spinInitStock.setPalette(self.darkPalette)
                # self.txtPublisher.setPalette(self.darkPalette)
                
                #readonly                
                self.dateOutWidget.setReadOnly(True)
                self.pagesSpinBox.setReadOnly(True)
                self.editionSpinBox.setReadOnly(True)
                self.widthSpinBox.setReadOnly(True)
                self.cmbIdiom.readonly = True
                self.heightSpinBox.setReadOnly(True)
                self.cmbCategory1.readonly = True
                self.cmbCategory2.readonly = True
                self.cmbCategory3.readonly = True
                self.contentTxtEdit.setReadOnly(True)
                # self.txtISBN.setReadOnly(True)
                # self.txtTitle.setReadOnly(True)
                # self.txtAutor.setReadOnly(True)
                # # self.txtPrice.setReadOnly(True)
                # self.spinInitStock.setReadOnly(True)
                # self.txtPublisher.setReadOnly(True)
            
            elif widget == "Width":
                self.widthSpinBox.setReadOnly(False)
                self.widthSpinBox.setPalette(self.defaultPalette)

                #style
                self.pagesSpinBox.setPalette(self.darkPalette)
                self.editionSpinBox.setPalette(self.darkPalette)
                self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.heightSpinBox.setPalette(self.darkPalette)
                self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.contentTxtEdit.setPalette(self.darkPalette)
                # self.txtISBN.setPalette(self.darkPalette)
                # self.txtTitle.setPalette(self.darkPalette)
                # self.txtAutor.setPalette(self.darkPalette)
                # # self.txtPrice.setPalette(self.darkPalette)
                # self.spinInitStock.setPalette(self.darkPalette)
                # self.txtPublisher.setPalette(self.darkPalette)

                #readonly
                self.dateOutWidget.setReadOnly(True)
                self.pagesSpinBox.setReadOnly(True)
                self.editionSpinBox.setReadOnly(True)
                self.cmbIdiom.readonly = True
                self.cmbCover.readonly = True
                self.heightSpinBox.setReadOnly(True)
                self.cmbCategory1.readonly = True
                self.cmbCategory2.readonly = True
                self.cmbCategory3.readonly = True
                self.contentTxtEdit.setReadOnly(True)
                # self.txtISBN.setReadOnly(True)
                # self.txtTitle.setReadOnly(True)
                # self.txtAutor.setReadOnly(True)
                # # self.txtPrice.setReadOnly(True)
                # self.spinInitStock.setReadOnly(True)
                # self.txtPublisher.setReadOnly(True)


            elif widget == "Height":
                self.heightSpinBox.setReadOnly(False)
                self.heightSpinBox.setPalette(self.defaultPalette)

                #style
                self.editionSpinBox.setPalette(self.darkPalette)
                self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                self.pagesSpinBox.setPalette(self.darkPalette)
                self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.widthSpinBox.setPalette(self.darkPalette)
                self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.contentTxtEdit.setPalette(self.darkPalette)
                # self.txtISBN.setPalette(self.darkPalette)
                # self.txtTitle.setPalette(self.darkPalette)
                # self.txtAutor.setPalette(self.darkPalette)
                # # self.txtPrice.setPalette(self.darkPalette)
                # self.spinInitStock.setPalette(self.darkPalette)
                # self.txtPublisher.setPalette(self.darkPalette)

                #readonly
                self.dateOutWidget.setReadOnly(True)
                self.pagesSpinBox.setReadOnly(True)
                self.editionSpinBox.setReadOnly(True)
                self.cmbIdiom.readonly = True
                self.cmbCover.readonly = True
                self.widthSpinBox.setReadOnly(True)
                self.cmbCategory1.readonly = True
                self.cmbCategory2.readonly = True
                self.cmbCategory3.readonly = True
                self.contentTxtEdit.setReadOnly(True)
                # self.txtISBN.setReadOnly(True)
                # self.txtTitle.setReadOnly(True)
                # self.txtAutor.setReadOnly(True)
                # # self.txtPrice.setReadOnly(True)
                # self.spinInitStock.setReadOnly(True)
                # self.txtPublisher.setReadOnly(True)

            elif widget == "Category1":
                self.cmbCategory1.readonly = False
                self.cmbCategory1.setStyleSheet("QComboBox{background-color: white;}")

                #style
                self.editionSpinBox.setPalette(self.darkPalette)
                self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                self.pagesSpinBox.setPalette(self.darkPalette)
                self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.widthSpinBox.setPalette(self.darkPalette)
                self.heightSpinBox.setPalette(self.darkPalette)
                self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.contentTxtEdit.setPalette(self.darkPalette)
                # self.txtISBN.setPalette(self.darkPalette)
                # self.txtTitle.setPalette(self.darkPalette)
                # self.txtAutor.setPalette(self.darkPalette)
                # # self.txtPrice.setPalette(self.darkPalette)
                # self.spinInitStock.setPalette(self.darkPalette)
                # self.txtPublisher.setPalette(self.darkPalette)

                #readonly
                self.dateOutWidget.setReadOnly(True)
                self.pagesSpinBox.setReadOnly(True)
                self.editionSpinBox.setReadOnly(True)
                self.cmbIdiom.readonly = True
                self.cmbCover.readonly = True
                self.widthSpinBox.setReadOnly(True)
                self.heightSpinBox.setReadOnly(True)
                self.cmbCategory2.readonly = True
                self.cmbCategory3.readonly = True
                self.contentTxtEdit.setReadOnly(True)
                # self.txtISBN.setReadOnly(True)
                # self.txtTitle.setReadOnly(True)
                # self.txtAutor.setReadOnly(True)
                # # self.txtPrice.setReadOnly(True)
                # self.spinInitStock.setReadOnly(True)
                # self.txtPublisher.setReadOnly(True)
            
            elif widget == "Category2":
                self.cmbCategory2.readonly = False
                self.cmbCategory2.setStyleSheet("QComboBox{background-color: white;}")

                #style
                self.editionSpinBox.setPalette(self.darkPalette)
                self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                self.pagesSpinBox.setPalette(self.darkPalette)
                self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.widthSpinBox.setPalette(self.darkPalette)
                self.heightSpinBox.setPalette(self.darkPalette)
                self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.contentTxtEdit.setPalette(self.darkPalette)
                # self.txtISBN.setPalette(self.darkPalette)
                # self.txtTitle.setPalette(self.darkPalette)
                # self.txtAutor.setPalette(self.darkPalette)
                # # self.txtPrice.setPalette(self.darkPalette)
                # self.spinInitStock.setPalette(self.darkPalette)
                # self.txtPublisher.setPalette(self.darkPalette)

                #readonly
                self.dateOutWidget.setReadOnly(True)
                self.pagesSpinBox.setReadOnly(True)
                self.editionSpinBox.setReadOnly(True)
                self.cmbIdiom.readonly = True
                self.cmbCover.readonly = True
                self.widthSpinBox.setReadOnly(True)
                self.heightSpinBox.setReadOnly(True)
                self.cmbCategory1.readonly = True
                self.cmbCategory3.readonly = True
                self.contentTxtEdit.setReadOnly(True)
                # self.txtISBN.setReadOnly(True)
                # self.txtTitle.setReadOnly(True)
                # self.txtAutor.setReadOnly(True)
                # # self.txtPrice.setReadOnly(True)
                # self.spinInitStock.setReadOnly(True)
                # self.txtPublisher.setReadOnly(True)
            
            elif widget == "Category3":
                self.cmbCategory3.readonly = False
                self.cmbCategory3.setStyleSheet("QComboBox{background-color: white;}")

                #style
                self.editionSpinBox.setPalette(self.darkPalette)
                self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                self.pagesSpinBox.setPalette(self.darkPalette)
                self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.widthSpinBox.setPalette(self.darkPalette)
                self.heightSpinBox.setPalette(self.darkPalette)
                self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.contentTxtEdit.setPalette(self.darkPalette)
                # self.txtISBN.setPalette(self.darkPalette)
                # self.txtTitle.setPalette(self.darkPalette)
                # self.txtAutor.setPalette(self.darkPalette)
                # # self.txtPrice.setPalette(self.darkPalette)
                # self.spinInitStock.setPalette(self.darkPalette)
                # self.txtPublisher.setPalette(self.darkPalette)

                #readonly
                self.dateOutWidget.setReadOnly(True)
                self.pagesSpinBox.setReadOnly(True)
                self.editionSpinBox.setReadOnly(True)
                self.cmbIdiom.readonly = True
                self.cmbCover.readonly = True
                self.widthSpinBox.setReadOnly(True)
                self.heightSpinBox.setReadOnly(True)
                self.cmbCategory1.readonly = True
                self.cmbCategory2.readonly = True
                self.contentTxtEdit.setReadOnly(True)
                # self.txtISBN.setReadOnly(True)
                # self.txtTitle.setReadOnly(True)
                # self.txtAutor.setReadOnly(True)
                # # self.txtPrice.setReadOnly(True)
                # self.spinInitStock.setReadOnly(True)
                # self.txtPublisher.setReadOnly(True)

            elif widget == "TextEdit":
                self.contentTxtEdit.setReadOnly(False)
                self.contentTxtEdit.setPalette(self.defaultPalette)

                # style
                self.editionSpinBox.setPalette(self.darkPalette)
                self.dateOutWidget.setStyleSheet("QDateEdit{background-color: rgb(230,230,230);}")
                self.pagesSpinBox.setPalette(self.darkPalette)
                self.cmbIdiom.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCover.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.widthSpinBox.setPalette(self.darkPalette)
                self.heightSpinBox.setPalette(self.darkPalette)
                self.cmbCategory1.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory2.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                self.cmbCategory3.setStyleSheet("QComboBox{background-color: rgb(230,230,230);}")
                # self.txtISBN.setPalette(self.darkPalette)
                # self.txtTitle.setPalette(self.darkPalette)
                # self.txtAutor.setPalette(self.darkPalette)
                # # self.txtPrice.setPalette(self.darkPalette)
                # self.spinInitStock.setPalette(self.darkPalette)
                # self.txtPublisher.setPalette(self.darkPalette)

                #readonly
                self.dateOutWidget.setReadOnly(True)
                self.pagesSpinBox.setReadOnly(True)
                self.editionSpinBox.setReadOnly(True)
                self.cmbIdiom.readonly = True
                self.cmbCover.readonly = True
                self.widthSpinBox.setReadOnly(True)
                self.heightSpinBox.setReadOnly(True)
                self.cmbCategory1.readonly = True
                self.cmbCategory2.readonly = True
                self.cmbCategory3.readonly = True
                # self.txtISBN.setReadOnly(True)
                # self.txtTitle.setReadOnly(True)
                # self.txtAutor.setReadOnly(True)
                # # self.txtPrice.setReadOnly(True)
                # self.spinInitStock.setReadOnly(True)
                # self.txtPublisher.setReadOnly(True)

    def show_window(self):
       self.show()




class MySpinBox(QSpinBox):
    clicked = pyqtSignal()
    def mousePressEvent(self, event):
        self.clicked.emit()
        QSpinBox.mousePressEvent(self, event)

class MyDateEdit(QDateEdit):
    clicked = pyqtSignal()
    def mousePressEvent(self, event):
        self.clicked.emit()
        QDateEdit.mousePressEvent(self, event)

class MyComboBox(QComboBox):
    clicked = QtCore.pyqtSignal()
    def mousePressEvent(self, event):
        self.clicked.emit()
        MyComboBox.mousePressEvent(self, event)

    
class MyComboBox_Pop(QComboBox):
    popupAboutToBeShown  = QtCore.pyqtSignal()

    def __init__(self, parent) -> None:
        QComboBox.__init__(self, parent)
        self.readonly = False

    def showPopup(self) -> None:
        self.popupAboutToBeShown.emit()
        return super(MyComboBox_Pop, self).showPopup()
    
    def mousePressEvent(self, e: QMouseEvent) -> None:
        self.readonly = False
        if not self.readonly:
            QComboBox.mousePressEvent(self, e)

    def keyPressEvent(self, e: QKeyEvent) -> None:
        if not self.readonly:
            QComboBox.keyPressEvent(self, e)
    
    def wheelEvent(self, e: QWheelEvent) -> None:
        if not self.readonly:
            QComboBox.wheelEvent(self,e)

class MyLineEdit(QLineEdit):
    clicked = pyqtSignal()
    def mousePressEvent(self, event):
        self.clicked.emit()
        QLineEdit.mousePressEvent(self, event)
        self.textChanged.connect(self.text_changed)

    def removeAccents(self, txt: str = ""):
        return ''.join(c for c in unicodedata.normalize('NFD', txt)
                  if unicodedata.category(c) != 'Mn')

    def text_changed(self):
        if self.text().isupper():
            # cursor = self.cursorPosition()
            # self.setText(self.removeAccents(self.text().upper()))
            # self.setCursorPosition(cursor)
            return
        else:
            cursor = self.cursorPosition()
            self.setText(self.text().upper())
            self.setCursorPosition(cursor)

class MyQTextEdit(QTextEdit):
    clicked = pyqtSignal()
    def mousePressEvent(self, event):
        self.clicked.emit()
        QTextEdit.mousePressEvent(self, event)
        # self.textChanged.connect(self.text_changed)
    
    def keyPressEvent(self, e: QKeyEvent) -> None:
        if e.key() in (Qt.Key_Return, Qt.Key_Enter):
            return
        return super().keyPressEvent(e)

class ui_CustomChangeLocation(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(ui_CustomChangeLocation, self).__init__(parent)
        self.code = ""
        self.title = ""
        self.setupUi()

    def returnValues(self, textButton: str = ""):
        self.returnedVal = (textButton, self.txtUbic.text())
        self.submitclose()

    def cleanInputText(self):
        self.txtUbic.setText("");

    def closeEvent(self, event):
        self.returnValues("Cancel")

    def setItemData(self, code: str = "", title: str = ""):
        self.label2.setText(code)
        self.label2.adjustSize()
        self.label3.setText(title)
        self.label3.adjustSize()
        w1 = self.label4.frameGeometry().width()
        w2 = self.label3.frameGeometry().width()
        self.textWidth = w1 + ((w2>w1) and (w2 - w1))
        self.txtUbic.setFixedWidth(self.textWidth)
        self.btnCancel.move(self.textWidth - self.btnCancel.frameGeometry().width() , 110)
        self.btnOk.move(self.textWidth - self.btnCancel.frameGeometry().width() - self.btnOk.frameGeometry().width() , 110)

    def submitclose(self):
        self.accept()

    def setupUi(self):
        self.setObjectName("QCustomDialog")
        self.setWindowTitle("Cambiar ubicación")

        self.label1 = QLabel("Ingrese nueva ubicación para:",self)
        self.label1.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label1.move(6, 15)
        self.label1.setStyleSheet("background-color: lightgreen")
        self.label1.adjustSize()

        self.label2 = QLabel(self)
        self.label2.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label2.move(6, 32)
        self.label2.setStyleSheet("background-color: lightblue")

        self.label3 = QLabel(self)
        self.label3.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label3.move(6, 49)
        self.label3.setStyleSheet("background-color: lightblue")


        self.label4 = QLabel("FORMATO: Mueble (Letra), Fila (Numero)",self)
        self.label4.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label4.move(6, 66)
        self.label4.setStyleSheet("background-color: lightgreen")
        self.label4.adjustSize()

        self.txtUbic = QLineEdit(self)
        self.txtUbic.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        self.txtUbic.move(6, 85)

        self.btnCancel = QPushButton('Cancel', self)
        self.btnCancel.adjustSize()
        self.btnCancel.clicked.connect(lambda: self.returnValues('Cancel'))

        self.btnOk = QPushButton('OK', self)
        self.btnOk.adjustSize()
        self.btnOk.clicked.connect(lambda: self.returnValues("Ok"))

class ui_OperationDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(ui_OperationDialog, self).__init__(parent)
        self.code = ""
        self.title = ""
        self.setupUi()

    def returnValues(self, textButton: str = ""):
        self.returnedVal = textButton
        self.submitclose()

    def cleanInputText(self):
        self.txtUbic.setText("");

    def closeEvent(self, event):
        self.returnValues("Cancelar")

    def setItemData(self, code: str = "", title: str = ""):
        self.label2.setText(code)
        self.label2.adjustSize()
        self.label3.setText(title)
        self.label3.adjustSize()
        w1 = 50
        w2 = self.label3.frameGeometry().width()
        self.textWidth = ((w2>w1) and (w2 - w1))
        # self.txtUbic.setFixedWidth(self.textWidth)
        self.btnDeactivate.move(5, 70)
        self.btnLocation.move(self.btnDeactivate.frameGeometry().width() + 5, 70)
        self.btnEdit.move(self.btnDeactivate.frameGeometry().width() + self.btnLocation.frameGeometry().width() + 5, 70)
        self.btnCancel.move(5, 95)

    def submitclose(self):
        self.accept()

    def setupUi(self):
        self.setObjectName("QCustomDialog")
        self.setWindowTitle("Cuadro de operaciones")

        self.label1 = QLabel("Elija la operación para:",self)
        self.label1.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label1.move(6, 15)
        self.label1.setStyleSheet("background-color: lightgreen")
        self.label1.adjustSize()

        self.label2 = QLabel(self)
        self.label2.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label2.move(6, 32)
        self.label2.setStyleSheet("background-color: lightblue")

        self.label3 = QLabel(self)
        self.label3.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label3.move(6, 49)
        self.label3.setStyleSheet("background-color: lightblue")

        self.btnEdit = QPushButton('Editar', self)
        self.btnEdit.adjustSize()
        self.btnEdit.clicked.connect(lambda: self.returnValues("Editar"))

        self.btnLocation = QPushButton('Cambiar ubicación', self)
        self.btnLocation.adjustSize()
        self.btnLocation.clicked.connect(lambda: self.returnValues("Ubicacion"))

        self.btnDeactivate = QPushButton('Desactivar', self)
        self.btnDeactivate.adjustSize()
        self.btnDeactivate.clicked.connect(lambda: self.returnValues('Desactivar'))

        self.btnCancel = QPushButton('Cancelar', self)
        self.btnCancel.adjustSize()
        self.btnCancel.clicked.connect(lambda: self.returnValues("Cancelar"))

    def show_window(self):
        self.show()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    # Dialog = QDialog()
    # ui = Ui_Dialog(Dialog)
    # ui = ui_CustomChangeLocation()
    # data = {"cod": "GN_2524",
    #     "isbn": "97845562314",
    #     "title": "COMENTARIOS REALES DE LOS INCAS",
    #     "autor": "INCA GARCILASO DE VEGA",
    #     "publisher": "EL LECTOR",
    #     "price": "65.0"}
    ui = ui_EditNewItemDialog(True)
    # ui = Ui_Dialog()
    # ui.setDataFields(data)
    # ui.setDataFields("GN_2025")
    ui.cleanInputFields(True)
    # ui = ui_OperationDialog(Dialog)
    # ui.setItemData("", "")
    # ui.init_condition()
    # ui.showWindow()
    ui.show_window()
    # ui.exec_()
    sys.exit(app.exec_())


