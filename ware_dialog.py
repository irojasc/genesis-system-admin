# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ware_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import unicodedata
from PyQt5.QtWidgets import *
# from PyQt5.QtGui import QFont, QBrush, QColor, QKeyEvent, QMouseEvent, QTextCursor, QWheelEvent, QPen
from PyQt5.QtGui import QFont, QBrush, QColor, QPen
from PyQt5 import QtCore, QtGui, QtWidgets
# from PyQt5.QtCore import pyqtSignal, Qt, QDate, QStringListModel, QRect
from PyQt5.QtCore import Qt, QRect
# from PyQt5.QtWidgets import QWidget
from gestor import WareProduct, wares_gestor, aws_s3, users_gestor
from edititem_window import ui_EditNewItemDialog
# from objects import ware, user, product, ware_product
from objects import ware, user, ware_product
from inout_dialog import Ui_inoutDialog
from uiConfigurations import *
from datetime import datetime
from functools import reduce
# import math
ROOT = 'C:/Users/IROJAS/Desktop/Genesis/genesis-system-admin/'

class Ui_Dialog(QtWidgets.QDialog):
    # -----------  constructor  -----------
    def __init__(self, currentUser: user = None, currentWare: ware = None, restWare: list = None, WareProdDate: datetime.date = None, parent=None):
        super(Ui_Dialog, self).__init__(parent)

        if(bool(currentUser) or bool(currentWare) or bool(restWare) or bool(WareProdDate) or bool(parent)):
            self.gestWareProduct = WareProduct()  ##se crea el objeto getWareProduct: Maneja la tabla ware -> WareProduct <- Product
            self.ware_gest = wares_gestor("functions") #con esto solo estoy creando un objecto con solo funciones
            self.objS3 = aws_s3()
            self.real_table = []
            self.ownUsers = currentUser
            self.currWare = currentWare
            self.restWares = restWare
            self.WareProdDate = WareProdDate
            self.transferMode = False
            #esta variable es la lista de productos que pasan a inout dialog como preselecionados
            self.data_transfer = None
            self.setupUi()
            # -----------  cargar datos en tabla  -----------
            self.gestWareProduct.loadInnerTable() ##para cargar la tabla principal del gestor
            self.txtBusChanged()
            # print(self.currWare, self.restWares)
            # print(currentUser)
        else:
            self.ownUsers =  None
            self.currWare = None
            self.restWares = None
            self.WareProdDate = None
            self.setupUi()
        self.init = 0

    # -----------  condiciones iniciales al abrir ventana  -----------
    def init_condition(self):
        # -----------  set item conditions  -----------
        self.cmbSearch.setEnabled(True)
        self.txtSearch.setEnabled(True)
        self.txtSearch.clear()
        self.lblNewItem.setEnabled(True) # label new product
        item_all = ['cod','isbn','titulo','autor','editorial']
        self.cmbSearch.clear()
        self.cmbSearch.addItems(item_all)
        self.cmbWarePrice.clear()
        self.cmbWarePrice.addItems([self.currWare.cod] + self.getRestWare(True)) if self.ownUsers.auth["ckWarePrice"] else self.cmbWarePrice.addItems([self.currWare.cod])
        self.cmbWarePrice.setEnabled(True) if self.ownUsers.auth["ckWarePrice"] else self.cmbWarePrice.setEnabled(False)
        self.cmbSearch.setCurrentIndex(-1)
        
        #activa condiciones iniciales fuera del proceso comparativo
        self.search_box.setEnabled(True)
        self.compareCheckBox.setChecked(False)

        self.lblWareFrom.setText(self.currWare.getWareCode())
        self.lblWareFrom.adjustSize()
        self.lblWareFrom.move( 34 - self.lblWareFrom.width(), self.lblWareFrom.y())

        self.lblWareTo.setText(self.cmbWares.currentText())
        self.lblWareTo.adjustSize()
        self.lblWareTo.move(55, self.lblWareTo.y())

        # las dos lineas de abajo actualizan los datos de precio con el item de la primera fila
        # self.txtBusChanged() es una funcion que actua segun las condiciones de los inputs
        self.txtBusChanged()
        self.ware_table.setCurrentCell(0, 0)
        self.actualizar_img(0)

    def sortTable(self, unsortList: list =  None) -> tuple:
        # separar items que pertencen a libros
        result_books = list(filter(lambda x: x.product.prdCode.split("_")[0] == "GN", unsortList))

        # separar items que no pertencen a libros
        result_nobooks = list(filter(lambda x: x.product.prdCode.split("_")[0] != "GN", unsortList))

        # # ordenar items de libros por codigo de menor a mayor
        # result_books.sort(key=lambda z: int(z.objBook.cod.split("_")[1]))
        return len(result_books), result_books +  result_nobooks
        
    ## Funcion que permite la apertura de ventana ware desde el main_
    def showWindow(self):
        self.show()

    # -----------  close event configuration  -----------
    def keyPressEvent(self, event):
        if not event.key() == QtCore.Qt.Key_Escape:
            super(Ui_Dialog, self).keyPressEvent(event)

    # -----------  close event configuration  -----------
    def closeEvent(self, event):
        self.accept()
        event.accept()
        # if self.ui_dialog.isVisible():
        #     ret = QMessageBox.information(self, 'Aviso', "Debe cerrar la ventana entrada/salida")
        #     event.ignore()
        # else:
        #     self.accept()
        #     event.accept()

    # def updateRealTable(self): #se actualiza la tabla actual con los datos del back
    #     # for i in self.real_table:
    #     #     for j in self.gestWareProduct.innerWareList:
    #     #         if i.product.prdCode == j.product.prdCode and (self.currWare in i.wareData) and (self.currWare in j.wareData):
    #     #             print(i)
    #     #             # i.wareData[self.currWare.cod]["qtyNew"] = j.wareData[self.currWare.cod]["qtyNew"]
    #     #             # print(i.wareData[self.currWare.cod]["qtyNew"])
    #     self.loadData()

    # -----------  carga tabla qtableWidget  -----------
    # def loadData(self, condition = "search") -> int:
    
    def loadData(self) -> int:
        backgrounditem = lambda x, z: not(z) and x.setBackground(QtGui.QColor(200, 200, 200, 255))
        flag = QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEnabled
        # if condition == "main":
        # sortTable: ordena la tabla que llega de gestor por tipo de producto y nivel de codigo
        lenTableBooks, self.real_table = self.sortTable(self.real_table.copy())
        # lenTableBooks, self.real_table = self.sortTable(self.gestWareProduct.innerWareList.copy())

        # -----------  esta parte para llenar la tabla  -----------
        # row = 0
        self.ware_table.setRowCount(len(self.real_table))
        for row, ware_li in enumerate(self.real_table):
            # isExistActive: primero comprueba que el item exista en el presente almacen, luego recien verifica que el item este habilitado en el almacen
            isExistActive = (self.currWare.cod in ware_li.wareData) and ware_li.wareData[self.currWare.cod]["isEnabled"]
            # isOldExist: primero verifica que existe algun almancen activo para el item y luego que todos los valoes de PVOLD sean iguales
            isOldExist = not(None in ware_li.wareData) and all(i["pvOld"] == list(ware_li.wareData.values())[0]["pvOld"] for i in ware_li.wareData.values())

            item = QtWidgets.QTableWidgetItem(ware_li.product.prdCode)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 0, item)
            # Self.currWare.auth["locTooltip"]: este permiso es propio del current ware
            if isExistActive and self.currWare.auth["locTooltip"]:
                self.ware_table.item(row, 0).setToolTip(str(ware_li.wareData[self.currWare.cod]["loc"]))

            item = QtWidgets.QTableWidgetItem(ware_li.product.isbn)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 1, item)

            item = QtWidgets.QTableWidgetItem(ware_li.product.title)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 2, item)

            item = QtWidgets.QTableWidgetItem(ware_li.product.autor)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 3, item)

            item = QtWidgets.QTableWidgetItem(ware_li.product.publisher)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 4, item)

            text = str(ware_li.wareData[self.currWare.cod]["qtyNew"]) if (isExistActive) else "-"
            item = QtWidgets.QTableWidgetItem(text)
            backgrounditem(item, isExistActive)
            item.setFlags(flag)
            self.ware_table.setItem(row, 5, item)
            if isExistActive and isOldExist: self.ware_table.item(row, 5).setToolTip("-->[%s]"%str(ware_li.wareData[self.currWare.cod]["qtyOld"]))

            if self.cmbWares.currentIndex() != -1:
                currTextCmbWare = self.cmbWares.currentText()
                isWareEnEx = ((currTextCmbWare in ware_li.wareData) and ware_li.wareData[currTextCmbWare]["isEnabled"])
                text = str(ware_li.wareData[currTextCmbWare]["qtyNew"]) if isWareEnEx else "-"
                item = QtWidgets.QTableWidgetItem(text)
                backgrounditem(item, isWareEnEx)
                item.setFlags(flag)
                self.ware_table.setItem(row, 6, item)
                if isWareEnEx and isOldExist: self.ware_table.item(row, 6).setToolTip("-->[%s]"%str(ware_li.wareData[currTextCmbWare]["qtyOld"]))
            # row += 1

        return lenTableBooks

    def txtBusChanged(self, method: int = 0, keepCurrentIndex: int = 0):
        #method: 2 es nuevo item, 1 es mantener current index (No requiere KeepCurrentIndex) y 0 es posicion en el primer item para method
        if str(self.cmbSearch.currentText()) == "" and self.txtSearch.text() != "":
            ret = QMessageBox.information(self, 'Aviso', "Ingresar criterio de busqueda")

        elif str(self.cmbSearch.currentText()) == "" and self.txtSearch.text() == "":
            # self.buscar(): para copiar toda la lista inner to frond
            if self.buscar("main") > 0:
                #lstBookIndex: la posicion final del ultimo item de la categoria libros
                lstBookIndex = self.loadData()
                self.ware_table.setCurrentCell(lstBookIndex - 1, 0) if method == 2 else self.ware_table.setCurrentCell(self.ware_table.selectedIndexes()[0].row(), 0) if method == 1 else self.ware_table.setCurrentCell(0, 0)
                self.actualizar_img(lstBookIndex - 1) if method == 2 else self.actualizar_img(self.ware_table.selectedIndexes()[0].row()) if method == 1 else self.actualizar_img(0)

        elif self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() == "":
            if self.buscar("main") > 0:
                lstBookIndex = self.loadData()
                self.ware_table.setCurrentCell(lstBookIndex - 1, 0) if method == 2 else self.ware_table.setCurrentCell(self.ware_table.selectedIndexes()[0].row(), 0) if method == 1 else self.ware_table.setCurrentCell(0, 0)
                self.actualizar_img(lstBookIndex - 1) if method == 2 else self.actualizar_img(self.ware_table.selectedIndexes()[0].row()) if method == 1 else self.actualizar_img(0)

        else:
            if self.cmbSearch.currentText() == "cod":
                if self.buscar("cod", self.txtSearch.text()) > 0:
                    lstBookIndex = self.loadData()
                    self.ware_table.setCurrentCell(lstBookIndex - 1, 0) if method == 2 else self.ware_table.setCurrentCell(self.ware_table.selectedIndexes()[0].row(), 0) if method == 1 else self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(lstBookIndex - 1) if method == 2 else self.actualizar_img(self.ware_table.selectedIndexes()[0].row()) if method == 1 else self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

            elif self.cmbSearch.currentText() == "isbn":
                if self.buscar("isbn", self.txtSearch.text()) > 0:
                    lstBookIndex = self.loadData()
                    self.ware_table.setCurrentCell(lstBookIndex - 1, 0) if method == 2 else self.ware_table.setCurrentCell(self.ware_table.selectedIndexes()[0].row(), 0) if method == 1 else self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(lstBookIndex - 1) if method == 2 else self.actualizar_img(self.ware_table.selectedIndexes()[0].row()) if method == 1 else self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)
                    #ret = QMessageBox.information(self, 'Aviso', "No existe coincidencias")

            elif self.cmbSearch.currentText() == "titulo":
                if self.buscar("titulo", self.txtSearch.text()) > 0:
                    lstBookIndex = self.loadData()
                    self.ware_table.setCurrentCell(lstBookIndex - 1, 0) if method == 2 else self.ware_table.setCurrentCell(self.ware_table.selectedIndexes()[0].row(), 0) if method == 1 else self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(lstBookIndex - 1) if method == 2 else self.actualizar_img(self.ware_table.selectedIndexes()[0].row()) if method == 1 else self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

            elif self.cmbSearch.currentText() == "autor":
                if self.buscar("autor", self.txtSearch.text()) > 0:
                    lstBookIndex = self.loadData()
                    self.ware_table.setCurrentCell(lstBookIndex - 1, 0) if method == 2 else self.ware_table.setCurrentCell(self.ware_table.selectedIndexes()[0].row(), 0) if method == 1 else self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(lstBookIndex - 1) if method == 2 else self.actualizar_img(self.ware_table.selectedIndexes()[0].row()) if method == 1 else self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

            elif self.cmbSearch.currentText() == "editorial":
                if self.buscar("editorial", self.txtSearch.text()) > 0:
                    lstBookIndex = self.loadData()
                    self.ware_table.setCurrentCell(lstBookIndex - 1, 0) if method == 2 else self.ware_table.setCurrentCell(self.ware_table.selectedIndexes()[0].row(), 0) if method == 1 else self.ware_table.setCurrentCell(0, 0)
                    self.actualizar_img(lstBookIndex - 1) if method == 2 else self.actualizar_img(self.ware_table.selectedIndexes()[0].row()) if method == 1 else self.actualizar_img(0)
                else:
                    self.real_table.clear()
                    self.ware_table.clearContents()
                    self.ware_table.setRowCount(0)

    def CmbIndexChanged(self):
        if self.cmbSearch.currentIndex() != -1 and self.txtSearch.text() != "":
            self.txtBusChanged()

    def actualizar_img(self, tmp: int = None):
        #el paramatro tmp es el index de la fila en la tabla
        if (tmp + 1 <= len(self.real_table)) and (tmp >= 0):
            pathfile = self.objS3.directions["product"](self.ware_table.item(tmp,0).text().lower())
            if self.objS3.existsLocalFile(pathfile):
                self.lblImg.setPixmap(QtGui.QPixmap(pathfile))
                self.lblImg.setScaledContents(True)
            else:
                self.lblImg.setPixmap(QtGui.QPixmap())
                self.lblImg.setScaledContents(True)

            if (self.currWare.cod in self.real_table[tmp].wareData) and (self.real_table[tmp].wareData[self.currWare.cod]["isEnabled"]):
                self.cmbWarePrice.setCurrentIndex(0)
                self.lblValuePrice.setFont(getFontxPV())
                self.lblValuePrice.move(238,34)
                self.lblValuePrice.setText("S/." + str(self.real_table[tmp].wareData[self.currWare.cod]["pvNew"]))
            else:
                self.cmbWarePrice.setCurrentIndex(0)
                self.lblValuePrice.setFont(getFontxUnAvailable())
                self.lblValuePrice.move(238, 38)
                self.lblValuePrice.setText("*********")

            counter = 0
            pv = 0
            if not(None in self.real_table[tmp].wareData) and all(i["pvOld"] == list(self.real_table[tmp].wareData.values())[0]["pvOld"] for i in self.real_table[tmp].wareData.values()):
                for key in self.real_table[tmp].wareData:
                    if self.real_table[tmp].wareData[key]["isEnabled"]:
                        counter += int(self.real_table[tmp].wareData[key]["qtyOld"]) if isinstance(self.real_table[tmp].wareData[key]["qtyOld"], str) else self.real_table[tmp].wareData[key]["qtyOld"]
                        pv = self.real_table[tmp].wareData[key]["pvOld"]

            if counter > 0 and pv > 0:
                self.lblValuePVP2.setPalette(getPricePalette2())
                self.lblValuePVP2.setText("S/.%s"%(str(pv)))
            else:
                self.lblValuePVP2.setPalette(getPricePalette2())
                self.lblValuePVP2.setText("*********")

    # -----------  double click event para cambiar ubicacion  -----------
    def tableWidget_doubleClicked(self):
        # ware_table es el widget
        row = self.ware_table.currentIndex().row()
        column_ = self.ware_table.currentIndex().column()

        if column_ == 0:

                # validation: Cancel, Ok, Desactivar
                validation = self.openOperationDialog(self.ware_table.item(row, 0).text(), self.ware_table.item(row, 2).text())
        
                if (validation == "Ubicacion"):
                    #verifica que el item se encuentre dentro del presente almacen
                    if self.currWare.cod in self.real_table[row].wareData:
                        ubicValidation, text = self.openUbicDialog(self.ware_table.item(row,column_).text(), self.ware_table.item(row,column_+2).text())
                        if (ubicValidation == "Ok"):
                            if bool(text) and self.userValidation()[0] and self.gestWareProduct.changeItemLocation(str(self.real_table[row].product.getId()), text, self.currWare.cod) and self.gestWareProduct.changeInnerItemLocation(self.real_table[row].product.getId(), text, self.currWare.cod):
                                QMessageBox.question(self, 'Alerta',"Operación exitosa", QMessageBox.Ok, QMessageBox.Ok)
                                self.txtBusChanged(method=1, keepCurrentIndex=self.ware_table.selectedIndexes()[0].row())
                            else:
                                QMessageBox.warning(self, 'Alerta',"Operación sin efecto", QMessageBox.Ok, QMessageBox.Ok)
                    else:
                        QMessageBox.information(self, 'Información',"El presente almacén no registra el producto", QMessageBox.Ok, QMessageBox.Ok)

                if (validation == "Editar"):
                    #verification: bool, itemReturned(obj): ware_product
                    verification, languages, itemReturned = self.gestWareProduct.getItemDataFromDB(self.real_table[row].product.getId())
                    isUpdate, data, isCancel = self.openEditItemDialog(languages=languages ,data=itemReturned) if verification else (None, None)
                    
                    if isUpdate and isCancel == 'salvar':
                        if self.ware_gest.updateDBItem(data) and self.gestWareProduct.updateInnerItem(data):
                            QMessageBox.question(self, 'Alerta',"Operación exitosa", QMessageBox.Ok, QMessageBox.Ok)
                            self.txtBusChanged(method=1)
                        
                    elif isUpdate and isCancel == 'cancelar':
                        if self.gestWareProduct.updateInnerItem(data):
                            self.txtBusChanged(method=1)

    # -----------  user validation  -----------
    def userValidation(self):
        # isPressedOk: True or False
        # text: content
        text, isPressedOk = QInputDialog.getText(self, 'Validar usuario', 'Ingrese contraseña', QtWidgets.QLineEdit.Password)
        if(isPressedOk):
            with users_gestor() as a_:
                if a_.checkPSW(text)[0]:
                    # tmpData = a_.checkPSW(text)[1]
                    del a_ 
                    # return tmpData, "acepted"
                    return True, "acepted"
                elif not(a_.checkPSW(text)[0]):
                    del a_ 
                    return False, "denied"
        else:
            return False, "aborted"

    def change_state(self, state): #cambia el estado de self. state y color de los frames
        if state == "ware":
            self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
            self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        elif state == "in/out":
            self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")
            self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")

    def inout_operation(self, event): # funcion para abrir el dialog in/out
        ##FIJARSE AQUI
        if self.ownUsers.auth["InOutProduct"]:
            self.change_state("in/out") # lo que hace esto es cambiar el color de waredialog cuando pasa a ingreso/salida
             
            with Ui_inoutDialog(self.ownUsers, self.currWare, self) as ui_dialog:
      
                #Si es en modo traspaso
                if self.transferMode:
                    result_books = list(filter(lambda x: 
                    (self.currWare.cod in x.wareData) and 
                    (x.wareData[self.currWare.cod]["isEnabled"]) and
                    (self.cmbWares.currentText() in x.wareData) and
                    (x.wareData[self.cmbWares.currentText()]["isEnabled"])
                    , self.gestWareProduct.innerWareList.copy()))
                    
                    ui_dialog.mainList = result_books.copy()
                    
                    if len(self.data_transfer) > 0:
                        
                        answer_ = QMessageBox.question(self, 'Consulta',"¿Desea cargar items preseleccionados?", QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.No)
                        if QMessageBox.Yes == answer_:
                            ui_dialog.init_condition(isTransfer=True, preSelectedItems=self.data_transfer, toWare=self.cmbWares.currentText())
                        elif QMessageBox.No == answer_:
                            ui_dialog.init_condition(isTransfer=True, preSelectedItems=None, toWare=self.cmbWares.currentText())
                        elif QMessageBox.Cancel == answer_:
                            self.change_state('ware')
                            del ui_dialog
                            return None
                    else:
                        ui_dialog.init_condition(isTransfer=True, preSelectedItems=None, toWare=self.cmbWares.currentText())
                
                else:
                    # separar solo items activos y enviar a in/out form
                    result_books = list(filter(lambda x: (self.currWare.cod in x.wareData) and (x.wareData[self.currWare.cod]["isEnabled"]), self.gestWareProduct.innerWareList.copy()))
                    ui_dialog.mainList = result_books.copy()
                    ui_dialog.init_condition(isTransfer=False)

                if ui_dialog.exec_() == QtWidgets.QDialog.Accepted:
                    self.change_state("ware")
                    #returned_val[3]: generalFlag -> False cuando la intencion es agregar/quitar, sin que sea None
                    #>cuando es ingreso y salida
                    if (ui_dialog.returned_val[3] is not None) and not(ui_dialog.returned_val[3]):
                        self.gestWareProduct.update_backtablequantity(newList=ui_dialog.returned_val[0],
                                                                    oldList=ui_dialog.returned_val[1],
                                                                    operationType=ui_dialog.returned_val[2],
                                                                    currentWare=self.currWare.cod,
                                                                    location=ui_dialog.returned_val[4])
                        self.txtBusChanged(method=1, keepCurrentIndex=self.ware_table.selectedIndexes()[0].row())
                        del ui_dialog
                    #>cuando es parte de operacion de trasferencia
                    elif (ui_dialog.returned_val[3] is not None) and ui_dialog.returned_val[3]:
                        self.gestWareProduct.update_backtablequantity(newList=ui_dialog.returned_val[0],
                                                                    oldList=ui_dialog.returned_val[1],
                                                                    operationType=ui_dialog.returned_val[2],
                                                                    currentWare=self.currWare.cod)
                        self.compareCheckBox.setChecked(False)
                        del ui_dialog
                else:
                    self.change_state("ware")
                    self.compareCheckBox.setChecked(False)
                    del ui_dialog

        else:
            QMessageBox.warning(self, 'Mensaje', "No tiene permisos para entrada/salida de productos", QMessageBox.Ok, QMessageBox.Ok)

    def onCurrentWareIndexChanged(self):
        if self.cmbWares.currentIndex() == -1:
            self.ware_table.horizontalHeaderItem(6).setText("")
        elif self.cmbWares.currentIndex() != -1:
            self.ware_table.horizontalHeaderItem(6).setText("[" + self.cmbWares.currentText() + "]")
            self.lblWareTo.setText(self.cmbWares.currentText())
            self.lblWareTo.adjustSize()
            if self.ware_table.selectedIndexes() != []:
                #method 1: converva el current selected index
                self.txtBusChanged(method=1, keepCurrentIndex=self.ware_table.selectedIndexes()[0].row())
                self.actualizar_img(self.ware_table.currentIndex().row())
            else:
                self.txtBusChanged(method=0)
                self.actualizar_img(0)

    def onCmbWarePriceIndexChanged(self):
        if self.cmbWarePrice.currentIndex() != -1:
            # ware_table es el widget
            tblCurrentIndex = self.ware_table.currentRow()
            if (self.cmbWarePrice.currentText() in self.real_table[tblCurrentIndex].wareData) and (self.real_table[tblCurrentIndex].wareData[self.cmbWarePrice.currentText()]["isEnabled"]):
                self.lblValuePrice.setFont(getFontxPV())
                self.lblValuePrice.move(238,34)
                self.lblValuePrice.setText("S/." + str(self.real_table[tblCurrentIndex].wareData[self.cmbWarePrice.currentText()]["pvNew"]))
            else:
                self.lblValuePrice.setFont(getFontxUnAvailable())
                self.lblValuePrice.move(238, 38)
                self.lblValuePrice.setText("*********")

    def resizeEvent(self, event):
        if self.init > 0:
            self.frame_2.setGeometry(QtCore.QRect(0, self.frameGeometry().height() - 188 - 40, 1024, 188))
        self.ware_table.setGeometry(QtCore.QRect(0, 130, 1024, self.frameGeometry().height() - (188 + 30 + 100 + 40)))
        self.init += 1

    # -----------  funcion buscar  -----------
    def buscar(self, criterio: str = None, patron: str = None):
        self.real_table.clear()
        
        if criterio == "main":
            self.real_table = self.gestWareProduct.innerWareList.copy()
            return len(self.real_table)
        
        if criterio == "cod":
            self.real_table = list(filter(lambda x: x.product.prdCode == str.upper(patron) ,self.gestWareProduct.innerWareList)).copy()
            return len(self.real_table)

        elif criterio == "isbn":
            self.real_table = list(filter(lambda x: False if x.product.isbn is None else x.product.isbn.find(str.upper(patron)) >= 0 ,self.gestWareProduct.innerWareList)).copy()
            return len(self.real_table)

        elif criterio == "titulo":
            self.real_table = list(filter(lambda x: x.product.title.find(str.upper(patron)) >= 0 ,self.gestWareProduct.innerWareList)).copy()
            return len(self.real_table)

        elif criterio == "autor":
            self.real_table = list(filter(lambda x: x.product.autor.find(str.upper(patron)) >= 0 ,self.gestWareProduct.innerWareList)).copy()
            return len(self.real_table)

        elif criterio == "editorial":
            self.real_table = list(filter(lambda x: x.product.publisher.find(str.upper(patron)) >= 0 ,self.gestWareProduct.innerWareList)).copy()
            return len(self.real_table)
        return 0

    # -----------  obtiene lista de wares que son virtuales y estan activos si virtual es True, caso contrario todos mas los virtuales  -----------
    def getRestWare(self, virtual: bool = False) -> list:
        try:
            if not(virtual):
                return list(map(lambda y: y.cod ,list(filter(lambda x: True if (x.auth["enabled"] and not(x.auth["isVirtual"])) else False, self.restWares))))
            else:
                return list(map(lambda y: y.cod ,list(filter(lambda x: True if x.auth["enabled"] else False, self.restWares))))
        except:
            return []

    # -----------  keyPressed for QtableWidget  -----------
    def KeyPressed(self,event):
        if self.ware_table.selectedIndexes() != []:
            # ware_table es el widget
            temp = self.ware_table.currentRow()
            if event.key() == QtCore.Qt.Key_Up:
                temp -= 1
                self.actualizar_img(temp)
            elif event.key() == QtCore.Qt.Key_Down:
                temp += 1
                self.actualizar_img(temp)
        return QtWidgets.QTableWidget.keyPressEvent(self.ware_table, event)

    # -----------  eventFilter para MouseEvent  -----------
    def eventFilter(self, source, event):
        if self.ware_table.selectedIndexes() != []:
            if event.type() == QtCore.QEvent.MouseButtonRelease:
                if event.button() == QtCore.Qt.LeftButton:
                    temp = self.ware_table.currentRow()
                    self.actualizar_img(temp)
        return QtCore.QObject.event(source, event)

    def openUbicDialog(self, code: str = "", title: str = "") -> tuple:
        with ui_CustomChangeLocation() as ui_CustomInput:
            ui_CustomInput.cleanInputText()
            ui_CustomInput.setItemData(code, title)
            if ui_CustomInput.exec_() == QDialog.Accepted:
                tmpData = ui_CustomInput.returnedVal
                del ui_CustomInput
                return tmpData
            else:
                return (None, None)

    def openOperationDialog(self, code: str = "", title: str = ""):
        #operation data es para seleccionar la operacion editItem, changeLocation
        with ui_OperationDialog() as ui_operationDialog:
            #code: codigo de item , title: titulo de item
            ui_operationDialog.setItemData(code, title)
            if ui_operationDialog.exec_() == QDialog.Accepted:
                tmpData = ui_operationDialog.returnedVal
                del ui_operationDialog
                return tmpData
            else:
                del ui_operationDialog
                return None

    def openEditItemDialog(self, languages: list = None, data: ware_product = None):
        if bool(data):
            #method: False para editar
            #envias currentWare cuando quieres habilitar la fila del almacen que solo quieres editar
            with ui_EditNewItemDialog(method=False, currentWare=self.currWare) as ui_EditDialog:
                ui_EditDialog.cleanInputFields()
                ui_EditDialog.setDataFields(languages ,data)
                if ui_EditDialog.exec_() == QDialog.Accepted:
                    tmpData = ui_EditDialog.returnedVal
                    del ui_EditDialog
                    return tmpData
                else:
                    tmpData = ui_EditDialog.returnedVal
                    del ui_EditDialog
                    return tmpData
                    # print("entra a esta parte")
                    # del ui_EditDialog
                    # return (False, None, None)
                del ui_EditDialog
        else:
            return (False, None)

    def createNewItem(self, event = None):
        # isAllowed: bool
        # data: str
        isAllowed, data_local = self.ware_gest.getNextCodDB()
        if isAllowed:
            #Argumento True en ui_EditNewItemDialog() cuando se crea un nuevo producto
            with ui_EditNewItemDialog(method=True) as ui_NewItemDialog:
                ui_NewItemDialog.cleanInputFields(True)
                ui_NewItemDialog.setDataFields(data=data_local)
                if ui_NewItemDialog.exec_() == QDialog.Accepted:
                    validator, dataAfter, isCancel = ui_NewItemDialog.returnedVal
                    del ui_NewItemDialog
                    if validator:
                        if self.userValidation()[0]:
                            if(self.ware_gest.insertNewItemDB(dataAfter, self.currWare.cod) and self.gestWareProduct.insertInnerNewItem(dataAfter, self.currWare.cod)):
                                QMessageBox.information(self, 'Mensaje', "¡Operacion Exitosa!", QMessageBox.Ok, QMessageBox.Ok)
                                #True: argumento para indicar que se esta creadno un nuevo item y index selected apunte al ultimo producto libro
                                self.txtBusChanged(method=2)
                                self.actualizar_img(self.ware_table.currentIndex().row())
                            else:
                                QMessageBox.information(self, 'Mensaje', "Error durante operación", QMessageBox.Ok, QMessageBox.Ok)
                else:
                    del ui_NewItemDialog
    
    #esta funcion se utiliza para contrastar dos almacenes segun stock minimos
    def compareItemWares(self):
        if self.compareCheckBox.isChecked():
            boolValidation, textAnswer = self.userValidation()

            if boolValidation and textAnswer == 'acepted':
                # QMessageBox.information(self, 'Mensaje', "Usuario Validado", QMessageBox.Ok, QMessageBox.Ok)
                self.lblInOut.setPixmap(QtGui.QPixmap(ROOT + "imgs/move_items.png"))
                self.txtSearch.setText("")
                self.cmbSearch.setCurrentIndex(-1)
                self.lblNewItem.setEnabled(False)
                self.lblLoadTable.setEnabled(False)
                self.search_box.setEnabled(False)
                self.ware_table.blockSignals(True)
                self.cmbWares.setEnabled(False)
                self.updateWareTable(updWareTableAfterInner=False)
                self.real_table, self.data_transfer = self.gestWareProduct.compareTwoItemsWare(FromWare=self.lblWareFrom.text(), ToWare=self.lblWareTo.text())
                self.loadData()
                self.ware_table.setCurrentCell(0, 0)
                self.actualizar_img(0)
                self.transferMode = True

            elif not boolValidation and textAnswer == 'denied':
                QMessageBox.information(self, 'Mensaje', "Usuario Denegado", QMessageBox.Ok, QMessageBox.Ok)
                self.compareCheckBox.blockSignals(True)
                self.compareCheckBox.setChecked(False)
                self.compareCheckBox.blockSignals(False)
            
            elif not boolValidation and textAnswer == 'aborted':
                QMessageBox.information(self, 'Mensaje', "Operacion abortada", QMessageBox.Ok, QMessageBox.Ok)
                self.compareCheckBox.blockSignals(True)
                self.compareCheckBox.setChecked(False)
                self.compareCheckBox.blockSignals(False)
        
        elif not self.compareCheckBox.isChecked():
            self.lblInOut.setPixmap(QtGui.QPixmap(ROOT + "imgs/in_out.png"))
            self.search_box.setEnabled(True)
            self.lblNewItem.setEnabled(True)
            self.lblLoadTable.setEnabled(True)
            self.ware_table.blockSignals(False)
            self.cmbWares.setEnabled(True)
            self.transferMode = False
            self.data_transfer = None
            self.txtBusChanged(method=0)
    
    def loadImage(self):
        row = self.ware_table.currentIndex().row()
        if row >= 0:
            validator, pathfile = self.objS3.get_ProductImage(self.ware_table.item(row,0).text().lower())
            if validator:
                self.lblImg.setPixmap(QtGui.QPixmap(pathfile))
                self.lblImg.setScaledContents(True)
            else:
                self.lblImg.setPixmap(QtGui.QPixmap())
                QMessageBox.information(self, 'Mensaje', "Error para cargar la imagen", QMessageBox.Ok, QMessageBox.Ok)

    # -----------  updateWareTable carga tabla inner desde DB, cuando se presiona icono de Actualizar tabla  -----------
    def updateWareTable(self, event = None, updWareTableAfterInner: bool = True):
        #si retorna true debe actualizar la fecha con la ultima actualizada
        if self.gestWareProduct.loadInnerTable(self.WareProdDate):
            self.WareProdDate = datetime.now().date()
            #updateWareTableAfterInner es cuando no se quiere actualizar qtableWidget despues de inner desde db
            if updWareTableAfterInner:
                self.txtBusChanged(method=1)

    def setupUi(self):
        self.setObjectName("Dialog")
        self.resize(1024, 668)
        self.setFixedSize(1024, 668)
        self.setMinimumHeight(400)
        self.top_frame = QtWidgets.QFrame(self)
        self.top_frame.setGeometry(QtCore.QRect(0, 0, 1024, 100))
        self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        self.top_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_frame.setObjectName("top_frame")

        # -----------  search box configuration  -----------
        self.search_box = QtWidgets.QGroupBox(self.top_frame)
        self.search_box.setGeometry(QtCore.QRect(20, 10, 492, 81))
        self.search_box.setPalette(getPalette())
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.search_box.setFont(font)
        self.search_box.setObjectName("search_box")

        # -----------  txtSearch configuration  -----------
        self.txtSearch = QtWidgets.QLineEdit(self.search_box)
        self.txtSearch.setGeometry(QtCore.QRect(130, 35, 351, 31))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.txtSearch.setFont(font)
        self.txtSearch.setStyleSheet("background-color: rgb(248, 248, 248);")
        self.txtSearch.setClearButtonEnabled(True)
        self.txtSearch.setObjectName("txtSearch")
        self.txtSearch.textChanged.connect(self.txtBusChanged)

        # -----------  cmbSearch Configuration  -----------
        self.cmbSearch = QtWidgets.QComboBox(self.search_box)
        #self.cmbSearch.setGeometry(QtCore.QRect(20, 35, 101, 31))lblLoadTable
        self.cmbSearch.setGeometry(20, 35, 101, 31)
        self.cmbSearch.setStyleSheet("background-color: rgb(170, 255, 0);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.cmbSearch.setFont(font)
        self.cmbSearch.setObjectName("cmbSearch")
        self.cmbSearch.currentIndexChanged.connect(self.CmbIndexChanged)
        
        # -----------  compareBox TwoWares Configuration  -----------
        self.compare_Frame = QtWidgets.QGroupBox(self.top_frame)
        self.compare_Frame.setGeometry(QtCore.QRect(532, 25, 88, 51))
        font = QFont("Open Sans Semibold", 9, 65, False)
        self.compare_Frame.setFont(font)
        self.compare_Frame.setPalette(getPalette())
        self.compare_Frame.setObjectName("compare_Frame")

        # -----------  label wareFrom Compare  -----------
        self.lblWareFrom = QtWidgets.QLabel(self.compare_Frame)
        self.lblWareFrom.setGeometry(QtCore.QRect(38,24,20,20))
        self.lblWareFrom.setStyleSheet("background-color: rgba(255, 255, 255, 0); font-weight: bold;")
        self.lblWareFrom.setPalette(getPalette())
        self.lblWareFrom.setObjectName("lblWareFrom")

        # -----------  label wareTo Compare  -----------
        self.lblWareTo = QtWidgets.QLabel(self.compare_Frame)
        self.lblWareTo.setGeometry(QtCore.QRect(52,24,20,20))
        self.lblWareTo.setStyleSheet("background-color: rgba(255, 255, 255, 0); font-weight: bold;")
        self.lblWareTo.adjustSize()
        self.lblWareTo.setPalette(getPalette())
        self.lblWareTo.setObjectName("lblWareTo")
        
        # -----------  comparecheckBox Configuration  -----------
        self.compareCheckBox = QtWidgets.QCheckBox(self.compare_Frame)
        self.compareCheckBox.setGeometry(38, 24, 13, 13)
        self.compareCheckBox.setStyleSheet("background-color: rgb(170, 255, 0);")
        self.compareCheckBox.setObjectName("compareCheckBox")
        self.compareCheckBox.toggled.connect(self.compareItemWares)

        # -----------  label in/out configuration  -----------
        self.lblInOut = QtWidgets.QLabel(self.top_frame)
        self.lblInOut.setGeometry(QtCore.QRect(675, 20, 98, 72))
        self.lblInOut.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblInOut.setText("")
        self.lblInOut.setPixmap(QtGui.QPixmap(ROOT + "imgs/in_out.png"))
        self.lblInOut.setScaledContents(True)
        self.lblInOut.setObjectName("lblInOut")
        self.lblInOut.mousePressEvent = self.inout_operation
        self.lblInOut.setCursor(Qt.PointingHandCursor)

        # -----------  label New Item configuration  -----------
        self.lblNewItem = QtWidgets.QLabel(self.top_frame)
        self.lblNewItem.setGeometry(QtCore.QRect(795, 23, 78, 68))
        self.lblNewItem.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblNewItem.setText("")
        self.lblNewItem.setPixmap(QtGui.QPixmap(ROOT + "imgs/new_product.png"))
        self.lblNewItem.setScaledContents(True)
        self.lblNewItem.setObjectName("lblNewItem")
        self.lblNewItem.mousePressEvent = self.createNewItem
        self.lblNewItem.setCursor(Qt.PointingHandCursor)

        # -----------  label load table configuration  -----------
        self.lblLoadTable = QtWidgets.QLabel(self.top_frame)
        self.lblLoadTable.setGeometry(QtCore.QRect(890, 23, 101, 67))
        self.lblLoadTable.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblLoadTable.setText("")
        self.lblLoadTable.setPixmap(QtGui.QPixmap(ROOT + "imgs/load_.png"))
        self.lblLoadTable.setScaledContents(True)
        self.lblLoadTable.setObjectName("lblLoadTable")
        self.lblLoadTable.mousePressEvent = self.updateWareTable
        self.lblLoadTable.setCursor(Qt.PointingHandCursor)


        # -----------  ware_table configuration  -----------
        self.ware_table = QtWidgets.QTableWidget(self)
        self.ware_table.setEditTriggers(QtWidgets.QTreeView.NoEditTriggers)
        self.ware_table.setGeometry(QtCore.QRect(0, 130, 1024, 450))
        self.ware_table.setMinimumHeight(100) ## esto se agrego
        self.ware_table.setObjectName("ware_table")
        self.ware_table.setColumnCount(7)
        item = QtWidgets.QTableWidgetItem()

        self.ware_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(6, item)

        self.ware_table.setColumnWidth(0,80)
        self.ware_table.setColumnWidth(1,120)
        self.ware_table.setColumnWidth(2,360)
        self.ware_table.setColumnWidth(3,167)
        self.ware_table.setColumnWidth(4,164)
        #self.ware_table.setColumnWidth(5,47)
        #self.ware_table.setColumnWidth(6,58)
        self.ware_table.horizontalHeader().setEnabled(False)
        self.ware_table.setSelectionBehavior(1)
        self.ware_table.setSelectionMode(1)
        self.ware_table.setStyleSheet("selection-background-color: rgb(0, 120, 255);selection-color: rgb(255, 255, 255);")
        self.ware_table.verticalHeader().hide()
        self.ware_table.viewport().installEventFilter(self)
        self.ware_table.keyPressEvent = self.KeyPressed
        self.ware_table.doubleClicked.connect(self.tableWidget_doubleClicked)

        # -----------  frame configuration  -----------
        self.frame = QtWidgets.QFrame(self)
        self.frame.setGeometry(QtCore.QRect(0, 100, 1024, 30))
        self.frame.setStyleSheet("background-color: rgb(57, 57, 57);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        # -----------  cmbSearch wares  -----------
        self.cmbWares = QtWidgets.QComboBox(self.frame)
        #self.cmbSearch.setGeometry(QtCore.QRect(20, 35, 101, 31))
        self.cmbWares.setGeometry(self.frame.width() - 68, 0, 68, 30)
        self.cmbWares.setStyleSheet("background-color: rgb(170, 255, 0);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.cmbWares.setFont(font)
        self.cmbWares.setObjectName("cmWares")
        self.cmbWares.currentIndexChanged.connect(self.onCurrentWareIndexChanged)
        self.cmbWares.clear()
        #Dentro de esta parte se carga los datos de cmbwares
        self.cmbWares.addItems(self.getRestWare())

        # -----------  frame configuration  -----------
        self.frame_2 = QtWidgets.QFrame(self)
        width_ = self.frameGeometry().width()
        height__ = self.frameGeometry().height()
        self.frame_2.setGeometry(QtCore.QRect(0, height__ - 188, 1024, 188))
        self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")

        # ----------- frame for image and price information  -----------
        self.boxPV = QtWidgets.QGroupBox(self.frame_2)
        self.boxPV.setGeometry(QtCore.QRect(30, 5, 359, 170))
        self.boxPV.setPalette(getPalette())
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.boxPV.setFont(font)
        self.boxPV.setObjectName("boxPV")

        # -----------  lblPVP configuration  -----------
        self.lblPVP = QtWidgets.QLabel("Precio de Venta:", self.boxPV)
        self.lblPVP.setGeometry(QtCore.QRect(160, 8, 170, 41))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lblPVP.setFont(font)
        self.lblPVP.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblPVP.setObjectName("lblPVP")

        # -----------  lblComboWarePrice configuration  -----------
        self.cmbWarePrice = QtWidgets.QComboBox(self.boxPV)
        self.cmbWarePrice.setGeometry(160, 46, 68, 30)
        self.cmbWarePrice.setStyleSheet("background-color: rgb(170, 255, 0);")
        # self.cmbWarePrice.setStyleSheet("background-color: rgb(255, 255, 255);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.cmbWarePrice.setFont(font)
        self.cmbWarePrice.setObjectName("cmbWarePrice")
        self.cmbWarePrice.currentIndexChanged.connect(self.onCmbWarePriceIndexChanged)
        self.cmbWarePrice.clear()
        #Dentro de esta parte se carga los datos de cmbWarePrice

        # -----------  lblValuePrice configuration  -----------
        self.lblValuePrice = QtWidgets.QLabel("S/.200.0",self.boxPV)
        self.lblValuePrice.setGeometry(QtCore.QRect(240, 36, 181, 50))
        self.lblValuePrice.setPalette(getPricePalette())
        self.lblValuePrice.setFont(getFontxPV())
        self.lblValuePrice.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblValuePrice.setObjectName("lblValuePrice")

        # -----------  lblPVP 2DA configuration  -----------
        self.lblPVP2 = QtWidgets.QLabel("PVP(2):",self.boxPV)
        self.lblPVP2.setGeometry(QtCore.QRect(160, 80, 65, 41))
        self.lblPVP2.setFont(getFontxSecond())
        self.lblPVP2.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblPVP2.setObjectName("lblPVP2")

        # -----------  lblValuePVP2 configuration  -----------
        self.lblValuePVP2 = QtWidgets.QLabel(self.boxPV)
        self.lblValuePVP2.setGeometry(QtCore.QRect(229, 75, 151, 50))
        self.lblValuePVP2.setPalette(getPricePalette2())
        self.lblValuePVP2.setFont(getFontxSecond())
        self.lblValuePVP2.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblValuePVP2.setObjectName("lblValuePVP2")

        # -----------  lblImg configuration  -----------
        self.lblImg = QtWidgets.QLabel(self.boxPV)
        self.lblImg.setGeometry(QtCore.QRect(12, 25, 128, 138))
        self.lblImg.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblImg.setObjectName("lblImg")

        # -----------  boton Editar Precio Venta  -----------
        self.btnLoadImage = QtWidgets.QPushButton(self.boxPV)
        self.btnLoadImage.setGeometry(QtCore.QRect(170, 122, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(70)
        self.btnLoadImage.setFont(font)
        self.btnLoadImage.setStyleSheet("background-color: rgb(240, 240, 240);")
        self.btnLoadImage.setObjectName("btnLoadImage")
        self.btnLoadImage.clicked.connect(self.loadImage)
        self.btnLoadImage.setCursor(Qt.PointingHandCursor)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        if(bool(self.ownUsers) or bool(self.currWare) or bool(self.restWares) or bool(self.WareProdDate)):
            _translate = QtCore.QCoreApplication.translate
            self.setWindowTitle(_translate("Dialog", "Genesis - [Museo del libro]"))
            self.search_box.setTitle(_translate("Dialog", "Cuadro de busqueda"))
            self.compare_Frame.setTitle(_translate("Dialog", "Comparar"))
            self.compare_Frame.setAlignment(5)
            self.cmbSearch.setItemText(1, _translate("Dialog", "cod"))
            self.cmbSearch.setItemText(2, _translate("Dialog", "isbn"))
            self.cmbSearch.setItemText(3, _translate("Dialog", "titulo"))
            self.cmbSearch.setItemText(4, _translate("Dialog", "autor"))
            self.cmbSearch.setItemText(5, _translate("Dialog", "editorial"))

            font = QtGui.QFont()
            font.setFamily("Open Sans Semibold")
            font.setPointSize(10)
            font.setWeight(85)
            font.setBold(True)

            item = self.ware_table.horizontalHeaderItem(0)
            item.setText(_translate("Dialog", "cod"))
            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))
            item = self.ware_table.horizontalHeaderItem(1)
            item.setText(_translate("Dialog", "isbn"))
            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))
            item = self.ware_table.horizontalHeaderItem(2)
            item.setText(_translate("Dialog", "titulo"))
            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))
            item = self.ware_table.horizontalHeaderItem(3)
            item.setText(_translate("Dialog", "autor"))
            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))
            item = self.ware_table.horizontalHeaderItem(4)
            item.setText(_translate("Dialog", "editorial"))
            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))
            item = self.ware_table.horizontalHeaderItem(5)
            item.setText(_translate("Dialog", "[" + self.currWare.cod + "]"))
            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))
            item = self.ware_table.horizontalHeaderItem(6)

            item.setFont(font)
            item.setForeground(QBrush(QColor(0,0,0)))

            #self.ware_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch) # metodo que setea ancho de columnas por igual
            # self.ware_table.horizontalHeader().setStretchLastSection(True) # metodo que setea que extienda solo la ultiam columna
            self.ware_table.horizontalHeader().setSectionResizeMode(5,QHeaderView.Stretch)
            self.ware_table.horizontalHeader().setSectionResizeMode(6, QHeaderView.Stretch)
            self.boxPV.setTitle(_translate("Dialog", "Cuadro de información"))
            self.btnLoadImage.setText(_translate("Dialog", "Cargar imagen"))

class ui_CustomChangeLocation(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(ui_CustomChangeLocation, self).__init__(parent)
        self.code = ""
        self.title = ""
        self.setupUi()

    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        pass

    def returnValues(self, textButton: str = ""):
        #textButton: Ok, Cancel
        txtEvaluated = self.txtUbic.text().upper()
        if txtEvaluated != "" and textButton == "Ok":
            splitted = txtEvaluated.split(",")
            if len(splitted) == 2:
                stripSplitted = list(map(lambda x: x.strip(), splitted))
                mueble = stripSplitted[0].split(" ")
                fila = stripSplitted[1].split(" ")
                if mueble[0] == "MUEBLE" and fila[0] == "FILA" and len(mueble) > 1 and len(fila) > 1:
                    self.returnedVal = (textButton, self.txtUbic.text().upper())
                    self.submitclose()
                else:
                    QMessageBox.information(self, "Alerta", "¡Seguir el formato correcto!\n>MUEBLE (A->Z), FILA (1->100)", buttons= QMessageBox.Ok)
                    self.txtUbic.clear()
            else:
                QMessageBox.information(self, "Alerta", "¡Seguir el formato correcto!\n>MUEBLE (A->Z), FILA (1->100)", buttons= QMessageBox.Ok)
                self.txtUbic.clear()
        else:
            self.returnedVal = (textButton, None)
            self.submitclose()
        
    def cleanInputText(self):
        self.txtUbic.setText("");

    def closeEvent(self, event):
        self.returnValues("Cancel")

    def setItemData(self, code: str = "", title: str = ""):
        self.label2.setText(code)
        self.label2.adjustSize()
        self.label3.setText(title)
        self.label3.adjustSize()
        w1 = self.label4.frameGeometry().width()
        w2 = self.label3.frameGeometry().width()
        self.textWidth = w1 + ((w2>w1) and (w2 - w1))
        self.txtUbic.setFixedWidth(self.textWidth)
        self.btnCancel.move(self.textWidth - self.btnCancel.frameGeometry().width() , 110)
        self.btnOk.move(self.textWidth - self.btnCancel.frameGeometry().width() - self.btnOk.frameGeometry().width() , 110)

    def submitclose(self):
        self.accept()

    def setupUi(self):
        self.setObjectName("QCustomDialog")
        self.setWindowTitle("Cambiar ubicación")

        self.label1 = QLabel("Ingrese nueva ubicación para:",self)
        self.label1.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label1.move(6, 15)
        self.label1.setStyleSheet("background-color: lightgreen")
        self.label1.adjustSize()

        self.label2 = QLabel(self)
        self.label2.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label2.move(6, 32)
        self.label2.setStyleSheet("background-color: lightblue")

        self.label3 = QLabel(self)
        self.label3.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label3.move(6, 49)
        self.label3.setStyleSheet("background-color: lightblue")


        self.label4 = QLabel("FORMATO: Mueble (Letra), Fila (Numero)",self)
        self.label4.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label4.move(6, 66)
        self.label4.setStyleSheet("background-color: lightgreen")
        self.label4.adjustSize()

        self.txtUbic = QLineEdit(self)
        self.txtUbic.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        self.txtUbic.move(6, 85)

        self.btnCancel = QPushButton('Cancel', self)
        self.btnCancel.adjustSize()
        self.btnCancel.clicked.connect(lambda: self.returnValues('Cancel'))

        self.btnOk = QPushButton('OK', self)
        self.btnOk.adjustSize()
        self.btnOk.clicked.connect(lambda: self.returnValues("Ok"))

class ui_OperationDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(ui_OperationDialog, self).__init__(parent)
        self.code = ""
        self.title = ""
        self.setupUi()
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        pass

    def returnValues(self, textButton: str = ""):
        self.returnedVal = textButton
        self.submitclose()

    def cleanInputText(self):
        self.txtUbic.setText("");

    def closeEvent(self, event):
        self.returnValues("Cancelar")

    def setItemData(self, code: str = "", title: str = ""):
        self.label2.setText(code)
        self.label2.adjustSize()
        self.label3.setText(title)
        self.label3.adjustSize()
        w1 = 50
        w2 = self.label3.frameGeometry().width()
        self.textWidth = ((w2>w1) and (w2 - w1))
        # self.txtUbic.setFixedWidth(self.textWidth)
        # self.btnDeactivate.move(5, 70)
        tmp_width = 0
        # self.btnLocation.move(self.btnDeactivate.frameGeometry().width() + 5, 70)
        self.btnLocation.move(tmp_width + 5, 70)
        # self.btnEdit.move(self.btnDeactivate.frameGeometry().width() + self.btnLocation.frameGeometry().width() + 5, 70)
        self.btnEdit.move(tmp_width + self.btnLocation.frameGeometry().width() + 5, 70)
        self.btnCancel.move(5, 95)

    def submitclose(self):
        self.accept()

    def setupUi(self):
        self.setObjectName("QCustomDialog")
        self.setWindowTitle("Cuadro de operaciones")

        self.label1 = QLabel("Elija la operación para:",self)
        self.label1.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label1.move(6, 15)
        self.label1.setStyleSheet("background-color: lightgreen")
        self.label1.adjustSize()

        self.label2 = QLabel(self)
        self.label2.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label2.move(6, 32)
        self.label2.setStyleSheet("background-color: lightblue")

        self.label3 = QLabel(self)
        self.label3.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label3.move(6, 49)
        self.label3.setStyleSheet("background-color: lightblue")

        self.btnEdit = QPushButton('Editar', self)
        self.btnEdit.adjustSize()
        self.btnEdit.clicked.connect(lambda: self.returnValues("Editar"))

        self.btnLocation = QPushButton('Cambiar ubicación', self)
        self.btnLocation.adjustSize()
        self.btnLocation.clicked.connect(lambda: self.returnValues("Ubicacion"))

        # self.btnDeactivate = QPushButton('Desactivar', self)
        # self.btnDeactivate.adjustSize()
        # self.btnDeactivate.clicked.connect(lambda: self.returnValues('Desactivar'))

        self.btnCancel = QPushButton('Cancelar', self)
        self.btnCancel.adjustSize()
        self.btnCancel.clicked.connect(lambda: self.returnValues("Cancelar"))
        self.btnCancel.setDefault(True)

    def show_window(self):
        self.show()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    # Dialog = QDialog()
    # ui = Ui_Dialog(Dialog)
    # ui = ui_CustomChangeLocation()
    # data = {"cod": "GN_2524",
    #     "isbn": "97845562314",
    #     "title": "COMENTARIOS REALES DE LOS INCAS",
    #     "autor": "INCA GARCILASO DE VEGA",
    #     "publisher": "EL LECTOR",
    #     "price": "65.0"}
    # ui = ui_EditNewItemDialog(True)
    ui = Ui_Dialog()
    ui.setupUi()
    ui.retranslateUi()
    # ui.setDataFields(data)
    # ui.setDataFields("GN_2025")
    # ui.cleanInputFields(True)
    # ui = ui_OperationDialog(Dialog)
    # ui.setItemData("", "")
    # ui.init_condition()
    # ui.showWindow()
    ui.show()
    # ui.exec_()
    sys.exit(app.exec_())

    


